<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>姚永坤的小窝</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-04-17T11:14:40.031Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>姚永坤</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>设计模式在 Node 中的应用</title>
    <link href="http://example.com/2024/04/17/pattern-in-node/"/>
    <id>http://example.com/2024/04/17/pattern-in-node/</id>
    <published>2024-04-17T04:19:44.000Z</published>
    <updated>2024-04-17T11:14:40.031Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是设计模式"><a href="#什么是设计模式" class="headerlink" title="什么是设计模式"></a>什么是设计模式</h1><p>设计模式是针对软件开发人员在编码过程中遇到的反复出现的问题而提出的久经考验的解决方案。它们提供了一种解决难题的结构化方法，并促进了软件架构的最佳实践。通过采用设计模式，开发人员可以创建更健壮、可维护和可扩展的代码库。</p><h1 id="为什么在-Node-中使用设计模式"><a href="#为什么在-Node-中使用设计模式" class="headerlink" title="为什么在 Node 中使用设计模式"></a>为什么在 Node 中使用设计模式</h1><p>Node.js 以其非阻塞事件驱动架构而闻名，为软件设计带来了独特的挑战和机遇。应用为 Node.js 量身定制的设计模式可以提高应用程序的效率并优化应用程序。让我们来探讨一些在 Node.js 生态系统中特别有价值的关键设计模式：</p><h2 id="1-单例模式"><a href="#1-单例模式" class="headerlink" title="1. 单例模式"></a>1. 单例模式</h2><p>单例模式是一种创建型设计模式，它确保类只有一个实例，并提供一个全局访问点。在 Node.js 中，单例模式可以用于创建全局配置对象、数据库连接、日志记录器等。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Database</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">connection</span> = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">getInstance</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Database</span>.<span class="property">instance</span>) &#123;</span><br><span class="line">      <span class="title class_">Database</span>.<span class="property">instance</span> = <span class="keyword">new</span> <span class="title class_">Database</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Database</span>.<span class="property">instance</span>; </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">connect</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">connection</span> = <span class="string">&#x27;Connected&#x27;</span>; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> db1 = <span class="title class_">Database</span>.<span class="title function_">getInstance</span>();</span><br><span class="line"><span class="keyword">const</span> db2 = <span class="title class_">Database</span>.<span class="title function_">getInstance</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(db1 === db2); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">db1.<span class="title function_">connect</span>(); </span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(db1.<span class="property">connection</span>); <span class="comment">// &#x27;Connected&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(db2.<span class="property">connection</span>); <span class="comment">// &#x27;Connected&#x27;</span></span><br></pre></td></tr></table></figure><p>上面的代码中，<code>Database</code> 类只有一个实例，并且可以通过 <code>getInstance</code> 方法访问。<code>db1</code> 和 <code>db2</code> 都是同一个实例，因此它们的 <code>connection</code> 属性也是相同的。这样可以确保只有一个数据库实例，并防止重复连接。单例模式适用于一个类只存在一个实例的情况。</p><h2 id="2-工厂模式"><a href="#2-工厂模式" class="headerlink" title="2. 工厂模式"></a>2. 工厂模式</h2><p>工厂模式提供了一种创建对象的方法，无需指定将要创建对象的确切类别。在 Node.js 环境中，这可以简化对象创建，尤其是在处理读取文件或调用 API 等异步操作时。通过抽象对象创建，工厂模式提高了代码的可读性和可重用性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">speak</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Woof&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">speak</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Meow&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AnimalFactory</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">create</span>(<span class="params">type, name</span>) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;dog&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Dog</span>(name);</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;cat&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Cat</span>(name);</span><br><span class="line">      <span class="attr">default</span>:</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Invalid animal type&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> factory = <span class="keyword">new</span> <span class="title class_">AnimalFactory</span>();</span><br><span class="line"><span class="keyword">const</span> dog = factory.<span class="title function_">create</span>(<span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;Buddy&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> cat = factory.<span class="title function_">create</span>(<span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;Whiskers&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dog.<span class="title function_">speak</span>()); <span class="comment">// &#x27;Woof&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cat.<span class="title function_">speak</span>()); <span class="comment">// &#x27;Meow&#x27;</span></span><br></pre></td></tr></table></figure><p>上面的代码中，<code>AnimalFactory</code> 类提供了一个 <code>create</code> 方法，根据传入的类型创建不同的动物对象。这样可以避免直接在代码中创建对象，提高了代码的可维护性和可扩展性。工厂模式适用于需要根据不同条件创建对象的情况。</p><h2 id="3-观察者模式"><a href="#3-观察者模式" class="headerlink" title="3. 观察者模式"></a>3. 观察者模式</h2><p>观察者模式是一种行为设计模式，它定义了一种订阅发布机制，允许对象之间的松散耦合。在 Node.js 中，观察者模式可以用于实现事件驱动的编程模型，例如处理 HTTP 请求、处理文件系统事件等。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">observers</span> = [];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">subscribe</span>(<span class="params">observer</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">observers</span>.<span class="title function_">push</span>(observer);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">unsubscribe</span>(<span class="params">observer</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">observers</span> = <span class="variable language_">this</span>.<span class="property">observers</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">obs</span> =&gt;</span> obs !== observer);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">notify</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">observers</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">observer</span> =&gt;</span> observer.<span class="title function_">update</span>(data));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line">  <span class="title function_">update</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Received data:&#x27;</span>, data);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> subject = <span class="keyword">new</span> <span class="title class_">Subject</span>();</span><br><span class="line"><span class="keyword">const</span> observer1 = <span class="keyword">new</span> <span class="title class_">Observer</span>();</span><br><span class="line"><span class="keyword">const</span> observer2 = <span class="keyword">new</span> <span class="title class_">Observer</span>();</span><br><span class="line"></span><br><span class="line">subject.<span class="title function_">subscribe</span>(observer1);</span><br><span class="line">subject.<span class="title function_">subscribe</span>(observer2);</span><br><span class="line"></span><br><span class="line">subject.<span class="title function_">notify</span>(<span class="string">&#x27;Hello, World!&#x27;</span>);</span><br></pre></td></tr></table></figure><p>上面的代码中，<code>Subject</code> 类维护了一个观察者列表，并提供了 <code>subscribe</code>、<code>unsubscribe</code> 和 <code>notify</code> 方法。<code>Observer</code> 类定义了一个 <code>update</code> 方法，用于接收通知。通过观察者模式，<code>Subject</code> 和 <code>Observer</code> 之间的耦合度降低，使得代码更易于维护和扩展。观察者模式适用于需要实现事件驱动的场景。</p><h2 id="4-中介者模式"><a href="#4-中介者模式" class="headerlink" title="4. 中介者模式"></a>4. 中介者模式</h2><p>中介者模式是一种行为设计模式，它定义了一个中介对象，用于协调其他对象之间的通信。在 Node.js 中，中介者模式可以用于处理复杂的系统交互，例如处理多个服务之间的通信、处理多个组件之间的交互等。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Mediator</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">components</span> = [];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">register</span>(<span class="params">component</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">components</span>.<span class="title function_">push</span>(component);</span><br><span class="line">    component.<span class="title function_">setMediator</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">notify</span>(<span class="params">sender, event</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">components</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">component</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (component !== sender) &#123;</span><br><span class="line">        component.<span class="title function_">receive</span>(event);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">mediator</span> = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">setMediator</span>(<span class="params">mediator</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">mediator</span> = mediator;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">send</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">mediator</span>.<span class="title function_">notify</span>(<span class="variable language_">this</span>, event);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">receive</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> received: <span class="subst">$&#123;event&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mediator = <span class="keyword">new</span> <span class="title class_">Mediator</span>();</span><br><span class="line"><span class="keyword">const</span> component1 = <span class="keyword">new</span> <span class="title class_">Component</span>(<span class="string">&#x27;Component 1&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> component2 = <span class="keyword">new</span> <span class="title class_">Component</span>(<span class="string">&#x27;Component 2&#x27;</span>);</span><br><span class="line"></span><br><span class="line">mediator.<span class="title function_">register</span>(component1);</span><br><span class="line">mediator.<span class="title function_">register</span>(component2);</span><br><span class="line"></span><br><span class="line">component1.<span class="title function_">send</span>(<span class="string">&#x27;Hello from Component 1&#x27;</span>);</span><br><span class="line">component2.<span class="title function_">send</span>(<span class="string">&#x27;Hello from Component 2&#x27;</span>);</span><br></pre></td></tr></table></figure><p>上面的代码中，<code>Mediator</code> 类维护了一个组件列表，并提供了 <code>register</code> 和 <code>notify</code> 方法。<code>Component</code> 类定义了 <code>send</code> 和 <code>receive</code> 方法，用于发送和接收消息。通过中介者模式，<code>Component</code> 之间的通信通过中介者进行，降低了组件之间的耦合度，使得代码更易于维护和扩展。中介者模式适用于需要处理多个组件之间的通信的场景。</p><h2 id="5-策略模式"><a href="#5-策略模式" class="headerlink" title="5. 策略模式"></a>5. 策略模式</h2><p>策略模式是一种行为设计模式，它定义了一系列算法，并使得这些算法可以相互替换。在 Node.js 中，策略模式可以用于处理不同的业务逻辑，例如处理不同的支付方式、处理不同的数据验证等。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PaymentStrategy</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">strategy</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">strategy</span> = strategy;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">pay</span>(<span class="params">amount</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">strategy</span>.<span class="title function_">pay</span>(amount);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CreditCardStrategy</span> &#123;</span><br><span class="line">  <span class="title function_">pay</span>(<span class="params">amount</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`Paid $<span class="subst">$&#123;amount&#125;</span> using credit card`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PayPalStrategy</span> &#123;</span><br><span class="line">  <span class="title function_">pay</span>(<span class="params">amount</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`Paid $<span class="subst">$&#123;amount&#125;</span> using PayPal`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> creditCardStrategy = <span class="keyword">new</span> <span class="title class_">PaymentStrategy</span>(<span class="keyword">new</span> <span class="title class_">CreditCardStrategy</span>());</span><br><span class="line"><span class="keyword">const</span> payPalStrategy = <span class="keyword">new</span> <span class="title class_">PaymentStrategy</span>(<span class="keyword">new</span> <span class="title class_">PayPalStrategy</span>());</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(creditCardStrategy.<span class="title function_">pay</span>(<span class="number">100</span>)); <span class="comment">// &#x27;Paid $100 using credit card&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(payPalStrategy.<span class="title function_">pay</span>(<span class="number">50</span>)); <span class="comment">// &#x27;Paid $50 using PayPal&#x27;</span></span><br></pre></td></tr></table></figure><p>上面的代码中，<code>PaymentStrategy</code> 类接受一个策略对象，并提供了 <code>pay</code> 方法。<code>CreditCardStrategy</code> 和 <code>PayPalStrategy</code> 类定义了不同的支付策略。通过策略模式，可以根据不同的策略执行不同的支付方式，使得代码更易于扩展和维护。策略模式适用于需要根据不同条件执行不同算法的场景。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>设计模式是一种在软件开发中广泛使用的解决方案，它提供了一种结构化的方法来解决常见的问题。在 Node.js 中，设计模式可以帮助开发人员创建更健壮、可维护和可扩展的代码库。通过使用设计模式，开发人员可以更好地理解和设计复杂的系统，提高代码的质量和可读性。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;什么是设计模式&quot;&gt;&lt;a href=&quot;#什么是设计模式&quot; class=&quot;headerlink&quot; title=&quot;什么是设计模式&quot;&gt;&lt;/a&gt;什么是设计模式&lt;/h1&gt;&lt;p&gt;设计模式是针对软件开发人员在编码过程中遇到的反复出现的问题而提出的久经考验的解决方案。它们提供了一种</summary>
      
    
    
    
    
    <category term="Node" scheme="http://example.com/tags/Node/"/>
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>JS 基础技能2</title>
    <link href="http://example.com/2024/04/17/js-skill-2/"/>
    <id>http://example.com/2024/04/17/js-skill-2/</id>
    <published>2024-04-17T02:20:08.000Z</published>
    <updated>2024-04-17T02:37:07.214Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Object-groupBy"><a href="#1-Object-groupBy" class="headerlink" title="1. Object.groupBy"></a>1. Object.groupBy</h1><p><code>Object.groupBy</code> 方法可以根据指定的键将数组分组为对象。<br><strong>参数</strong></p><ul><li><code>array: Array&lt;T&gt;</code>: 需要分组的数组</li><li><code>key: Function</code>: 分组的键</li></ul><p><strong>返回</strong></p><ul><li><code>return: Partial&lt;Record&lt;string, T[]&gt;&gt;</code>: 返回分组后的对象</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> data = [</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span>, <span class="attr">age</span>: <span class="number">30</span>, <span class="attr">sex</span>: <span class="string">&#x27;F&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;Bob&#x27;</span>, <span class="attr">age</span>: <span class="number">25</span>, <span class="attr">sex</span>: <span class="string">&#x27;M&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span>, <span class="attr">sex</span>: <span class="string">&#x27;M&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">name</span>: <span class="string">&#x27;Jerry&#x27;</span>, <span class="attr">age</span>: <span class="number">35</span>, <span class="attr">sex</span>: <span class="string">&#x27;M&#x27;</span> &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = <span class="title class_">Object</span>.<span class="title function_">groupBy</span>(data,<span class="function">(<span class="params">item</span>)=&gt;</span> item.<span class="property">sex</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   F: [ &#123; id: 1, name: &#x27;Alice&#x27;, age: 30, sex: &#x27;F&#x27; &#125; ],</span></span><br><span class="line"><span class="comment">//   M: [ &#123; id: 2, name: &#x27;Bob&#x27;, age: 25, sex: &#x27;M&#x27; &#125;, </span></span><br><span class="line"><span class="comment">//      &#123; id: 3, name: &#x27;Tom&#x27;, age: 20, sex: &#x27;M&#x27;&#125;,</span></span><br><span class="line"><span class="comment">//      &#123; id: 4, name: &#x27;Jerry&#x27;, age: 35, sex: &#x27;M&#x27;&#125;</span></span><br><span class="line"><span class="comment">//   ]</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><h1 id="at"><a href="#at" class="headerlink" title="at"></a>at</h1><p><code>at</code> 方法返回数组中指定索引的元素。如果索引为负数，则从数组末尾开始计算。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> data = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="title function_">at</span>(<span class="number">0</span>)); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="title function_">at</span>(-<span class="number">1</span>)); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><h1 id="3-Object-hasOwn"><a href="#3-Object-hasOwn" class="headerlink" title="3. Object.hasOwn"></a>3. Object.hasOwn</h1><p><code>Object.hasOwn</code> 方法用于检查对象是否具有指定的属性。</p><p><strong>参数</strong></p><ul><li><code>obj: Object</code>: 要检查的对象</li><li><code>key: string</code>: 要检查的属性</li><li><code>return: boolean</code>: 如果对象具有指定的属性，则返回 <code>true</code>，否则返回 <code>false</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">hasOwn</span>(obj, <span class="string">&#x27;name&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-Object-groupBy&quot;&gt;&lt;a href=&quot;#1-Object-groupBy&quot; class=&quot;headerlink&quot; title=&quot;1. Object.groupBy&quot;&gt;&lt;/a&gt;1. Object.groupBy&lt;/h1&gt;&lt;p&gt;&lt;code&gt;Object</summary>
      
    
    
    
    
    <category term="JS" scheme="http://example.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>useState vs useRef</title>
    <link href="http://example.com/2024/04/16/usestate-vs-useref/"/>
    <id>http://example.com/2024/04/16/usestate-vs-useref/</id>
    <published>2024-04-16T11:50:04.000Z</published>
    <updated>2024-04-19T03:28:44.365Z</updated>
    
    <content type="html"><![CDATA[<p><code>useState</code> 和 <code>useRef</code> 是 React 中两个常用的钩子，它们都可以用于保存组件状态。但是，它们之间有什么区别？在什么情况下应该使用哪一个？本文将详细介绍 <code>useState</code> 和 <code>useRef</code> 的区别和使用场景。</p><h1 id="useState"><a href="#useState" class="headerlink" title="useState"></a>useState</h1><p><code>useState</code> 是 React 中最基本的钩子之一，用于在函数组件中保存状态。它返回一个包含两个元素的数组：当前状态和更新状态的函数。当调用更新状态的函数时，React 会重新渲染组件，并将新状态传递给组件。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">CounterComponent</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [counter, setCounter] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">incrementCounter</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setCounter</span>(counter + <span class="number">1</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Counter: &#123;counter&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;incrementCounter&#125;</span>&gt;</span>Increment<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">CounterComponent</span>;</span><br></pre></td></tr></table></figure><ul><li>在上面的示例中，我们使用 <code>useState</code> 钩子创建了一个计数器组件。<code>counter</code> 是当前状态，<code>setCounter</code> 是更新状态的函数。每次单击按钮时，<code>incrementCounter</code> 函数会将计数器增加 1。</li><li><code>useState</code> 钩子的一个重要特性是，它会将新状态合并到旧状态中。这意味着您可以更新状态的一部分，而不必担心丢失其他部分。</li><li>还可以接受一个函数作为参数，该函数返回初始状态。这对于计算初始状态或惰性初始化状态非常有用。</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [counter, setCounter] = <span class="title function_">useState</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>缺点是，每次更新状态时，组件都会重新渲染。这可能会导致性能问题，尤其是在处理大型组件树时。</li><li><code>useState</code> 钩子适用于保存与组件渲染相关的状态，例如表单输入、UI 状态等。</li><li><code>useState</code> 还可以立即更新状态，而不必等到下一次渲染。这对于处理用户输入或其他交互事件非常有用。</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">CounterComponent</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [counter, setCounter] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">incrementCounter</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setCounter</span>(<span class="function">(<span class="params">prevCounter</span>) =&gt;</span> prevCounter + <span class="number">1</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Counter: &#123;counter&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;incrementCounter&#125;</span>&gt;</span>Increment<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="useRef"><a href="#useRef" class="headerlink" title="useRef"></a>useRef</h1><p><code>useRef</code> 是另一个 React 钩子，用于保存组件状态。与 <code>useState</code> 不同，<code>useRef</code> 返回一个可变的 ref 对象，该对象的 <code>current</code> 属性包含当前状态。当更新 <code>current</code> 属性时，组件不会重新渲染。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useRef &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">CounterComponent</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> counterRef = <span class="title function_">useRef</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">incrementCounter</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    counterRef.<span class="property">current</span> += <span class="number">1</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(counterRef.<span class="property">current</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Counter: &#123;counterRef.current&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;incrementCounter&#125;</span>&gt;</span>Increment<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">CounterComponent</span>;</span><br></pre></td></tr></table></figure><ul><li>在上面的示例中，我们使用 <code>useRef</code> 钩子创建了一个计数器组件。<code>counterRef</code> 是一个 ref 对象，它的 <code>current</code> 属性包含当前状态。每次单击按钮时，我们直接更新 <code>current</code> 属性，而不会调用更新状态的函数。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;useState&lt;/code&gt; 和 &lt;code&gt;useRef&lt;/code&gt; 是 React 中两个常用的钩子，它们都可以用于保存组件状态。但是，它们之间有什么区别？在什么情况下应该使用哪一个？本文将详细介绍 &lt;code&gt;useState&lt;/code&gt; 和 &lt;co</summary>
      
    
    
    
    
    <category term="React" scheme="http://example.com/tags/React/"/>
    
    <category term="useState" scheme="http://example.com/tags/useState/"/>
    
    <category term="useRef" scheme="http://example.com/tags/useRef/"/>
    
  </entry>
  
  <entry>
    <title>让代码更简洁的6个高级 TypeScript 技巧</title>
    <link href="http://example.com/2024/04/16/6-advanced-typescript-tricks-for-clean-code/"/>
    <id>http://example.com/2024/04/16/6-advanced-typescript-tricks-for-clean-code/</id>
    <published>2024-04-16T06:41:28.000Z</published>
    <updated>2024-04-16T06:41:28.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本篇将介绍六种高级 TypeScript 技巧，并通过示例逐步说明每种技巧的作用和优点。</p></blockquote><h1 id="高级类型"><a href="#高级类型" class="headerlink" title="高级类型"></a>高级类型</h1><p>我们可以使用高级 TypeScript 类型（如映射类型和条件类型）在现有类型的基础上创建新类型。借助这些类型，可以以更强的方式更改和操作类型，从而提高代码的灵活性和可维护性。</p><h2 id="1-映射类型"><a href="#1-映射类型" class="headerlink" title="1. 映射类型"></a>1. 映射类型</h2><p>映射类型是 TypeScript 中的一种高级类型，它可以根据现有类型创建新类型。通过映射类型，我们可以轻松地将现有类型的每个属性转换为新类型的属性。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Person</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ReadonlyPerson</span> = &#123;</span><br><span class="line">  <span class="keyword">readonly</span> [K <span class="keyword">in</span> keyof <span class="title class_">Person</span>]: <span class="title class_">Person</span>[K];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">person</span>: <span class="title class_">ReadonlyPerson</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Error: Cannot assign to &#x27;name&#x27; because it is a read-only property</span></span><br><span class="line">person.<span class="property">name</span> = <span class="string">&#x27;Bob&#x27;</span>;</span><br></pre></td></tr></table></figure><p>在上面的示例中，我们定义了一个 <code>Person</code> 类型，然后使用映射类型 <code>ReadonlyPerson</code> 将 <code>Person</code> 类型的所有属性转换为只读属性。这样一来，我们就无法修改 <code>ReadonlyPerson</code> 类型的属性。</p><h2 id="2-条件类型"><a href="#2-条件类型" class="headerlink" title="2. 条件类型"></a>2. 条件类型</h2><p>条件类型是 TypeScript 中的一种高级类型，它可以根据条件表达式选择不同的类型。通过条件类型，我们可以根据不同的条件返回不同的类型。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">IsString</span>&lt;T&gt; = T <span class="keyword">extends</span> <span class="built_in">string</span> ? <span class="string">&#x27;yes&#x27;</span> : <span class="string">&#x27;no&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> A = <span class="title class_">IsString</span>&lt;<span class="built_in">string</span>&gt;; <span class="comment">// &#x27;yes&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> B = <span class="title class_">IsString</span>&lt;<span class="built_in">number</span>&gt;; <span class="comment">// &#x27;no&#x27;</span></span><br></pre></td></tr></table></figure><p>在上面的示例中，我们定义了一个条件类型 <code>IsString</code>，它根据泛型 <code>T</code> 是否为 <code>string</code> 类型返回不同的类型。通过条件类型，我们可以根据不同的条件返回不同的类型。</p><h1 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h1><p>TypeScript 中的装饰器是一项强大的功能，允许添加元数据，修改或扩展类、方法、属性和参数的行为。它们是高阶函数，可用于观察、修改或替换类定义、方法定义、访问器定义、属性定义或参数定义。</p><h2 id="1-类装饰器"><a href="#1-类装饰器" class="headerlink" title="1. 类装饰器"></a>1. 类装饰器</h2><p>类装饰器是一种装饰器，用于装饰类定义。<strong>接收一个参数，该参数是类的构造函数</strong>。类装饰器可以用于观察、修改或替换类定义。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">LogClass</span>(<span class="params"><span class="attr">target</span>: <span class="title class_">Function</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Class:&#x27;</span>, target.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@LogClass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Output: Class: Person</span></span><br></pre></td></tr></table></figure><p>在上面的示例中，我们定义了一个类装饰器 <code>LogClass</code>，它用于观察类定义。通过 <code>@LogClass</code> 语法，我们将 <code>LogClass</code> 装饰器应用于 <code>Person</code> 类，从而观察 <code>Person</code> 类的名称。</p><h2 id="2-方法装饰器"><a href="#2-方法装饰器" class="headerlink" title="2. 方法装饰器"></a>2. 方法装饰器</h2><p>方法装饰器是一种装饰器，用于装饰方法定义。它接收三个参数，分别是<strong>目标对象、方法名称和方法描述符</strong>。方法装饰器可以用于观察、修改或替换方法定义。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">LogMethod</span>(<span class="params"><span class="attr">target</span>: <span class="built_in">any</span>, <span class="attr">key</span>: <span class="built_in">string</span>, <span class="attr">descriptor</span>: <span class="title class_">PropertyDescriptor</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Method:&#x27;</span>, key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="meta">@LogMethod</span></span><br><span class="line">  <span class="title function_">greet</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello, world!&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Output: Method: greet</span></span><br></pre></td></tr></table></figure><p>在上面的示例中，我们定义了一个方法装饰器 <code>LogMethod</code>，它用于观察方法定义。通过 <code>@LogMethod</code> 语法，我们将 <code>LogMethod</code> 装饰器应用于 <code>greet</code> 方法，从而观察 <code>greet</code> 方法的名称。</p><h2 id="3-属性装饰器"><a href="#3-属性装饰器" class="headerlink" title="3. 属性装饰器"></a>3. 属性装饰器</h2><p>属性装饰器是一种装饰器，用于装饰属性定义。它接收两个参数，分别是<strong>目标对象和属性名称</strong>。属性装饰器可以用于观察、修改或替换属性定义。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">LogProperty</span>(<span class="params"><span class="attr">target</span>: <span class="built_in">any</span>, <span class="attr">key</span>: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Property:&#x27;</span>, key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="meta">@LogProperty</span></span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Output: Property: name</span></span><br></pre></td></tr></table></figure><p>在上面的示例中，我们定义了一个属性装饰器 <code>LogProperty</code>，它用于观察属性定义。通过 <code>@LogProperty</code> 语法，我们将 <code>LogProperty</code> 装饰器应用于 <code>name</code> 属性，从而观察 <code>name</code> 属性的名称。</p><h2 id="4-参数装饰器"><a href="#4-参数装饰器" class="headerlink" title="4. 参数装饰器"></a>4. 参数装饰器</h2><p>参数装饰器是一种装饰器，用于装饰参数定义。它接收三个参数，分别是<strong>目标对象、方法名称和参数索引</strong>。参数装饰器可以用于观察、修改或替换参数定义。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">LogParameter</span>(<span class="params"><span class="attr">target</span>: <span class="built_in">any</span>, <span class="attr">key</span>: <span class="built_in">string</span>, <span class="attr">index</span>: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Parameter:&#x27;</span>, index);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">greet</span>(<span class="params"><span class="meta">@LogParameter</span> <span class="attr">message</span>: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(message);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Output: Parameter: 0</span></span><br></pre></td></tr></table></figure><p>在上面的示例中，我们定义了一个参数装饰器 <code>LogParameter</code>，它用于观察参数定义。通过 <code>@LogParameter</code> 语法，我们将 <code>LogParameter</code> 装饰器应用于 <code>message</code> 参数，从而观察 <code>message</code> 参数的索引。</p><h1 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h1><p>命名空间是 TypeScript 中的一种模块化机制，用于将代码组织到逻辑分组中。通过命名空间，我们可以避免全局作用域的污染，提高代码的可维护性和可重用性。</p><h2 id="1-声明命名空间"><a href="#1-声明命名空间" class="headerlink" title="1. 声明命名空间"></a>1. 声明命名空间</h2><p>命名空间可以通过 <code>namespace</code> 关键字声明。命名空间中的代码可以通过 <code>export</code> 关键字导出，以便在其他文件中使用。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title class_">Math</span> &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params"><span class="attr">a</span>: <span class="built_in">number</span>, <span class="attr">b</span>: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>)); <span class="comment">// Output: 3</span></span><br></pre></td></tr></table></figure><p>在上面的示例中，我们声明了一个命名空间 <code>Math</code>，并在其中定义了一个 <code>add</code> 函数。通过 <code>export</code> 关键字，我们将 <code>add</code> 函数导出，以便在其他文件中使用。</p><h2 id="2-引用命名空间"><a href="#2-引用命名空间" class="headerlink" title="2. 引用命名空间"></a>2. 引用命名空间</h2><p>命名空间可以通过 <code>/// &lt;reference path=&quot;...&quot; /&gt;</code> 指令引用。通过引用命名空间，我们可以在当前文件中使用命名空间中的代码。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference path=&quot;math.ts&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>)); <span class="comment">// Output: 3</span></span><br></pre></td></tr></table></figure><p>在上面的示例中，我们使用 <code>/// &lt;reference path=&quot;math.ts&quot; /&gt;</code> 指令引用了 <code>math.ts</code> 文件中的命名空间 <code>Math</code>。通过引用命名空间，我们可以在当前文件中使用 <code>Math</code> 命名空间中的代码。</p><h2 id="3-嵌套命名空间"><a href="#3-嵌套命名空间" class="headerlink" title="3. 嵌套命名空间"></a>3. 嵌套命名空间</h2><p>命名空间可以嵌套声明，以便更好地组织代码。通过嵌套命名空间，我们可以将相关代码组织到逻辑分组中，提高代码的可维护性和可重用性。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title class_">Math</span> &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">namespace</span> <span class="title class_">Advanced</span> &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">multiply</span>(<span class="params"><span class="attr">a</span>: <span class="built_in">number</span>, <span class="attr">b</span>: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> a * b;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="property">Advanced</span>.<span class="title function_">multiply</span>(<span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// Output: 6</span></span><br></pre></td></tr></table></figure><p>在上面的示例中，我们声明了一个嵌套命名空间 <code>Math.Advanced</code>，并在其中定义了一个 <code>multiply</code> 函数。通过嵌套命名空间，我们可以更好地组织代码，提高代码的可维护性和可重用性。</p><h1 id="Mixins"><a href="#Mixins" class="headerlink" title="Mixins"></a>Mixins</h1><p>TypeScript 中的混合类是由多个较小部分（称为混合类）组成类的一种方式。它们允许您在不同的类之间重用和共享行为，从而促进模块化和代码的可重用性。</p><h2 id="1-定义混合类"><a href="#1-定义混合类" class="headerlink" title="1. 定义混合类"></a>1. 定义混合类</h2><p>混合类是由多个较小部分（称为混合类）组成类的一种方式。通过混合类，我们可以在不同的类之间重用和共享行为。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Jumpable</span> &#123;</span><br><span class="line">  <span class="title function_">jump</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Jumping&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Duckable</span> &#123;</span><br><span class="line">  <span class="title function_">duck</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Ducking&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Character</span> <span class="keyword">implements</span> <span class="title class_">Jumpable</span>, <span class="title class_">Duckable</span> &#123;</span><br><span class="line">  <span class="attr">jump</span>: <span class="title class_">Jumpable</span>[<span class="string">&#x27;jump&#x27;</span>];</span><br><span class="line">  <span class="attr">duck</span>: <span class="title class_">Duckable</span>[<span class="string">&#x27;duck&#x27;</span>];</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">jump</span> = <span class="title class_">Jumpable</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">jump</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">duck</span> = <span class="title class_">Duckable</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">duck</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> character = <span class="keyword">new</span> <span class="title class_">Character</span>();</span><br><span class="line">character.<span class="title function_">jump</span>(); <span class="comment">// Output: Jumping</span></span><br><span class="line">character.<span class="title function_">duck</span>(); <span class="comment">// Output: Ducking</span></span><br></pre></td></tr></table></figure><p>在上面的示例中，我们定义了两个混合类 <code>Jumpable</code> 和 <code>Duckable</code>，它们分别定义了 <code>jump</code> 和 <code>duck</code> 方法。然后，我们定义了一个 <code>Character</code> 类，它实现了 <code>Jumpable</code> 和 <code>Duckable</code> 接口，并在构造函数中绑定了 <code>jump</code> 和 <code>duck</code> 方法。</p><h2 id="2-使用混合类"><a href="#2-使用混合类" class="headerlink" title="2. 使用混合类"></a>2. 使用混合类</h2><p>混合类可以在不同的类之间重用和共享行为。通过混合类，我们可以将相同的行为添加到不同的类中，从而促进模块化和代码的可重用性。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Flyable</span> &#123;</span><br><span class="line">  <span class="title function_">fly</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Flying&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Character</span> <span class="keyword">implements</span> <span class="title class_">Jumpable</span>, <span class="title class_">Duckable</span>, <span class="title class_">Flyable</span> &#123;</span><br><span class="line">  <span class="attr">jump</span>: <span class="title class_">Jumpable</span>[<span class="string">&#x27;jump&#x27;</span>];</span><br><span class="line">  <span class="attr">duck</span>: <span class="title class_">Duckable</span>[<span class="string">&#x27;duck&#x27;</span>];</span><br><span class="line">  <span class="attr">fly</span>: <span class="title class_">Flyable</span>[<span class="string">&#x27;fly&#x27;</span>];</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">jump</span> = <span class="title class_">Jumpable</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">jump</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">duck</span> = <span class="title class_">Duckable</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">duck</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">fly</span> = <span class="title class_">Flyable</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">fly</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> character = <span class="keyword">new</span> <span class="title class_">Character</span>();</span><br><span class="line">character.<span class="title function_">jump</span>(); <span class="comment">// Output: Jumping</span></span><br><span class="line">character.<span class="title function_">duck</span>(); <span class="comment">// Output: Ducking</span></span><br><span class="line">character.<span class="title function_">fly</span>(); <span class="comment">// Output: Flying</span></span><br></pre></td></tr></table></figure><h1 id="类型保护"><a href="#类型保护" class="headerlink" title="类型保护"></a>类型保护</h1><p>类型保护是 TypeScript 中的一种机制，用于在运行时检查类型。通过类型保护，我们可以在运行时检查类型，并根据类型执行不同的操作。</p><p>要定义类型保护，需要创建一个接收变量或参数并返回类型谓词的函数。类型谓词是一个布尔表达式，用于缩小函数范围内参数的类型。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isString</span>(<span class="params"><span class="attr">value</span>: <span class="built_in">any</span></span>): value is <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> value === <span class="string">&#x27;string&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">value</span>: <span class="built_in">any</span> = <span class="string">&#x27;Hello, world!&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_">isString</span>(value)) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value.<span class="title function_">toUpperCase</span>()); <span class="comment">// Output: HELLO, WORLD!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的示例中，我们定义了一个类型保护 <code>isString</code>，它用于检查变量是否为 <code>string</code> 类型。通过类型保护，我们可以在运行时检查类型，并根据类型执行不同的操作。</p><h1 id="utility-types"><a href="#utility-types" class="headerlink" title="utility-types"></a>utility-types</h1><p>TypeScript 中的实用程序类型是一组内置类型，用于操作和转换其他类型。通过实用程序类型，我们可以轻松地操作和转换类型，从而提高代码的灵活性和可维护性。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">email</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PartialPerson</span> = <span class="title class_">Partial</span>&lt;<span class="title class_">Person</span>&gt;;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ReadonlyPerson</span> = <span class="title class_">Readonly</span>&lt;<span class="title class_">Person</span>&gt;;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">NameAndAge</span> = <span class="title class_">Pick</span>&lt;<span class="title class_">Person</span>, <span class="string">&quot;name&quot;</span> | <span class="string">&quot;age&quot;</span>&gt;;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">WithoutEmail</span> = <span class="title class_">Omit</span>&lt;<span class="title class_">Person</span>, <span class="string">&quot;email&quot;</span>&gt;;</span><br></pre></td></tr></table></figure><p>在上面的示例中，我们使用实用程序类型 <code>Partial</code>、<code>Readonly</code>、<code>Pick</code> 和 <code>Omit</code> 分别创建了 <code>PartialPerson</code>、<code>ReadonlyPerson</code>、<code>NameAndAge</code> 和 <code>WithoutEmail</code> 类型。</p><h2 id="Partial"><a href="#Partial" class="headerlink" title="Partial"></a>Partial</h2><blockquote><p><code>Partial</code> 类型将所有属性设置为可选属性。</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">person</span>: <span class="title class_">PartialPerson</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Output: &#123; name: &#x27;Alice&#x27;, age: 30 &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person);</span><br></pre></td></tr></table></figure><h2 id="Readonly"><a href="#Readonly" class="headerlink" title="Readonly"></a>Readonly</h2><blockquote><p><code>Readonly</code> 类型将所有属性设置为只读属性。</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">person</span>: <span class="title class_">ReadonlyPerson</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">  <span class="attr">email</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Error: Cannot assign to &#x27;name&#x27; because it is a read-only property</span></span><br><span class="line">person.<span class="property">name</span> = <span class="string">&#x27;Bob&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="Pick"><a href="#Pick" class="headerlink" title="Pick"></a>Pick</h2><blockquote><p><code>Pick</code> 类型从现有类型中选择指定的属性。</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">person</span>: <span class="title class_">NameAndAge</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Output: &#123; name: &#x27;Alice&#x27;, age: 30 &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person);</span><br></pre></td></tr></table></figure><h2 id="Omit"><a href="#Omit" class="headerlink" title="Omit"></a>Omit</h2><blockquote><p><code>Omit</code> 类型从现有类型中排除指定的属性。</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">person</span>: <span class="title class_">WithoutEmail</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Output: &#123; name: &#x27;Alice&#x27;, age: 30 &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person);</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>总之，本文探讨了各种高级 TypeScript 主题，如命名空间、高级类型、装饰器、混合体、类型保护和实用类型。通过了解和利用这些功能，您可以创建更多模块化、可重用和可维护的代码，从而遵守最佳实践并降低运行时出错的可能性。</p><p>通过利用这些高级 TypeScript 功能，您可以编写更简洁、更有条理和可维护的代码，充分利用 TypeScript 强大的类型系统和语言功能。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本篇将介绍六种高级 TypeScript 技巧，并通过示例逐步说明每种技巧的作用和优点。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;高级类型&quot;&gt;&lt;a href=&quot;#高级类型&quot; class=&quot;headerlink&quot; title=&quot;高级类型&quot;</summary>
      
    
    
    
    
    <category term="TypeScript" scheme="http://example.com/tags/TypeScript/"/>
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>使用 useState 时的误区</title>
    <link href="http://example.com/2024/04/16/react-usestate-mistake/"/>
    <id>http://example.com/2024/04/16/react-usestate-mistake/</id>
    <published>2024-04-16T01:39:56.000Z</published>
    <updated>2024-04-16T03:26:23.748Z</updated>
    
    <content type="html"><![CDATA[<p>React 以其独特的方法管理组件中的状态，已成为前端主流的开发框架。一个常见的钩子<code>useState</code>是最基本的，但经常被误用。了解并避免这些常见错误，对于旨在创建高效、无错误应用程序的初学者和经验丰富的开发人员都至关重要。</p><p>本文将从四个方面讨论<code>useState</code>的误用，以及如何避免这些错误和正确使用。</p><h1 id="忘记考虑先前的状态"><a href="#忘记考虑先前的状态" class="headerlink" title="忘记考虑先前的状态"></a>忘记考虑先前的状态</h1><p>在使用 <code>React</code> 的 <code>useState</code> 钩子时，一个常见的错误是在更新时没有考虑最新状态。这种疏忽可能会导致意想不到的行为，尤其是在处理快速或多重状态更新时。我们看下面这个例子：</p><ul><li><p>Error code❌</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">CounterComponent</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [counter, setCounter] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">incrementCounter</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setCounter</span>(counter + <span class="number">1</span>); <span class="comment">// 这里的 counter 是旧的状态</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Counter: &#123;counter&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;incrementCounter&#125;</span>&gt;</span>Increment<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">CounterComponent</span>;</span><br></pre></td></tr></table></figure><p>在上述代码中，<code>incrementCounter</code> 根据 <code>count</code> 的当前值更新 <code>count</code>。这看起来简单明了，但可能会导致问题。<code>React</code> 可能会将多个 <code>setCounter</code> 调用批处理在一起，或者其他状态更新可能会干扰，导致计数器每次更新都不正确。</p></li><li><p>Correct code✅</p></li></ul><blockquote><p>要避免这个问题，可以使用函数形式的 setCounter 方法。该版本将一个函数作为参数，React 使用最新的状态值调用该函数。这样可以确保您始终使用最新的状态值。</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">CounterComponent</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [counter, setCounter] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">incrementCounter</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setCounter</span>(<span class="function"><span class="params">prevCounter</span> =&gt;</span> prevCounter + <span class="number">1</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Counter: &#123;counter&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;incrementCounter&#125;</span>&gt;</span>Increment<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">CounterComponent</span>;</span><br></pre></td></tr></table></figure><h1 id="错误二：忽略状态不变性"><a href="#错误二：忽略状态不变性" class="headerlink" title="错误二：忽略状态不变性"></a>错误二：忽略状态不变性</h1><p>在使用 <code>useState</code> 时，另一个常见的错误是忽略状态不变性。这意味着在更新状态时，您可能会直接修改状态，而不是创建一个新的状态对象。这可能会导致不正确的行为，因为 <code>React</code> 可能会错误地认为状态没有更改。</p><ul><li><p>Error code❌</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">UserComponent</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [user, setUser] = <span class="title function_">useState</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">updateUser</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    user.<span class="property">age</span> = <span class="number">31</span>; <span class="comment">// 直接修改 user 对象</span></span><br><span class="line">    <span class="title function_">setUser</span>(user);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Name: &#123;user.name&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Age: &#123;user.age&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;updateUser&#125;</span>&gt;</span>Update Age<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">UserComponent</span>;</span><br></pre></td></tr></table></figure><p>在上述代码中，<code>updateUser</code> 直接修改了 <code>user</code> 对象的 <code>age</code> 属性。这可能会导致 <code>React</code> 不会检测到状态的更改，从而不会重新渲染组件。</p></li><li><p>Correct code✅</p></li><li><p>要避免这个问题，您应该始终创建一个新的状态对象，而不是直接修改现有对象。这样可以确保 <code>React</code> 正确地检测到状态的更改，并重新渲染组件。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">UserComponent</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [user, setUser] = <span class="title function_">useState</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">updateUser</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setUser</span>(&#123; ...user, <span class="attr">age</span>: <span class="number">31</span> &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Name: &#123;user.name&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Age: &#123;user.age&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;updateUser&#125;</span>&gt;</span>Update Age<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">UserComponent</span>;</span><br></pre></td></tr></table></figure></li></ul><h1 id="错误三：误解异步更新"><a href="#错误三：误解异步更新" class="headerlink" title="错误三：误解异步更新"></a>错误三：误解异步更新</h1><p><code>React</code> 可能会将多个 <code>setState</code> 调用批处理在一起，这可能会导致意想不到的行为。例如，如果您依赖于先前的状态来更新状态，可能会遇到问题。</p><ul><li><p>Error code❌</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">CounterComponent</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [counter, setCounter] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">incrementCounter</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setCounter</span>(counter + <span class="number">1</span>);</span><br><span class="line">    <span class="title function_">setCounter</span>(counter + <span class="number">1</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Counter: &#123;counter&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;incrementCounter&#125;</span>&gt;</span>Increment<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">CounterComponent</span>;</span><br></pre></td></tr></table></figure><p>在上述代码中，<code>incrementCounter</code> 调用两次 <code>setCounter</code>，每次增加计数器的值。但是，由于 <code>React</code> 可能会批处理这些调用，因此可能会导致计数器的值不正确。</p></li><li><p>Correct code✅</p></li><li><p>要避免这个问题，您应该使用函数形式的 <code>setCounter</code>，以确保使用最新的状态值。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">CounterComponent</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [counter, setCounter] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">incrementCounter</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setCounter</span>(<span class="function"><span class="params">prevCounter</span> =&gt;</span> prevCounter + <span class="number">1</span>);</span><br><span class="line">    <span class="title function_">setCounter</span>(<span class="function"><span class="params">prevCounter</span> =&gt;</span> prevCounter + <span class="number">1</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Counter: &#123;counter&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;incrementCounter&#125;</span>&gt;</span>Increment<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">CounterComponent</span>;</span><br></pre></td></tr></table></figure></li></ul><h1 id="错误四：滥用衍生数据状态"><a href="#错误四：滥用衍生数据状态" class="headerlink" title="错误四：滥用衍生数据状态"></a>错误四：滥用衍生数据状态</h1><p>在某些情况下，您可能会尝试从状态派生其他状态。这可能会导致性能问题，因为每次更新状态时，派生状态也会更新。这可能会导致不必要的重新渲染。</p><ul><li>Error code❌<figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">CounterComponent</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [counter, setCounter] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> [doubleCounter, setDoubleCounter] = <span class="title function_">useState</span>(counter * <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">incrementCounter</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setCounter</span>(counter + <span class="number">1</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Counter: &#123;counter&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Double Counter: &#123;doubleCounter&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;incrementCounter&#125;</span>&gt;</span>Increment<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">CounterComponent</span>;</span><br></pre></td></tr></table></figure></li></ul><p>在上述代码中，<code>doubleCounter</code> 是从 <code>counter</code> 派生的。但是，由于 <code>doubleCounter</code> 是在组件中定义的，每次更新 <code>counter</code> 时，<code>doubleCounter</code> 也会更新。这可能会导致不必要的重新渲染。</p><ul><li>Correct code✅</li><li>要避免这个问题，您应该在需要时计算派生状态，而不是将其定义为状态。<figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">CounterComponent</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [counter, setCounter] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">incrementCounter</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setCounter</span>(counter + <span class="number">1</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> doubleCounter = counter * <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Counter: &#123;counter&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Double Counter: &#123;doubleCounter&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;incrementCounter&#125;</span>&gt;</span>Increment<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">CounterComponent</span>;</span><br></pre></td></tr></table></figure></li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><code>useState</code> 是 <code>React</code> 中最基本的钩子之一，但经常被误用。了解并避免这些常见错误对于创建高效、无错误的应用程序至关重要。在使用 <code>useState</code> 时，请记住：</p><ol><li>考虑先前的状态，使用函数形式的 <code>setCounter</code>。</li><li>保持状态的不变性，始终创建一个新的状态对象。</li><li>理解异步更新，使用函数形式的 <code>setCounter</code>。</li><li>避免滥用衍生数据状态，只在需要时计算派生状态。</li><li>了解并避免这些错误，可以帮助我们创建高效、无错误的 <code>React</code> 应用程序。</li><li>通过正确使用 <code>useState</code>，可以确保应用程序始终保持一致和可靠。</li><li>通过避免这些常见错误，可以确保 <code>React</code> 组件始终按预期工作。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;React 以其独特的方法管理组件中的状态，已成为前端主流的开发框架。一个常见的钩子&lt;code&gt;useState&lt;/code&gt;是最基本的，但经常被误用。了解并避免这些常见错误，对于旨在创建高效、无错误应用程序的初学者和经验丰富的开发人员都至关重要。&lt;/p&gt;
&lt;p&gt;本文将从四</summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="React" scheme="http://example.com/categories/React/"/>
    
    
    <category term="React" scheme="http://example.com/tags/React/"/>
    
    <category term="useState" scheme="http://example.com/tags/useState/"/>
    
  </entry>
  
  <entry>
    <title>Localhost 和 127.0.0.1之间的区别</title>
    <link href="http://example.com/2024/04/10/localhost/"/>
    <id>http://example.com/2024/04/10/localhost/</id>
    <published>2024-04-10T11:46:28.000Z</published>
    <updated>2024-04-11T01:23:18.731Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>当我们在进行前端开发时，通常会与 localhost 进行交互，在我们执行<code>npm run</code>或者<code>yarn start</code>时，会启动一个本地服务器，在浏览器中打开时地址栏会显示<code>http://localhost:xxx/index.html</code> 的内容，那么他们两者间有什么区别呢？</p></blockquote><h1 id="什么是-localhost？"><a href="#什么是-localhost？" class="headerlink" title="什么是 localhost？"></a>什么是 localhost？</h1><p><code>localhost</code>是一个域名（除了好记以外，它和其它域名没有什么区别），它指向的是本地主机，也就是你的计算机。其使用范围仅限于本地，不会被路由器转发到外网，所以只能在本地访问。<br>比如：当A和B同时访问<code>localhost</code>，A访问的是自己的本地主机，B访问的是自己的本地主机，他们之间是没有任何关系的。</p><h1 id="如何通过域名访问到程序（应用）的？（DNS解析）"><a href="#如何通过域名访问到程序（应用）的？（DNS解析）" class="headerlink" title="如何通过域名访问到程序（应用）的？（DNS解析）"></a>如何通过域名访问到程序（应用）的？（DNS解析）</h1><blockquote><p>为了深入理解<code>localhost</code>，我们需要讨论下用户是如何通过域名访问到程序（应用）的。</p></blockquote><p>我们使用百度作为一个例子。</p><ol><li>用户在浏览器中输入<code>www.baidu.com</code>，浏览器会向DNS服务器请求解析域名<code>www.baidu.com</code>对应的IP地址。</li></ol><ul><li>为什么需要 IP 地址？打个比方，如果有人向你的公司寄送包裹，快递单上会包括公司地址、姓名和收件人等详细信息。投递过程依靠地址进行路由选择，最终到达收件人手中。同样，在网络中，域名就像公司名称，而 IP 地址就像物理地址。在网络世界中，IP 地址对于找到相应的程序至关重要。</li><li>DNS 就像一个公司目录，列出每个域名对应的 IP 地址。有些域名可能没有注册，因此无法找到其 IP 地址，而有些域名可能有多个 IP 地址，DNS 会根据某些规则自动返回其中一个。购买域名后，域名服务提供商通常会提供 DNS 解析服务，在 DNS 中注册域名及其对应的 IP 地址。</li><li>IP 地址从何而来？每台上网电脑都有一个 IP 地址，但个人电脑的 IP 地址一般不适合公开访问，就像公司的内部位置一样，内部人清楚但外人不清楚。对于像百度提供的外部服务，则需要一个公共 IP 地址，通常由互联网服务提供商提供。例如，如果贵公司使用中国联通上网，可以让他们为贵公司的网关服务器分配一个公共 IP 地址。网关服务器就像一个交换机，处理所有内部网络通信，并设置转发规则，将传入的请求路由到相应的服务器。</li></ul><ol start="2"><li>有了 IP 地址，浏览器就可以向该地址发送请求，由操作系统打包成一个 IP 数据包，然后通过网络传输。网络路由协议根据提供的 IP 地址，通过各种路由器，最终到达绑定到该 IP 的计算机。</li><li>一台计算机上可能部署了多个网络应用程序。哪个应用程序应该接收请求？这就是端口发挥作用的地方。每个网络应用程序都可以绑定到一个或多个端口，系统会防止端口重叠。在请求中指定一个端口，就能将其路由到正确的网络应用程序。</li></ol><h1 id="localhost-和-127-0-0-1-之间的区别是什么？"><a href="#localhost-和-127-0-0-1-之间的区别是什么？" class="headerlink" title="localhost 和 127.0.0.1 之间的区别是什么？"></a>localhost 和 127.0.0.1 之间的区别是什么？</h1><p>localhost 是一个域名，指向的是本地主机，也就是你的计算机。<br>127.0.0.1 是一个 IP 地址，指向的是本地主机，只能在计算机本身使用。你的电脑可以使用这个 IP 地址，而无需连接到互联网，这对于开发和测试网络程序非常方便。我们调试的程序就绑定在这个 IP 地址上。</p><p>值得注意的是，我们常见的 IP 地址格式为 X.X.X.X，用点分为四段。实际上，它是一个 32 位二进制数，分为四个 8 位段，然后转换成十进制数显示。</p><p>那么 localhost 如何解析为 127.0.0.1？是通过 DNS 吗？不需要。每台计算机都可以使用 localhost 和 127.0.0.1，无需 DNS 解析。</p><p><strong>这种解析由每台计算机单独处理。</strong>每台计算机上都有一个主机文件，其中包含一些硬编码的 DNS 解析规则，包括将 localhost 解析到 127.0.0.1 的规则，这是一种约定俗成的做法。</p><p>如果你不想使用 localhost，也没关系。你可以给它起任何名字，比如 kunhost，然后解析到 127.0.0.1。</p><p>你甚至可以使用 baidu.com，但这只能供你自己使用，不会影响其他人。</p><h1 id="域名的层次结构"><a href="#域名的层次结构" class="headerlink" title="域名的层次结构"></a>域名的层次结构</h1><p>域名是一个层次结构，从右到左，每一级域名都是下一级域名的父域名，大致分为顶级域 (TLD)、二级域名 (SLD) 和三级域名 (3LD)…。</p><ul><li><p>顶级域名 (TLD)：<strong>域名系统中的最高级别，位于域名的最右侧，通常由几个字母组成。</strong></p><ul><li>顶级域分为通用顶级域和国家代码顶级域。</li><li>通用顶级域包括代表商业企业的 .com、代表网络提供商的 .net 和代表非营利组织的 .org，而国家代码顶级域则代表特定的国家或地区，如代表中国的 .cn 和代表英国的 .uk。</li></ul></li><li><p>二级域名 (SLD)：<strong>由注册人选择和注册的低于顶级域的一个级别，可以是一个个性化和易记的名称。</strong></p><ul><li>例如，juejin.cn 就是一个二级域名，我们通常可以申请它。人们通常会忽略.com、.net 或.cn 等顶级域名的意义，而更注重简洁和易记。</li></ul></li><li><p>三级域名 (3LD)：<strong>位于二级域名之下，通常用于指向特定服务器或子网。</strong></p><ul><li>在 blog.example.com 中，”blog “就是三级域。”www “是最常见的三级域，代表网站的主页或主站点，但这只是一种约定俗成的说法，现在许多网站都建议通过二级域名直接访问。</li></ul></li></ul><p>根据这一定义，我们可以认为 localhost 是一个顶级域，是一个保留域，仅用于访问当前计算机。</p><h1 id="多个网站共享一个-IP-和端口"><a href="#多个网站共享一个-IP-和端口" class="headerlink" title="多个网站共享一个 IP 和端口"></a>多个网站共享一个 IP 和端口</h1><p>如前所述，不同的网络程序不能使用同一个端口，但有一些方法可以规避这一点。</p><p>早在个人博客流行的时候，很多人喜欢购买虚拟主机，部署一个开源博客平台来表达自己的观点。为了赚钱，虚拟主机提供商会在一台电脑上分配许多虚拟主机，让每个人都能使用默认的 80 端口顺利访问他们的域名。这怎么可能呢？</p><p>如果你有使用 Nginx、Apache 或 IIS 等网络服务器的经验，你可能会熟悉主机头的概念。主机标头本质上就是一个域名。通过设置主机标头，我们的程序可以共享一个网络端口。</p><p>在 Nginx 等网络服务器中部署网站时，我们会将其配置为在主机头中包含域名。</p><p>启动时，Nginx 和其他网络服务器会为自己申请 80 端口。</p><p>当网站请求到达 Nginx 的 80 端口时，它会根据请求中的域名识别相应主机标头配置的适当网络程序。</p><p>然后，Nginx将请求转发给该网络程序，必要时启动它。</p><h1 id="专用-IP-地址"><a href="#专用-IP-地址" class="headerlink" title="专用 IP 地址"></a>专用 IP 地址</h1><p>除 127.0.0.1 外，还有许多专用 IP 地址，如常见的 192.168.x.x。这些专用 IP 地址大多保留给局域网（LAN）使用，因为为每台计算机分配一个唯一的 IP 地址是不可行的。只要局域网内没有冲突，这些地址就可以自由使用。你的公司可以使用 192.168.1.1，我的公司也可以使用 192.168.1.1，但如果你想访问我的公司，就需要通过公共 IP 地址。</p><p>常用的 IPv4 专用 IP 地址范围分为三类：</p><ul><li>A 类：从 <code>10.0.0.0</code> 到 <code>10.255.255.255</code></li><li>B 类：从 <code>172.16.0.0</code> 到 <code>172.31.255.255</code></li><li>C 类：从 <code>192.168.0.0</code> 到 <code>192.168.255.255</code>。</li></ul><p>这些专用 IP 地址仅供内部网络使用，不能在公共互联网上使用。</p><p>除了上述三个私有 IPv4 地址范围外，还有一些保留的 IPv4 地址范围：</p><ul><li><code>127.0.0.0</code> 至 <code>127.255.255.255</code> 地址范围用于环回测试，其中包括问题中提到的 <code>127.0.0.1</code> 地址。您也可以为自己分配一个与 <code>127.0.0.1</code> 功能相同的 IP 地址，如 <code>127.0.0.2</code>。</li><li><code>169.254.0.0</code> 至 <code>169.254.255.255</code> 地址范围用于本地网络。这种情况比较少见；如果你的电脑无法连接到局域网，你可能会看到这个临时分配为局域网地址的 IP 地址。<br>这些地址范围也不能在公共互联网上使用。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;当我们在进行前端开发时，通常会与 localhost 进行交互，在我们执行&lt;code&gt;npm run&lt;/code&gt;或者&lt;code&gt;yarn start&lt;/code&gt;时，会启动一个本地服务器，在浏览器中打开时地址栏会显示&lt;code&gt;http://lo</summary>
      
    
    
    
    
    <category term="网络" scheme="http://example.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="localhost" scheme="http://example.com/tags/localhost/"/>
    
  </entry>
  
  <entry>
    <title>CSS Container Queries(容器查询)</title>
    <link href="http://example.com/2023/12/01/css-container-queries/"/>
    <id>http://example.com/2023/12/01/css-container-queries/</id>
    <published>2023-12-01T07:33:17.000Z</published>
    <updated>2023-12-01T12:55:49.329Z</updated>
    
    <content type="html"><![CDATA[<h1 id="提出问题"><a href="#提出问题" class="headerlink" title="提出问题"></a>提出问题</h1><p>我们看一个如下图的新闻提要布局示例。新闻提要是一个文章的集合，每篇文章都有图像、标题和文本摘要三部分。页面右侧还有一个侧边栏，列出了热门文章。如果此时需要将整个页面进行划分你会如何去划分呢？</p><img src="/.com//12/01/css-container-queries/page.jpg" class title="# page"><ul><li><strong>我们可以将其分为两个大的网格：左侧为 4 列网格，右侧为单列（侧边栏）。</strong><ul><li>左边：一篇横跨四栏的大型专题文章。</li><li>下面：两篇文章，各占两栏。它们具有水平布局，图像位于左侧，文本位于右侧。</li><li>下面：四篇较小的文章，每篇文章跨越一栏。右侧也会出现一栏相同风格的文章作为侧边栏。</li></ul></li></ul><img src="/.com//12/01/css-container-queries/grid.jpg" class title="# grid"><p>我们可能会在这个布局中看到三种不同风格的文章，它们都将作为独立的组件进行开发。现在让我们看看较小视窗上（手机端）的设计会发生什么。</p><img src="/.com//12/01/css-container-queries/mobile.jpg" class title="# mobile"><p>在手机尺寸下，<strong>所有文章（包括特写文章）的图片都堆叠在文字上方。它们的布局没有区别</strong>。尺寸稍大时，文章采用水平布局。在更大的视窗（可以认为是近似平板电脑大小的视窗）上，特写文章下有两篇横向文章，下面有四篇堆叠的文章。单篇文章总共有三种不同的布局。</p><p>如果使用媒体查询来查询视窗的大小，我们可能需要创建单独的组件来处理不同断点的不同文章布局的行为。我们的代码很容易变得有点笨重，而且难以维护。</p><h2 id="将内容装进可用的空间中"><a href="#将内容装进可用的空间中" class="headerlink" title="将内容装进可用的空间中"></a>将内容装进可用的空间中</h2><ul><li>想象一下，如果此时需求发生变化，需要一个单独的区域来放一些东西。我们的 5 列布局在可用空间中看起来不再美观，必须重新设计。在这种情况下，我们可以改变布局垂直堆叠一些文章，如下图。</li></ul><img src="/.com//12/01/css-container-queries/page2.jpg" class title="# page2"><ul><li>如果我们使用媒体查询来检测视口宽度，我们的布局就无法响应可用空间的变化。此时就在想如果我们能查询父元素或容器的宽度，该多好啊。。。</li></ul><h1 id="什么是容器查询？"><a href="#什么是容器查询？" class="headerlink" title="什么是容器查询？"></a>什么是容器查询？</h1><ul><li>容器查询：<strong>允许我们查询元素的大小（而不是视窗），并据此调整其后代的样式。</strong>我们可以以类似于媒体查询的方式使用它们，但它们在布局方面为我们提供了更大的灵活性，并有可能大大简化我们的代码。</li><li>让我们以单个文章组件为例。我们将使用容器查询构建响应式文章组件布局。</li></ul><img src="/.com//12/01/css-container-queries/article.jpg" class title="# article"><h2 id="1-定义容器"><a href="#1-定义容器" class="headerlink" title="1. 定义容器"></a>1. 定义容器</h2><img src="/.com//12/01/css-container-queries/code1.jpg" class title="# code1"><ul><li>废话不多说先来定义一个容器，如下代码：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;grid&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;article-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">article</span>&gt;</span>...<span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;article-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">article</span>&gt;</span>...<span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;article-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">article</span>&gt;</span>...<span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>由于整体内容是一个文章列表，因此每篇文章的容器元素将是 <code>&lt;li&gt;</code>。为了避免混淆，我们将给它一个 <code>article-container</code> 类。</li></ul><h2 id="2-定义容器的样式"><a href="#2-定义容器的样式" class="headerlink" title="2. 定义容器的样式"></a>2. 定义容器的样式</h2><ul><li>有了容器后，就应该为其附加样式了，如下代码：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.article-container</span> &#123;</span><br><span class="line">  container-name: article;</span><br><span class="line">  container-type: inline-size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>我们使用两个 CSS 属性来创建容器：容器名称（container-name）和容器类型（container-type）。<ul><li>container-name：可选的，但如果页面上有多个容器，它就会非常有用，因为它可以让我们明确知道我们所指的是哪个容器。</li><li>container-type：对于基于大小的容器查询，容器类型是 <code>inline-size</code>。<ul><li><code>inline-size</code> 是一个逻辑值，因此它指的是使用水平书写模式（默认）时的宽度，或者垂直书写模式时的高度。</li><li><code>size</code> 是另一个可选的值，但它指的是 CSS 包含模块。</li></ul></li></ul></li></ul><blockquote><p><strong>简写：</strong><code>container: article / inline-size;</code></p></blockquote><h2 id="3-查询容器"><a href="#3-查询容器" class="headerlink" title="3. 查询容器"></a>3. 查询容器</h2><ul><li>一旦定义好了容器，编写容器查询就类似于编写媒体查询。在编写查询时，我们可以选择指定名称容器，也可以省略它，在这种情况下，查询将默认使用最接近的容器。</li><li>如果我们还没有定义容器，那么容器查询的行为将很像媒体查询——将查询视窗大小。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 没有指定名称容器 */</span></span><br><span class="line"><span class="keyword">@container</span> (<span class="attribute">width</span> &gt; <span class="number">700px</span>) &#123;</span><br><span class="line">  <span class="comment">/* 当容器宽度超过 700px 时，应用于任何容器内元素的样式  */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 具体到指定名称的容器 */</span></span><br><span class="line"><span class="keyword">@container</span> article (<span class="attribute">width</span> &gt; <span class="number">700px</span>) &#123;</span><br><span class="line">  <span class="comment">/* 当容器宽度超过 700px 时，应用于 &quot;文章 &quot;容器内元素的样式  */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;提出问题&quot;&gt;&lt;a href=&quot;#提出问题&quot; class=&quot;headerlink&quot; title=&quot;提出问题&quot;&gt;&lt;/a&gt;提出问题&lt;/h1&gt;&lt;p&gt;我们看一个如下图的新闻提要布局示例。新闻提要是一个文章的集合，每篇文章都有图像、标题和文本摘要三部分。页面右侧还有一个侧边栏</summary>
      
    
    
    
    <category term="CSS" scheme="http://example.com/categories/CSS/"/>
    
    
    <category term="CSS 学习" scheme="http://example.com/tags/CSS-%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>less 学习笔记</title>
    <link href="http://example.com/2023/11/24/less-1/"/>
    <id>http://example.com/2023/11/24/less-1/</id>
    <published>2023-11-24T07:34:03.000Z</published>
    <updated>2023-11-24T11:48:04.242Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><ul><li><code>LESS</code> 是一个<code>CSS</code>预处理器，可为网站提供可定制、可管理和可重用的样式表。</li></ul><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><ul><li>使用<code>@</code>定义一个变量，变量可以被复用。</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// less</span></span><br><span class="line"><span class="variable">@height:</span> <span class="number">100px</span>;</span><br><span class="line"><span class="variable">@width:</span> <span class="number">200px</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="variable">@height</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="variable">@width</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//css</span></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="混入"><a href="#混入" class="headerlink" title="混入"></a>混入</h1><ul><li>混入是一种将一组属性从一个规则集中包含（”混合进入”）到另一个规则集中的方法。</li><li>例如现在有这样一个场景：现在有两个容器，除了背景色以外其余属性均相同</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//less</span></span><br><span class="line"><span class="selector-class">.commonContainer</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1.5px</span> solid black;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.leftContainer</span>&#123;</span><br><span class="line">  <span class="attribute">background-color</span>: antiquewhite;</span><br><span class="line">  <span class="selector-class">.commonContainer</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.rightContainer</span>&#123;</span><br><span class="line">  <span class="attribute">background-color</span>: aquamarine;</span><br><span class="line">  <span class="selector-class">.commonContainer</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// css</span></span><br><span class="line"><span class="selector-class">.commonContainer</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1.5px</span> solid black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.leftContainer</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: antiquewhite;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1.5px</span> solid black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.rightContainer</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: aquamarine;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1.5px</span> solid black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="嵌套规则"><a href="#嵌套规则" class="headerlink" title="嵌套规则"></a>嵌套规则</h1><ul><li>可以直接使用选择器进行嵌套</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// less</span></span><br><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.first-child</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.second-child</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: blue;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// css</span></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.first-child</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: red</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.second-child</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: blue</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="嵌套的-规则和冒泡"><a href="#嵌套的-规则和冒泡" class="headerlink" title="嵌套的 @ 规则和冒泡"></a>嵌套的 @ 规则和冒泡</h1><ul><li>诸如 <code>@media</code> 或 <code>@supports</code> 之类的 @ 规则可以以与选择器相同的方式嵌套。</li><li>@ 规则放在最前面，与同一规则集中其他元素的相对顺序保持不变。这称为冒泡。</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// less</span></span><br><span class="line"><span class="selector-class">.component</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">    <span class="keyword">@media</span>  (<span class="attribute">min-resolution</span>: <span class="number">192dpi</span>) &#123;</span><br><span class="line">      <span class="attribute">background-image</span>: url(<span class="string">/img/retina2x.png</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">1280px</span>) &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// css</span></span><br><span class="line"><span class="selector-class">.component</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.component</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">768px</span>) <span class="keyword">and</span> (<span class="attribute">min-resolution</span>: <span class="number">192dpi</span>) &#123;</span><br><span class="line">  <span class="selector-class">.component</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: url(<span class="string">/img/retina2x.png</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">1280px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.component</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h1><ul><li>算术运算 <code>+</code>、<code>-</code>、<code>*</code>、<code>/</code> 可以对任何数字、颜色或变量进行运算。</li><li><strong>在计算时如果有单位，会优先考虑单位然后将数值进行转换然后进行计算。</strong></li><li>除法需要在括号中使用。</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// numbers are converted into the same units</span></span><br><span class="line"><span class="variable">@conversion-1:</span> <span class="number">5cm</span> + <span class="number">10mm</span>; <span class="comment">// result is 6cm</span></span><br><span class="line"><span class="variable">@conversion-2:</span> <span class="number">2</span> - <span class="number">3cm</span> - <span class="number">5mm</span>; <span class="comment">// result is -1.5cm</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// conversion is impossible</span></span><br><span class="line"><span class="variable">@incompatible-units:</span> <span class="number">2</span> + <span class="number">5px</span> - <span class="number">3cm</span>; <span class="comment">// result is 4px</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// example with variables</span></span><br><span class="line"><span class="variable">@base:</span> <span class="number">5%</span>;</span><br><span class="line"><span class="variable">@filler:</span> <span class="variable">@base</span> * <span class="number">2</span>; <span class="comment">// result is 10%</span></span><br><span class="line"><span class="variable">@other:</span> <span class="variable">@base</span> + <span class="variable">@filler</span>; <span class="comment">// result is 15%</span></span><br></pre></td></tr></table></figure><h2 id="calc-异常"><a href="#calc-异常" class="headerlink" title="calc() 异常"></a>calc() 异常</h2><ul><li>为了 CSS 兼容性，<code>calc()</code>不计算数学表达式，但会计算嵌套函数中的变量和数学。</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@var:</span> <span class="number">50vh</span>/<span class="number">2</span>;</span><br><span class="line"><span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">50%</span> + (<span class="variable">@var</span> - <span class="number">20px</span>)); <span class="comment">// result is calc(50% + (25vh - 20px))</span></span><br></pre></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><ul><li><code>less</code> 有许多内置函数，可以转换颜色、操作字符串和进行数学运算。</li><li><a href="https://lesscss.cn/functions/">函数参考手册</a></li><li>使用它们非常简单。以下示例使用百分比将 <code>0.5</code> 转换为 <code>50%</code>，将基色的饱和度增加 <code>5%</code>，然后将背景颜色设置为亮 <code>25%</code> 并旋转 <code>8</code> 度的颜色：</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@base:</span> <span class="number">#f04615</span>;</span><br><span class="line"><span class="variable">@width:</span> <span class="number">0.5</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.class</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="built_in">percentage</span>(<span class="variable">@width</span>); <span class="comment">// returns `50%`</span></span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">saturate</span>(<span class="variable">@base</span>, <span class="number">5%</span>);</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">spin</span>(<span class="built_in">lighten</span>(<span class="variable">@base</span>, <span class="number">25%</span>), <span class="number">8</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="命名空间和访问器"><a href="#命名空间和访问器" class="headerlink" title="命名空间和访问器"></a>命名空间和访问器</h1><ul><li>有时，出于组织目的或只是为了提供一些封装，你可能希望对混入进行分组。 你可以在 Less 中非常直观地做到这一点。</li><li>假设你想在 <code>#bundle</code> 下打包一些混入和变量，以供以后重用或分发：</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#bundle</span>() &#123;</span><br><span class="line">  <span class="selector-class">.button</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="attribute">background-color</span>: grey;</span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">      <span class="attribute">background-color</span>: white;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.tab</span> &#123; ... &#125;</span><br><span class="line">  <span class="selector-class">.citation</span> &#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>现在如果我们想在我们的 <code>#header a</code> 中混合 <code>.button</code> 类，我们可以这样做：</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#header</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: orange;</span><br><span class="line">  <span class="selector-id">#bundle</span><span class="selector-class">.button</span>();  <span class="comment">// can also be written as #bundle &gt; .button</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>注意： 如果你不希望它出现在你的 <code>CSS</code> 输出中（即 <code>#bundle .tab</code>），请将 <code>()</code> 附加到你的命名空间（例如 <code>#bundle()</code>）。</li></ul><h1 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h1><ul><li>从 <code>Less 3.5</code> 开始，还可以使用混入和规则集作为值映射。</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// less</span></span><br><span class="line"><span class="selector-id">#colors</span>() &#123;</span><br><span class="line">  primary: blue;</span><br><span class="line">  secondary: green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.button</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: #colors[primary];</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid #colors[secondary];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// css</span></span><br><span class="line"><span class="selector-class">.button</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h1><ul><li><code>Less</code> 中的作用域与 <code>CSS</code> 中的作用域非常相似。 首先在本地查找变量和混入，如果找不到，则从 “父级” 作用域继承。</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@var:</span> red;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#page</span> &#123;</span><br><span class="line">  <span class="variable">@var:</span> white;</span><br><span class="line">  <span class="selector-id">#header</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">@var</span>; <span class="comment">// white</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>与 <code>CSS</code> 自定义属性一样，混入和变量定义不必放在引用它们的行之前。 所以下面的 <code>Less</code> 代码与前面的例子是一样的：</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@var:</span> red;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#page</span> &#123;</span><br><span class="line">  <span class="selector-id">#header</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">@var</span>; <span class="comment">// white</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable">@var:</span> white;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><ul><li>块式注释和行内注释都可以使用：</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* One heck of a block</span></span><br><span class="line"><span class="comment"> * style comment! */</span></span><br><span class="line"><span class="variable">@var:</span> red;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get in line!</span></span><br><span class="line"><span class="variable">@var:</span> white;</span><br></pre></td></tr></table></figure><h1 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h1><ul><li>导入工作与预期的差不多。你可以导入一个 <code>.less</code> 文件，其中的所有变量都将可用。可选地为 <code>.less</code> 文件指定扩展名。</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&quot;library&quot;</span>; <span class="comment">// library.less</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;typo.css&quot;</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;LESS&lt;/code&gt; 是一个&lt;code&gt;CSS&lt;/code&gt;预处理器，可为网站提供可定制、可管理和可重用的样式表。</summary>
      
    
    
    
    <category term="CSS" scheme="http://example.com/categories/CSS/"/>
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="LESS" scheme="http://example.com/categories/LESS/"/>
    
    
    <category term="less 学习笔记" scheme="http://example.com/tags/less-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Cookies 详解</title>
    <link href="http://example.com/2023/11/10/cookie/"/>
    <id>http://example.com/2023/11/10/cookie/</id>
    <published>2023-11-10T02:13:51.000Z</published>
    <updated>2023-11-10T06:44:00.097Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、Cookies-是怎么来的？"><a href="#一、Cookies-是怎么来的？" class="headerlink" title="一、Cookies 是怎么来的？"></a>一、Cookies 是怎么来的？</h1><blockquote><p>90 年代初期，Netscape 的开发人员 Lou Montoulli 遇到了一个问题 —— 他正在为另一家公司 MCI 开发一个在线商店，该商店会在服务器中存储每个客户购物车中的商品。这意味着人们必须首先创建一个帐户，创建账户需要花费一些时间，存储每个用户购物车的内容也会占用大量存储空间。<br>MCI 要求将这些数据存储在客户自己的计算机上。他们还希望客户在没有登录时也能添加商品到购物车。<br>为了解决这个问题，Lou 提出了一个在程序员中已经广为人知的想法：魔力 cookie。</p></blockquote><p>因此，使用cookie最初的想法是：</p><ul><li>可以在客户端和服务器之间传递少量数据。</li><li>通常在cookie中村的数据是随机密钥或令牌，只对使用它的软件才有意义。</li></ul><h1 id="二、Cookies-是怎么工作的？"><a href="#二、Cookies-是怎么工作的？" class="headerlink" title="二、Cookies 是怎么工作的？"></a>二、Cookies 是怎么工作的？</h1><h2 id="Cookies-是由谁创建的"><a href="#Cookies-是由谁创建的" class="headerlink" title="Cookies 是由谁创建的"></a>Cookies 是由谁创建的</h2><ul><li>虽然浏览器提供了 <code>document.cookie</code> 来创建（前端），但大部分时间主要是由 <code>backend</code> 在生成 <code>response</code> 的时候，设置需要让客户端记住的 <code>cookie</code>，并发送到 <code>client</code>（后端）。</li><li>当我们说 <code>backend</code> 的时候，可能指的有两种情况：<ul><li>由 <code>application</code> 本身设置的 <code>cookie</code>（<code>Python，JavaScript，PHP，Java</code>等）</li><li>由 <code>webserver</code> 或其他反向代理设置的 <code>cookie</code>（如: <code>Nginx，Apache</code>）</li></ul></li><li>通过 <code>HTTP Response</code> 的 <code>headers</code> 里的 <code>Set-Cookie</code> 字段，可设置某个 <code>cookie</code> 的键值对，并带上跟这个 <code>cookie</code> 有关的一定的参数。</li></ul><h2 id="Cookies-的限制"><a href="#Cookies-的限制" class="headerlink" title="Cookies 的限制"></a>Cookies 的限制</h2><h3 id="数据存储的限制"><a href="#数据存储的限制" class="headerlink" title="数据存储的限制"></a>数据存储的限制</h3><table><thead><tr><th></th><th>Cookies</th><th>LocalStorage</th><th>SessionStorage</th></tr></thead><tbody><tr><td>容量</td><td>4KB</td><td>10MB</td><td>5MB</td></tr><tr><td>可访问</td><td>任何窗口</td><td>任何窗口</td><td>相同标签页</td></tr><tr><td>过期</td><td>手动设置</td><td>永不过期</td><td>标签页被关闭</td></tr><tr><td>存储位置</td><td>浏览器和服务端</td><td>浏览器</td><td>浏览器</td></tr><tr><td>通过请求发送</td><td>是</td><td>否</td><td>否</td></tr></tbody></table><h3 id="作用域的限制"><a href="#作用域的限制" class="headerlink" title="作用域的限制"></a>作用域的限制</h3><ol><li>域（Domain）：出于安全的原因，浏览器<strong>仅允许cookie在一个域名</strong>中可见。</li></ol><ul><li>域的作用范围：允许在<strong>该域名及其子域名内</strong>起作用。</li></ul><ol start="2"><li>路径（Path）：默认为 <code>/</code></li></ol><blockquote><p><strong>⚠️注意</strong>：cookie时随着浏览器中的请求一起发送的，不管你是否愿意不该有的想法：通过javascript脚本，从cookie里面将内容读出来，然后塞到AJAX请求的headers里面发送出去。</p></blockquote><h3 id="过期时间"><a href="#过期时间" class="headerlink" title="过期时间"></a>过期时间</h3><ul><li><code>max-age</code>: 用于控制 <code>Cookie</code> 的存活时间，以秒为单位。<ul><li>如果 <code>max-age</code> 未设置，则 <code>Cookie</code> 将在浏览器关闭时过期。</li><li>如果 <code>max-age</code> 和 <code>expires</code> 两者同时出现，那么以 <code>max-age</code> 为准；一般来说，两者应该设为同一个时间<br>值。</li></ul></li><li><code>expires</code>: 指定 <code>Cookie</code> 的过期时间，以 <code>UTC</code> 格式的日期字符串为值。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-Cookie: myfirstcookie=somecookievalue; expires=Tue, 09 Jun 2020 15:46:52 GMT; Max-Age=1209600</span><br></pre></td></tr></table></figure><h3 id="访问控制（Secure-HttpOnly-SameSite）"><a href="#访问控制（Secure-HttpOnly-SameSite）" class="headerlink" title="访问控制（Secure, HttpOnly, SameSite）"></a>访问控制（Secure, HttpOnly, SameSite）</h3><h4 id="用于-HTTPS-访问控制的-Secure-HttpOnly"><a href="#用于-HTTPS-访问控制的-Secure-HttpOnly" class="headerlink" title="用于 HTTPS 访问控制的 Secure, HttpOnly"></a>用于 <code>HTTPS</code> 访问控制的 <code>Secure, HttpOnly</code></h4><ul><li>为确保 <code>Cookie</code> 只能通过安全的 <code>HTTPS</code> 连接访问，并且不能被 <code>JavaScript</code> 等客户端脚本访问，我们可以设置这两个属性：<ul><li><code>Secure</code> 只能通过 <code>HTTPS</code> 链接发送。</li><li><code>HttpOnly</code> 只能由服务器访问，不能由浏览器的 <code>Document.cookie</code> API访问。</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-Cookie: &quot;id=3db4adj3d; Secure; HttpOnly&quot;</span><br></pre></td></tr></table></figure><h4 id="用于跨站场景的-SameSite"><a href="#用于跨站场景的-SameSite" class="headerlink" title="用于跨站场景的 SameSite"></a>用于跨站场景的 SameSite</h4><p>我们目前的网站中，会出现大量的跨站访问请求（如CDN、Analytics、第三方服务等）。当访问站点A的时候，可能会到站点B、C请求内容，当B、C想设置自己的 <code>Cookie</code> 的时候，对A站点的整个会话过程来说，就出现了第三方（third-party）<code>Cookie</code>的存储请求。 <code>SameSite</code> 是新提出的一个致力于改进 <code>Cookie</code> 安全，防止 <code>CSRF攻击</code> 以及隐私泄漏的浏览器<code>Cookie</code>特性。</p><ul><li><p>跨站场景案例</p><ul><li>用户访问 <a href="https://www.a-example.dev/">https://www.a-example.dev</a></li><li>用户点击按钮发起了一个跨站的请求：<a href="https://api.b-example.dev/">https://api.b-example.dev</a></li><li><a href="https://api.b-example.dev/">https://api.b-example.dev</a> 设置了一个 Cookie Domain=api.b-example.dev</li><li>现在 <a href="https://www.a-example.dev/">https://www.a-example.dev</a> 页面得到了一个来自 <a href="https://api.b-example.dev/">https://api.b-example.dev</a> 的第三方cookie的设置请求</li></ul></li><li><p>通过设置<code>SameSite</code>属性，可以限制<code>Cookie</code>在跨站场景下的cookie存储和发送策略：</p><ul><li><code>SameSite</code> 属有三个值<ul><li><strong>Strict</strong><ul><li>浏览器将会拒绝存储第三方<code>Cookie</code>。意味着我方应用只能在本站访问时设置<code>Cookie</code>，不能作为第三方给其他站点提供访问。</li></ul></li><li><strong>Lax（默认）</strong><ul><li>无论是第一方还是第三方的<code>Cookie</code>，浏览器在<code>Cookie</code>缺少<code>SameSite</code>属性时，都会默认设置为此模式。</li><li>在此模式下，针对<code>Safe HTTP Methods</code>（安全的HTTP请求，GET/HEAD/OPTIONS/TRACE）可以向第三方发送该<code>Cookie</code>，但POST请求就不会。</li></ul></li><li><strong>None</strong><ul><li>如果我方是向第三方提供内嵌（<code>iframe</code>）应用的，比如WPS编辑器。需要将我方的<code>Cookie</code>设置为 <code>SameSite=None</code>;<code>Secure</code>，否则浏览器在第三方中访问我方应用时，会拒绝存我方的<code>Cookie</code>。</li></ul></li></ul></li></ul></li></ul><table><thead><tr><th align="center">VALUE</th><th align="center">INCOMING COOKIE</th><th align="center">OUTGOING COOKIE</th></tr></thead><tbody><tr><td align="center">Strict</td><td align="center">Reject</td><td align="center">-</td></tr><tr><td align="center">Lax</td><td align="center">Accept</td><td align="center">Send with safe HTTP methods</td></tr><tr><td align="center">None + Secure</td><td align="center">Accept</td><td align="center">Send</td></tr></tbody></table><h4 id="CORS-场景"><a href="#CORS-场景" class="headerlink" title="CORS 场景"></a>CORS 场景</h4><p>在<code>CORS（Cross-Origin Resource Sharing）</code>跨源资源共享中，浏览器默认情况下不会发送包含<code>Cookie</code>的跨域请求，这是为了防止<code>跨站点请求伪造（CSRF）</code>攻击。<br>要让CORS请求带上<code>Cookie</code>，则需要以下步骤：</p><ul><li>访问第一方页面的时候，服务端返回这两个响应头<ul><li><code>Access-Control-Allow-Origin</code></li><li><code>Access-Control-Allow-Credentials</code></li></ul></li><li><code>fetch()</code> 加上 <code>credentials: &quot;include&quot;</code> 参数</li></ul><h1 id="Cookies-的常见使用场景"><a href="#Cookies-的常见使用场景" class="headerlink" title="Cookies 的常见使用场景"></a>Cookies 的常见使用场景</h1><h2 id="会话跟踪"><a href="#会话跟踪" class="headerlink" title="会话跟踪"></a>会话跟踪</h2><ul><li>当你向网站发出登录请求时，服务器检查你的用户名和密码，创建并存储会话，生成唯一的会话ID，然后发送回带有该会话ID的cookie</li><li>当你向网站发出其他请求时，浏览器将带有会话ID的<code>cookie</code>发送回服务器。</li><li>服务器使用你的会话ID检查会话，如果是已登录并有权访问数据的时候，返回请求的数据</li><li>当你要离开网站时，将带有会话ID连同注销请求发送到服务端，服务端删除会话，并告知浏览器删除去相应session id的cookie</li></ul><p>一个典型的session cookie会类似这样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-Cookie: sessionid=sty1z3kz1am3xdjv348mqwlx4ginpt6c; expires=Tue, 09 Jun 2020 15:46:52 GMT; HttpOnly; Max-Age=1209600; Path=/; SameSite=Lax</span><br></pre></td></tr></table></figure><h2 id="单点登录"><a href="#单点登录" class="headerlink" title="单点登录"></a>单点登录</h2><h2 id="内嵌页面"><a href="#内嵌页面" class="headerlink" title="内嵌页面"></a>内嵌页面</h2><h1 id="常见安全问题"><a href="#常见安全问题" class="headerlink" title="常见安全问题"></a>常见安全问题</h1><h2 id="中间人攻击（MitM）"><a href="#中间人攻击（MitM）" class="headerlink" title="中间人攻击（MitM）"></a>中间人攻击（MitM）</h2><img src="/.com//11/10/cookie/mitm.png" class title="# mitm"><h2 id="跨站点脚本攻击（XSS）"><a href="#跨站点脚本攻击（XSS）" class="headerlink" title="跨站点脚本攻击（XSS）"></a>跨站点脚本攻击（XSS）</h2><img src="/.com//11/10/cookie/xss.png" class title="# xss"><h2 id="跨站点请求伪造攻击（CSRF）"><a href="#跨站点请求伪造攻击（CSRF）" class="headerlink" title="跨站点请求伪造攻击（CSRF）"></a>跨站点请求伪造攻击（CSRF）</h2><img src="/.com//11/10/cookie/csrf.png" class title="# csrf">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、Cookies-是怎么来的？&quot;&gt;&lt;a href=&quot;#一、Cookies-是怎么来的？&quot; class=&quot;headerlink&quot; title=&quot;一、Cookies 是怎么来的？&quot;&gt;&lt;/a&gt;一、Cookies 是怎么来的？&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;9</summary>
      
    
    
    
    <category term="前端学习笔记" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Cookies" scheme="http://example.com/categories/Cookies/"/>
    
    
    <category term="浏览器相关" scheme="http://example.com/tags/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title>style-component 学习笔记（一）介绍</title>
    <link href="http://example.com/2023/11/09/style-component-1/"/>
    <id>http://example.com/2023/11/09/style-component-1/</id>
    <published>2023-11-09T11:12:50.000Z</published>
    <updated>2023-11-09T11:22:04.078Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install styled-components</span><br><span class="line"></span><br><span class="line">yarn add styled-components</span><br></pre></td></tr></table></figure><h1 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h1><ul><li>自动关键 CSS：styled-components 会跟踪页面上呈现的组件，并完全自动地注入它们的样式，而不会注入其他样式。</li><li>没有类名错误：styled-components 会为你的样式生成唯一的类名。</li><li>更容易删除 CSS：要知道代码库中的某个类名是否被使用可能很难。styled-components 可以让这一点一目了然，因为每一个样式都与特定的组件绑定。如果组件未被使用（工具可以检测到）并被删除，其所有样式也会随之删除。</li><li>简单的动态样式：根据组件的道具或全局主题调整组件样式简单直观，无需手动管理数十个类。</li><li>无忧维护：你无需在不同的文件中寻找影响组件的样式，因此无论你的代码库有多大，维护都是小菜一碟。</li><li>自动供应商前缀：根据当前标准编写 CSS，其余的交给样式化组件处理。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h1&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;s</summary>
      
    
    
    
    <category term="style-component" scheme="http://example.com/categories/style-component/"/>
    
    
    <category term="style-component" scheme="http://example.com/tags/style-component/"/>
    
    <category term="css-in-js" scheme="http://example.com/tags/css-in-js/"/>
    
  </entry>
  
  <entry>
    <title>SVG 学习笔记（四）样式相关</title>
    <link href="http://example.com/2023/11/09/svg-4/"/>
    <id>http://example.com/2023/11/09/svg-4/</id>
    <published>2023-11-09T07:27:53.000Z</published>
    <updated>2023-11-09T07:30:53.211Z</updated>
    
    <content type="html"><![CDATA[<h1 id="着色"><a href="#着色" class="headerlink" title="着色"></a>着色</h1><ul><li>stroke：线条颜色</li><li>stroke-width：线条宽度</li><li>stroke-opacity：瞄边透明度</li><li>fill：区域填充色</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;着色&quot;&gt;&lt;a href=&quot;#着色&quot; class=&quot;headerlink&quot; title=&quot;着色&quot;&gt;&lt;/a&gt;着色&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;stroke：线条颜色&lt;/li&gt;
&lt;li&gt;stroke-width：线条宽度&lt;/li&gt;
&lt;li&gt;stroke-opacity：瞄</summary>
      
    
    
    
    <category term="前端学习笔记" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="SVG 学习" scheme="http://example.com/tags/SVG-%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>SVG 学习笔记（三）基础形状</title>
    <link href="http://example.com/2023/11/08/svg-3/"/>
    <id>http://example.com/2023/11/08/svg-3/</id>
    <published>2023-11-08T12:50:11.000Z</published>
    <updated>2023-11-09T07:27:49.418Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--椭圆--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> <span class="attr">height</span>=<span class="string">&quot;250&quot;</span> <span class="attr">version</span>=<span class="string">&quot;1.1&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--矩形  起始位置坐标    设置圆角的半径           宽高              线条颜色          填充色              线条宽度     --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">&quot;60&quot;</span> <span class="attr">y</span>=<span class="string">&quot;10&quot;</span> <span class="attr">rx</span>=<span class="string">&quot;10&quot;</span> <span class="attr">ry</span>=<span class="string">&quot;10&quot;</span> <span class="attr">width</span>=<span class="string">&quot;30&quot;</span> <span class="attr">height</span>=<span class="string">&quot;30&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;black&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;transparent&quot;</span> <span class="attr">stroke-width</span>=<span class="string">&quot;5&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--圆          圆心坐标      半径     线条颜色         填充色             线条宽度    --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">&quot;25&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;75&quot;</span> <span class="attr">r</span>=<span class="string">&quot;20&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;red&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;transparent&quot;</span> <span class="attr">stroke-width</span>=<span class="string">&quot;5&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--椭圆        圆心坐标      x半径   y半径     线条颜色          填充色            线条宽度    --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ellipse</span> <span class="attr">cx</span>=<span class="string">&quot;75&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;75&quot;</span> <span class="attr">rx</span>=<span class="string">&quot;20&quot;</span> <span class="attr">ry</span>=<span class="string">&quot;5&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;red&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;transparent&quot;</span> <span class="attr">stroke-width</span>=<span class="string">&quot;5&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--直线    起始点坐标         结束位置坐标       线条颜色           线条宽度   --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">line</span> <span class="attr">x1</span>=<span class="string">&quot;10&quot;</span> <span class="attr">x2</span>=<span class="string">&quot;50&quot;</span> <span class="attr">y1</span>=<span class="string">&quot;110&quot;</span> <span class="attr">y2</span>=<span class="string">&quot;150&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;orange&quot;</span> <span class="attr">stroke-width</span>=<span class="string">&quot;5&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--折线  点集  线条颜色  填充色  线条宽度--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">polyline</span> <span class="attr">points</span>=<span class="string">&quot;60, 110 65, 120 70, 115 75, 130 80, 125 85, 140 90, 135 95, 150 100, 145&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">stroke</span>=<span class="string">&quot;orange&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;transparent&quot;</span> <span class="attr">stroke-width</span>=<span class="string">&quot;5&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--多边形  点集  线条颜色 填充色  线条宽度--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">polygon</span> <span class="attr">points</span>=<span class="string">&quot;50, 160 55, 180 70, 180 60, 190 65, 205 50, 195 35, 205 40, 190 30, 180 45, 180&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">stroke</span>=<span class="string">&quot;green&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;transparent&quot;</span> <span class="attr">stroke-width</span>=<span class="string">&quot;5&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--路径 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M20,230 Q40,205 50,230 T90,230&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;blue&quot;</span> <span class="attr">stroke-width</span>=<span class="string">&quot;5&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h1><ul><li>路径除了基础属性<code>fill、stroke、stroke-width</code>等以外其最为重要的就是<code>d</code></li></ul><table><thead><tr><th>用处</th><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>起始位置</td><td><code>M(x, y)</code></td><td>开始位置坐标</td></tr><tr><td>直线</td><td><code>L(x, y)</code></td><td>当前位置绘制直线到(x, y)</td></tr><tr><td>水平直线</td><td><code>H(x)</code></td><td>当前位置绘制水平直线至x</td></tr><tr><td>垂直直线</td><td><code>V(y)</code></td><td>当前位置绘制垂直直线至y</td></tr><tr><td>闭合</td><td><code>Z</code></td><td>闭合开始结束位置</td></tr><tr><td>三次贝塞尔曲线</td><td><code>C x1 y1, x2 y2, x y</code></td><td>控制点1(x1 y1) 控制点2(x2 y2) 曲线终点(x y)</td></tr><tr><td>三次贝塞尔曲线（简写）</td><td><code>S x2 y2, x y</code></td><td>必须跟在C/S后面，控制点2(x2 y2) 曲线终点(x y)</td></tr><tr><td>两次贝塞尔曲线</td><td><code>Q x1 y1, x y</code></td><td>控制点(x1 y1) 曲线终点(x y)</td></tr><tr><td>两次贝塞尔曲线（简写）</td><td><code>T x y</code></td><td>必须跟在Q/T后面，曲线终点(x y)</td></tr><tr><td>弧形</td><td><code>A rx ry x-axis-rotation large-arc-flag sweep-flag x y</code></td><td>x半径 y半径 x轴偏移角度 选择弧线大(1)小(0) 画弧顺(1)逆(0)时针 终点(x y)</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;</summary>
      
    
    
    
    <category term="前端学习笔记" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="SVG 学习" scheme="http://example.com/tags/SVG-%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>SVG 学习笔记（一）基础</title>
    <link href="http://example.com/2023/11/08/svg-1/"/>
    <id>http://example.com/2023/11/08/svg-1/</id>
    <published>2023-11-08T11:28:07.000Z</published>
    <updated>2023-11-08T11:44:46.926Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、基本构成"><a href="#一、基本构成" class="headerlink" title="一、基本构成"></a>一、基本构成</h1><ul><li><code>&lt;svg&gt;</code>标签 + <code>&lt;g&gt;</code> 组合 + 各式形状</li><li>SVG 里的<strong>属性值必须用引号引起来，数值也同样</strong>。</li><li>渲染顺序：<strong>后来居上，越后面的元素越可见</strong>。</li></ul><h1 id="二、SVG的引入"><a href="#二、SVG的引入" class="headerlink" title="二、SVG的引入"></a>二、SVG的引入</h1><h2 id="常规HTML"><a href="#常规HTML" class="headerlink" title="常规HTML"></a>常规HTML</h2><ul><li>如果 HTML 是 XHTML 并且声明类型为 application/xhtml+xml，可以直接把 SVG 嵌入到 XML 源码中。</li><li>SVG 可以直接被嵌入到 HTML 中。<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Inline SVG 示例<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> <span class="attr">height</span>=<span class="string">&quot;200&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">&quot;100&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;100&quot;</span> <span class="attr">r</span>=<span class="string">&quot;50&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;red&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>可以使用 img 元素。<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;./logo.svg&#x27;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li>可以通过 object 元素引用 SVG 文件：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">object</span> <span class="attr">data</span>=<span class="string">&quot;image.svg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;image/svg+xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>使用 iframe 元素引用 SVG 文件</li><li>使用 CSS 的background-image属性<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.svg-container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;path/to/your-svg-file.svg&quot;</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-size</span>: cover;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>外部SVG文件引入示例<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;svg-container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、基本构成&quot;&gt;&lt;a href=&quot;#一、基本构成&quot; class=&quot;headerlink&quot; title=&quot;一、基本构成&quot;&gt;&lt;/a&gt;一、基本构成&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt;标签 + &lt;code&gt;&amp;lt;g&amp;gt;&lt;/co</summary>
      
    
    
    
    <category term="前端学习笔记" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="SVG 学习" scheme="http://example.com/tags/SVG-%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>SVG 学习笔记（二）viewbox、height、width</title>
    <link href="http://example.com/2023/11/08/svg-2/"/>
    <id>http://example.com/2023/11/08/svg-2/</id>
    <published>2023-11-08T11:28:07.000Z</published>
    <updated>2023-11-08T12:48:16.988Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">viewbox</span>=<span class="string">&quot;0 0 100 100&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><ul><li>viewBox：视窗盒子，简单理解就是在整个<code>svg</code>里截取某一块可见的区域<ul><li><code>viewBox=&quot;x, y, width, height&quot; x: 左上角横坐标，y: 左上角纵坐标，width: 截取的宽度，height: 截取的长度</code></li><li>通过传递以上参数就可以确定区域。</li></ul></li><li>width，height: svg 面板的宽和高</li></ul><h1 id="难点"><a href="#难点" class="headerlink" title="难点"></a>难点</h1><blockquote><p><strong>如何正确设置三者的值？</strong></p></blockquote><p>需要明确需求是什么？——获取到我们需要/绘制的<code>svg</code></p><ul><li>如果说当前绘制的矢量图已经将整个svg空间填满，此时我们需要去拿到整个形状，此时将我们的<code>viewBox</code>完全覆盖整个svg面板即可。<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">&quot;24&quot;</span> <span class="attr">height</span>=<span class="string">&quot;24&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 24 24&quot;</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>怎样在保持svg不变的前提下（不对内部path等元素进行修改）对svg进行放大缩小？</p></blockquote><ul><li>针对这个问题我们首先需要明确一点，<code>svg</code>的绘制是基于内部元素而定的，直接将<code>svg</code>的 <code>width、height、viewBox</code>等设置具体的数值其内部元素大小并不会跟着发生变化。</li><li>简单讲就是我们原来在一张 <code>4*4</code> 的纸画了一幅画，现在我们需要在 <code>8*8</code> 的纸上在 <code>4*4</code> 的范围内重新画一次，这样就导致只有 1/4 的面积有内容，其余部分均为空白。</li><li>解决方案：<strong>不设置<code>svg</code>的宽高/设置宽高为 100%，然后用一个元素包裹该svg，通过设置父元素的宽高来控制svg的大小</strong></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--此时svg会撑满整个父元素--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;svg-container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">svg</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 24 24&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.svg-container</span>&#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=</summary>
      
    
    
    
    <category term="前端学习笔记" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="SVG 学习" scheme="http://example.com/tags/SVG-%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>前端工具包 - className</title>
    <link href="http://example.com/2023/11/06/widget-classNames/"/>
    <id>http://example.com/2023/11/06/widget-classNames/</id>
    <published>2023-11-06T07:07:13.000Z</published>
    <updated>2023-11-06T09:04:09.740Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><ul><li>用于有条件地将类名连接在一起，常用于 React 应用。</li></ul><h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><ul><li>该classNames函数接受任意数量的参数，可以是字符串或对象。该参数<code>&#39;foo&#39;</code>是 的缩写<code>&#123; foo: true &#125;</code>。</li><li>如果与给定键关联的值是假的，则该键将不会包含在输出中。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> classNames = <span class="built_in">require</span>(<span class="string">&#x27;classnames&#x27;</span>) <span class="comment">// import classNames from &#x27;classnames&#x27;</span></span><br><span class="line"><span class="title function_">classNames</span>(<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>); <span class="comment">// =&gt; &#x27;foo bar&#x27;</span></span><br><span class="line"><span class="title function_">classNames</span>(<span class="string">&#x27;foo&#x27;</span>, &#123; <span class="attr">bar</span>: <span class="literal">true</span> &#125;); <span class="comment">// =&gt; &#x27;foo bar&#x27;</span></span><br><span class="line"><span class="title function_">classNames</span>(&#123; <span class="string">&#x27;foo-bar&#x27;</span>: <span class="literal">true</span> &#125;); <span class="comment">// =&gt; &#x27;foo-bar&#x27;</span></span><br><span class="line"><span class="title function_">classNames</span>(&#123; <span class="string">&#x27;foo-bar&#x27;</span>: <span class="literal">false</span> &#125;); <span class="comment">// =&gt; &#x27;&#x27;</span></span><br><span class="line"><span class="title function_">classNames</span>(&#123; <span class="attr">foo</span>: <span class="literal">true</span> &#125;, &#123; <span class="attr">bar</span>: <span class="literal">true</span> &#125;); <span class="comment">// =&gt; &#x27;foo bar&#x27;</span></span><br><span class="line"><span class="title function_">classNames</span>(&#123; <span class="attr">foo</span>: <span class="literal">true</span>, <span class="attr">bar</span>: <span class="literal">true</span> &#125;); <span class="comment">// =&gt; &#x27;foo bar&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// lots of arguments of various types</span></span><br><span class="line"><span class="title function_">classNames</span>(<span class="string">&#x27;foo&#x27;</span>, &#123; <span class="attr">bar</span>: <span class="literal">true</span>, <span class="attr">duck</span>: <span class="literal">false</span> &#125;, <span class="string">&#x27;baz&#x27;</span>, &#123; <span class="attr">quux</span>: <span class="literal">true</span> &#125;); <span class="comment">// =&gt; &#x27;foo bar baz quux&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// other falsy values are just ignored</span></span><br><span class="line"><span class="title function_">classNames</span>(<span class="literal">null</span>, <span class="literal">false</span>, <span class="string">&#x27;bar&#x27;</span>, <span class="literal">undefined</span>, <span class="number">0</span>, <span class="number">1</span>, &#123; <span class="attr">baz</span>: <span class="literal">null</span> &#125;, <span class="string">&#x27;&#x27;</span>); <span class="comment">// =&gt; &#x27;bar 1&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>配合模版字符串使用</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> classNames = <span class="built_in">require</span>(<span class="string">&#x27;classnames&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> buttonType = <span class="string">&#x27;primary&#x27;</span>;</span><br><span class="line"><span class="title function_">classNames</span>(&#123; [<span class="string">`btn-<span class="subst">$&#123;buttonType&#125;</span>`</span>]: <span class="literal">true</span> &#125;);</span><br></pre></td></tr></table></figure><ul><li>通过 <code>classname/bind</code> 实现类名合并。</li><li>注：如果有重复的类名不会被去重</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> classNames = <span class="built_in">require</span>(<span class="string">&#x27;classnames&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">classNames</span>(<span class="string">&#x27;a&#x27;</span>, [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>], &#123;<span class="attr">d</span>: <span class="literal">true</span>,<span class="attr">e</span>:<span class="literal">false</span>,<span class="attr">f</span>:<span class="literal">true</span>&#125;))</span><br><span class="line"><span class="comment">// a a b c d f</span></span><br></pre></td></tr></table></figure><h1 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 采用立即执行函数避免样式污染等问题</span></span><br><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="string">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// hasOwn是一个引用了 &#123;&#125;.hasOwnProperty 方法的变量。</span></span><br><span class="line">  <span class="comment">// nativeCodeString 是一个字符串，表示原生代码。</span></span><br><span class="line"><span class="keyword">var</span> hasOwn = &#123;&#125;.<span class="property">hasOwnProperty</span>;</span><br><span class="line"><span class="keyword">var</span> nativeCodeString = <span class="string">&#x27;[native code]&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 该函数接受任意数量的参数，并根据参数的类型进行处理</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">classNames</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">var</span> classes = [];<span class="comment">// 所有类名的集合</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line"><span class="keyword">var</span> arg = <span class="variable language_">arguments</span>[i];</span><br><span class="line"><span class="keyword">if</span> (!arg) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> argType = <span class="keyword">typeof</span> arg;</span><br><span class="line">      <span class="comment">// 如果是字符串和数字直接放入结果中</span></span><br><span class="line"><span class="keyword">if</span> (argType === <span class="string">&#x27;string&#x27;</span> || argType === <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">classes.<span class="title function_">push</span>(arg);</span><br><span class="line">&#125;</span><br><span class="line">      <span class="comment">// 数组：递归调用 classNames 函数</span></span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arg)) &#123;</span><br><span class="line"><span class="keyword">if</span> (arg.<span class="property">length</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> inner = classNames.<span class="title function_">apply</span>(<span class="literal">null</span>, arg);</span><br><span class="line"><span class="keyword">if</span> (inner) &#123;</span><br><span class="line">classes.<span class="title function_">push</span>(inner);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">      <span class="comment">// 对象：首先检查对象的toString方法是否被重写且不是原生方法，如果满足条件，则将对象转换为字符串，并将结果加入到classes数组中</span></span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (argType === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (arg.<span class="property">toString</span> !== <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span> &amp;&amp; !arg.<span class="property">toString</span>.<span class="title function_">toString</span>().<span class="title function_">includes</span>(<span class="string">&#x27;[native code]&#x27;</span>)) &#123;</span><br><span class="line">classes.<span class="title function_">push</span>(arg.<span class="title function_">toString</span>());</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> arg) &#123;</span><br><span class="line"><span class="keyword">if</span> (hasOwn.<span class="title function_">call</span>(arg, key) &amp;&amp; arg[key]) &#123;</span><br><span class="line">classes.<span class="title function_">push</span>(key);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 结果返回字符串</span></span><br><span class="line"><span class="keyword">return</span> classes.<span class="title function_">join</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 根据不同的运行环境，将classNames函数导出为模块或在全局作用域中定义。</span></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 如果代码运行在 CommonJS 环境（如Node.js），则将classNames函数赋值给module.exports，使其可以被其他模块引用。</span></span><br><span class="line"><span class="comment">   * 同时，将classNames函数赋值给classNames.default属性，以便在导入模块时可以通过default属性访问到该函数。</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">module</span> !== <span class="string">&#x27;undefined&#x27;</span> &amp;&amp; <span class="variable language_">module</span>.<span class="property">exports</span>) &#123;</span><br><span class="line">classNames.<span class="property">default</span> = classNames;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = classNames;</span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 如果代码运行在 AMD 环境（如RequireJS），则使用define函数将classNames函数定义为一个模块，模块名为classnames。</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> define === <span class="string">&#x27;function&#x27;</span> &amp;&amp; <span class="keyword">typeof</span> define.<span class="property">amd</span> === <span class="string">&#x27;object&#x27;</span> &amp;&amp; define.<span class="property">amd</span>) &#123;</span><br><span class="line"><span class="comment">// register as &#x27;classnames&#x27;, consistent with npm package name</span></span><br><span class="line"><span class="title function_">define</span>(<span class="string">&#x27;classnames&#x27;</span>, [], <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> classNames;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 假设代码运行在浏览器环境，将classNames函数赋值给全局对象window的classNames属性，使其在全局作用域中可访问。</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">classNames</span> = classNames;</span><br><span class="line">&#125;</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;用于有条件地将类名连接在一起，常用于 React 应用。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;基本使用&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    <category term="前端工具包" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%B7%A5%E5%85%B7%E5%8C%85/"/>
    
    <category term="className" scheme="http://example.com/categories/className/"/>
    
    
    <category term="前端工具包" scheme="http://example.com/tags/%E5%89%8D%E7%AB%AF%E5%B7%A5%E5%85%B7%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>Antd 组件源码分析（一）Spin</title>
    <link href="http://example.com/2023/11/06/antd-spin/"/>
    <id>http://example.com/2023/11/06/antd-spin/</id>
    <published>2023-11-06T03:32:19.000Z</published>
    <updated>2023-11-06T06:48:55.320Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spin组件介绍"><a href="#Spin组件介绍" class="headerlink" title="Spin组件介绍"></a>Spin组件介绍</h1><ul><li>可以理解为loading组件，在页面局部处于等待异步数据或正在渲染过程时，合适的加载动效会有效缓解用户的焦虑。</li></ul><h1 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h1><ul><li>定义了SpinFC组件，它是Spin组件的包装，并提供了默认的指示器设置和样式处理</li></ul><h2 id="props"><a href="#props" class="headerlink" title="props"></a>props</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">SpinProps</span> &#123;</span><br><span class="line">  prefixCls?: <span class="built_in">string</span>;</span><br><span class="line">  className?: <span class="built_in">string</span>;</span><br><span class="line">  rootClassName?: <span class="built_in">string</span>;</span><br><span class="line">  spinning?: <span class="built_in">boolean</span>;</span><br><span class="line">  style?: <span class="title class_">React</span>.<span class="property">CSSProperties</span>;</span><br><span class="line">  size?: <span class="title class_">SpinSize</span>;</span><br><span class="line">  tip?: <span class="title class_">React</span>.<span class="property">ReactNode</span>;</span><br><span class="line">  delay?: <span class="built_in">number</span>;</span><br><span class="line">  wrapperClassName?: <span class="built_in">string</span>;</span><br><span class="line">  indicator?: <span class="title class_">SpinIndicator</span>;</span><br><span class="line">  children?: <span class="title class_">React</span>.<span class="property">ReactNode</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>prefixCls（可选）：Spin组件的CSS类名的前缀。</li><li>className（可选）：Spin组件的额外CSS类名。</li><li>rootClassName（可选）：Spin组件根元素的额外CSS类名。</li><li>spinning（可选）：指示Spin组件是否处于加载状态，默认为true。</li><li>style（可选）：Spin组件的行内样式。</li><li>size（可选）：Spin组件的大小，可选值为’small’、’default’、’large’。</li><li>tip（可选）：Spin组件的提示文本。</li><li>delay（可选）：延迟显示加载状态的时间，单位为毫秒。</li><li>wrapperClassName（可选）：嵌套模式下Spin组件包裹元素的额外CSS类名。</li><li>indicator（可选）：自定义的加载指示器，可以是一个React节点。</li><li>children（可选）：Spin组件的子元素。</li></ul><h2 id="Spin-函数"><a href="#Spin-函数" class="headerlink" title="Spin 函数"></a>Spin 函数</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Spin</span>: <span class="title class_">React</span>.<span class="property">FC</span>&lt;<span class="title class_">SpinClassProps</span>&gt; = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    通过解构赋值将props对象中的各个属性提取出来</span></span><br><span class="line"><span class="comment">  **/</span></span><br><span class="line">  <span class="keyword">const</span> &#123;</span><br><span class="line">    <span class="attr">spinPrefixCls</span>: prefixCls,</span><br><span class="line">    <span class="attr">spinning</span>: customSpinning = <span class="literal">true</span>,</span><br><span class="line">    delay = <span class="number">0</span>,</span><br><span class="line">    className,</span><br><span class="line">    rootClassName,</span><br><span class="line">    size = <span class="string">&#x27;default&#x27;</span>,</span><br><span class="line">    tip,</span><br><span class="line">    wrapperClassName,</span><br><span class="line">    style,</span><br><span class="line">    children,</span><br><span class="line">    hashId,</span><br><span class="line">    ...restProps</span><br><span class="line">  &#125; = props;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    使用React.useState钩子来定义一个状态变量spinning和一个更新该状态的函数setSpinning。</span></span><br><span class="line"><span class="comment">    初始值通过函数表达式设置，根据 customSpinning 和 delay 的值来判断是否应该处于加载状态。</span></span><br><span class="line"><span class="comment">  **/</span></span><br><span class="line">  <span class="keyword">const</span> [spinning, setSpinning] = <span class="title class_">React</span>.<span class="property">useState</span>&lt;<span class="built_in">boolean</span>&gt;(</span><br><span class="line">    <span class="function">() =&gt;</span> customSpinning &amp;&amp; !<span class="title function_">shouldDelay</span>(customSpinning, delay),</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    使用React.useEffect钩子来处理副作用。</span></span><br><span class="line"><span class="comment">    在组件挂载或delay和customSpinning发生变化时，会执行回调函数。</span></span><br><span class="line"><span class="comment">    如果customSpinning为true，则会创建一个带有延迟的函数showSpinning，该函数在延迟时间后将spinning状态设置为true。</span></span><br><span class="line"><span class="comment">    然后调用showSpinning函数并返回一个清除函数，用于在组件卸载时取消延迟函数的执行。</span></span><br><span class="line"><span class="comment">    如果customSpinning为false，则直接将spinning状态设置为false。</span></span><br><span class="line"><span class="comment">  **/</span></span><br><span class="line">  <span class="title class_">React</span>.<span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (customSpinning) &#123;</span><br><span class="line">      <span class="keyword">const</span> showSpinning = <span class="title function_">debounce</span>(delay, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">setSpinning</span>(<span class="literal">true</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="title function_">showSpinning</span>();</span><br><span class="line">      <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        showSpinning?.<span class="property">cancel</span>?.();</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">setSpinning</span>(<span class="literal">false</span>);</span><br><span class="line">  &#125;, [delay, customSpinning]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    使用React.useMemo钩子来计算isNestedPattern变量的值。它根据spin是否包含子元素判断是否为嵌套模式。</span></span><br><span class="line"><span class="comment">  **/</span></span><br><span class="line">  <span class="keyword">const</span> isNestedPattern = <span class="title class_">React</span>.<span class="property">useMemo</span>&lt;<span class="built_in">boolean</span>&gt;(<span class="function">() =&gt;</span> <span class="keyword">typeof</span> children !== <span class="string">&#x27;undefined&#x27;</span>, [children]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    使用devUseWarning函数创建一个警告方法，并检查tip属性是否存在以及是否处于嵌套模式。</span></span><br><span class="line"><span class="comment">    如果不满足条件，则会触发警告。</span></span><br><span class="line"><span class="comment">  **/</span></span><br><span class="line">  <span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&#x27;production&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> warning = <span class="title function_">devUseWarning</span>(<span class="string">&#x27;Spin&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">warning</span>(!tip || isNestedPattern, <span class="string">&#x27;usage&#x27;</span>, <span class="string">&#x27;`tip` only work in nest pattern.&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 使用React.useContext钩子获取全局配置和样式。</span></span><br><span class="line">  <span class="keyword">const</span> &#123; direction, spin &#125; = <span class="title class_">React</span>.<span class="property">useContext</span>&lt;<span class="title class_">ConfigConsumerProps</span>&gt;(<span class="title class_">ConfigContext</span>);</span><br><span class="line">  <span class="comment">// 使用classNames函数生成Spin组件根元素的className。根据size、spinning、tip和direction等属性的值来动态生成不同的className。</span></span><br><span class="line">  <span class="keyword">const</span> spinClassName = <span class="title function_">classNames</span>(</span><br><span class="line">    prefixCls,</span><br><span class="line">    spin?.<span class="property">className</span>,</span><br><span class="line">    &#123;</span><br><span class="line">      [<span class="string">`<span class="subst">$&#123;prefixCls&#125;</span>-sm`</span>]: size === <span class="string">&#x27;small&#x27;</span>,</span><br><span class="line">      [<span class="string">`<span class="subst">$&#123;prefixCls&#125;</span>-lg`</span>]: size === <span class="string">&#x27;large&#x27;</span>,</span><br><span class="line">      [<span class="string">`<span class="subst">$&#123;prefixCls&#125;</span>-spinning`</span>]: spinning,</span><br><span class="line">      [<span class="string">`<span class="subst">$&#123;prefixCls&#125;</span>-show-text`</span>]: !!tip,</span><br><span class="line">      [<span class="string">`<span class="subst">$&#123;prefixCls&#125;</span>-rtl`</span>]: direction === <span class="string">&#x27;rtl&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    className,</span><br><span class="line">    rootClassName,</span><br><span class="line">    hashId,</span><br><span class="line">  );</span><br><span class="line">  <span class="comment">// 使用classNames函数生成包裹Spin组件内容的容器元素的className。如果spinning为true，则添加$&#123;prefixCls&#125;-blur类名。</span></span><br><span class="line">  <span class="keyword">const</span> containerClassName = <span class="title function_">classNames</span>(<span class="string">`<span class="subst">$&#123;prefixCls&#125;</span>-container`</span>, &#123;</span><br><span class="line">    [<span class="string">`<span class="subst">$&#123;prefixCls&#125;</span>-blur`</span>]: spinning,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// fix https://fb.me/react-unknown-prop</span></span><br><span class="line">  <span class="keyword">const</span> divProps = <span class="title function_">omit</span>(restProps, [<span class="string">&#x27;indicator&#x27;</span>, <span class="string">&#x27;prefixCls&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="attr">mergedStyle</span>: <span class="title class_">React</span>.<span class="property">CSSProperties</span> = &#123; ...spin?.<span class="property">style</span>, ...style &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="attr">spinElement</span>: <span class="title class_">React</span>.<span class="property">ReactNode</span> = (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &#123;<span class="attr">...divProps</span>&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">style</span>=<span class="string">&#123;mergedStyle&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">className</span>=<span class="string">&#123;spinClassName&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">aria-live</span>=<span class="string">&quot;polite&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">aria-busy</span>=<span class="string">&#123;spinning&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;renderIndicator(prefixCls, props)&#125;</span></span><br><span class="line"><span class="language-xml">      &#123;tip &amp;&amp; isNestedPattern ? <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;</span>`$&#123;<span class="attr">prefixCls</span>&#125;<span class="attr">-text</span>`&#125;&gt;</span>&#123;tip&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span> : null&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">  <span class="comment">// 如果是嵌套模式，则需要将子元素加上，然后将 spin 元素嵌套在子元素上</span></span><br><span class="line">  <span class="keyword">if</span> (isNestedPattern) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#123;<span class="attr">...divProps</span>&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">className</span>=<span class="string">&#123;classNames(</span>`$&#123;<span class="attr">prefixCls</span>&#125;<span class="attr">-nested-loading</span>`, <span class="attr">wrapperClassName</span>, <span class="attr">hashId</span>)&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;spinning &amp;&amp; <span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&quot;loading&quot;</span>&gt;</span>&#123;spinElement&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;containerClassName&#125;</span> <span class="attr">key</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;children&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 反之直接返回 spin 组件</span></span><br><span class="line">  <span class="keyword">return</span> spinElement;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="SpinFC函数"><a href="#SpinFC函数" class="headerlink" title="SpinFC函数"></a>SpinFC函数</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">SpinFC</span>: <span class="title class_">SpinFCType</span> = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    定义了一个名为SpinFC的函数，它接受一个SpinProps类型的props参数。</span></span><br><span class="line"><span class="comment">    通过解构赋值，从props中提取prefixCls属性，并使用React.useContext获取全局配置中的getPrefixCls函数。</span></span><br><span class="line"><span class="comment">  **/</span></span><br><span class="line">  <span class="keyword">const</span> &#123; <span class="attr">prefixCls</span>: customizePrefixCls &#125; = props;</span><br><span class="line">  <span class="keyword">const</span> &#123; getPrefixCls &#125; = <span class="title class_">React</span>.<span class="title function_">useContext</span>(<span class="title class_">ConfigContext</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 使用getPrefixCls函数生成spinPrefixCls，它是用于生成Spin组件CSS类名的前缀。</span></span><br><span class="line">  <span class="keyword">const</span> spinPrefixCls = <span class="title function_">getPrefixCls</span>(<span class="string">&#x27;spin&#x27;</span>, customizePrefixCls);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用useStyle自定义钩子函数，传入spinPrefixCls作为参数。它返回一个包含两个元素的数组，分别是wrapSSR和hashId。</span></span><br><span class="line">  <span class="keyword">const</span> [wrapSSR, hashId] = <span class="title function_">useStyle</span>(spinPrefixCls);</span><br><span class="line">  <span class="comment">// wrapSSR 可以理解为一个给传入的组件生成指定样式的函数</span></span><br><span class="line">  <span class="keyword">const</span> <span class="attr">spinClassProps</span>: <span class="title class_">SpinClassProps</span> = &#123;</span><br><span class="line">    ...props,</span><br><span class="line">    spinPrefixCls,</span><br><span class="line">    hashId,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 返回值为当前组件+样式后的最终组件</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">wrapSSR</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Spin</span> &#123;<span class="attr">...spinClassProps</span>&#125; /&gt;</span></span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Spin组件介绍&quot;&gt;&lt;a href=&quot;#Spin组件介绍&quot; class=&quot;headerlink&quot; title=&quot;Spin组件介绍&quot;&gt;&lt;/a&gt;Spin组件介绍&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;可以理解为loading组件，在页面局部处于等待异步数据或正在渲染过程时，合适的</summary>
      
    
    
    
    <category term="Antd组件解析" scheme="http://example.com/categories/Antd%E7%BB%84%E4%BB%B6%E8%A7%A3%E6%9E%90/"/>
    
    
    <category term="组件库" scheme="http://example.com/tags/%E7%BB%84%E4%BB%B6%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>数据类型（十一）手写Promise</title>
    <link href="http://example.com/2023/10/20/base-skill-for-fontend-interview-11/"/>
    <id>http://example.com/2023/10/20/base-skill-for-fontend-interview-11/</id>
    <published>2023-10-20T13:57:13.000Z</published>
    <updated>2023-11-06T03:29:16.841Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">PENDING</span> = <span class="string">&quot;pending&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">FULFILLED</span> = <span class="string">&quot;fulfilled&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">REJECTED</span> = <span class="string">&quot;rejected&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">resolvePromise</span> = (<span class="params">promise2, x, resolve, rejected</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 循环引用报错</span></span><br><span class="line">  <span class="keyword">if</span> (x === promise2) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">rejected</span>(<span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&quot;Chaining cycle detected for promise&quot;</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 防止多次调用</span></span><br><span class="line">  <span class="keyword">let</span> called = <span class="literal">false</span>;</span><br><span class="line">  <span class="comment">// x不是null 且x是对象或者函数</span></span><br><span class="line">  <span class="keyword">if</span> ((<span class="keyword">typeof</span> x === <span class="string">&quot;object&quot;</span> &amp;&amp; x !== <span class="string">&quot;null&quot;</span>) || <span class="keyword">typeof</span> x === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> then = x.<span class="property">then</span>;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> then === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">        then.<span class="title function_">call</span>(</span><br><span class="line">          x,</span><br><span class="line">          <span class="function">(<span class="params">y</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (called) <span class="keyword">return</span>;</span><br><span class="line">            called = <span class="literal">true</span>;</span><br><span class="line">            <span class="title function_">resolvePromise</span>(promise2, y, resolve, rejected);</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="function">(<span class="params">r</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (called) <span class="keyword">return</span>;</span><br><span class="line">            called = <span class="literal">true</span>;</span><br><span class="line">            <span class="title function_">rejected</span>(r);</span><br><span class="line">          &#125;</span><br><span class="line">        );</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(x);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="keyword">if</span> (called) <span class="keyword">return</span>;</span><br><span class="line">      called = <span class="literal">true</span>;</span><br><span class="line">      <span class="title function_">rejected</span>(error);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(x);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyPromise</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">executor</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = <span class="variable constant_">PENDING</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">value</span> = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">reason</span> = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">onFulfilledCallbacks</span> = [];</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">onRejectedCallbacks</span> = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="title function_">resolve</span> = (<span class="params">value</span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (value <span class="keyword">instanceof</span> <span class="title class_">MyPromise</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> value.<span class="title function_">then</span>(resolve, reject);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="variable constant_">PENDING</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span> = <span class="variable constant_">FULFILLED</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">value</span> = value;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">onFulfilledCallbacks</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">fn</span>) =&gt;</span> <span class="title function_">fn</span>());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">let</span> <span class="title function_">rejected</span> = (<span class="params">reason</span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="variable constant_">PENDING</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span> = <span class="variable constant_">REJECTED</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">reason</span> = reason;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">onRejectedCallbacks</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">fn</span>) =&gt;</span> <span class="title function_">fn</span>());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="title function_">executor</span>(resolve, rejected);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="title function_">rejected</span>(error);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">resolve</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, rejected</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(value);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">rejected</span>(<span class="params">reason</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, rejected</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">rejected</span>(reason);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">all</span>(<span class="params">promises</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(promises)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(</span><br><span class="line">        <span class="string">`TypeError: <span class="subst">$&#123;<span class="keyword">typeof</span> promises&#125;</span> <span class="subst">$&#123;promises&#125;</span> is not iterable`</span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, rejected</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> result = [];</span><br><span class="line">      <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">const</span> <span class="title function_">processValue</span> = (<span class="params">value, index</span>) =&gt; &#123;</span><br><span class="line">        result[index] = value;</span><br><span class="line">        <span class="keyword">if</span> (++index === promises.<span class="property">length</span>) &#123;</span><br><span class="line">          <span class="title function_">resolve</span>(result);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; promises.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> current = result[i];</span><br><span class="line">        <span class="keyword">if</span> (current &amp;&amp; <span class="keyword">typeof</span> current === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">          value.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">processValue</span>(res, i);</span><br><span class="line">          &#125;, rejected);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="title function_">processValue</span>(current, i);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">race</span>(<span class="params">promises</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, rejected</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; promises.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> current = promises[i];</span><br><span class="line">        <span class="keyword">if</span> (current &amp;&amp; <span class="keyword">typeof</span> current === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">          current.<span class="title function_">then</span>(resolve, rejected);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="title function_">resolve</span>(current);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">then</span>(<span class="params">onFulfilled, onRejected</span>) &#123;</span><br><span class="line">    onFulfilled =</span><br><span class="line">      <span class="keyword">typeof</span> onFulfilled === <span class="string">&quot;function&quot;</span> ? onFulfilled : <span class="function">(<span class="params">val</span>) =&gt;</span> val;</span><br><span class="line">    onRejected = <span class="keyword">typeof</span> onRejected === <span class="string">&quot;function&quot;</span> ? onRejected : <span class="function">(<span class="params">err</span>) =&gt;</span> err;</span><br><span class="line">    <span class="keyword">const</span> promise2 = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, rejected</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="variable constant_">FULFILLED</span>) &#123;</span><br><span class="line">        <span class="comment">// 需要模拟微任务队列</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> x = <span class="title function_">onFulfilled</span>(<span class="variable language_">this</span>.<span class="property">value</span>);</span><br><span class="line">            <span class="title function_">resolvePromise</span>(promise2, x, resolve, rejected);</span><br><span class="line">          &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="title function_">rejected</span>(error);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, <span class="number">0</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ((<span class="variable language_">this</span>.<span class="property">state</span> = <span class="variable constant_">REJECTED</span>)) &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> x = <span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">reason</span>);</span><br><span class="line">            <span class="title function_">resolvePromise</span>(promise2, x, resolve, rejected);</span><br><span class="line">          &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="title function_">rejected</span>(error);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, <span class="number">0</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="variable constant_">PENDING</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">onFulfilledCallbacks</span>.<span class="title function_">push</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">              <span class="keyword">const</span> x = <span class="title function_">onFulfilled</span>(<span class="variable language_">this</span>.<span class="property">value</span>);</span><br><span class="line">              <span class="title function_">resolvePromise</span>(promise2, x, resolve, rejected);</span><br><span class="line">            &#125;, <span class="number">0</span>);</span><br><span class="line">          &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="title function_">rejected</span>(error);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">onRejectedCallbacks</span>.<span class="title function_">push</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">              <span class="keyword">const</span> x = <span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">reason</span>);</span><br><span class="line">              <span class="title function_">resolvePromise</span>(promise2, x, resolve, rejected);</span><br><span class="line">            &#125;, <span class="number">0</span>);</span><br><span class="line">          &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="title function_">rejected</span>(error);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> promise2;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">catch</span>(callback) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">then</span>(<span class="literal">null</span>, callback);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">finally</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">then</span>(</span><br><span class="line">      <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">MyPromise</span>.<span class="title function_">resolve</span>(<span class="title function_">callback</span>()).<span class="title function_">then</span>(<span class="function">() =&gt;</span> value);</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">MyPromise</span>.<span class="title function_">rejected</span>(</span><br><span class="line">          <span class="title function_">callback</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> error;</span><br><span class="line">          &#125;)</span><br><span class="line">        );</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l</summary>
      
    
    
    
    <category term="前端面试" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/"/>
    
    <category term="前端面试题" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
    <category term="前端面试基本功" scheme="http://example.com/tags/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E5%9F%BA%E6%9C%AC%E5%8A%9F/"/>
    
  </entry>
  
  <entry>
    <title>数据类型（十）闭包</title>
    <link href="http://example.com/2023/10/20/base-skill-for-fontend-interview-10/"/>
    <id>http://example.com/2023/10/20/base-skill-for-fontend-interview-10/</id>
    <published>2023-10-20T13:45:25.000Z</published>
    <updated>2023-11-06T03:29:16.841Z</updated>
    
    <content type="html"><![CDATA[<h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1><ul><li>即使外部函数已经不存在，也可以获取作用域链上变量的函数。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">outer</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> a = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> f = <span class="title function_">outer</span>()</span><br><span class="line"><span class="title function_">f</span>()</span><br></pre></td></tr></table></figure><h1 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏"></a>内存泄漏</h1><ul><li>常见于监听DOM元素时，做了一些额外的操作，然后在某些API作用下导致DOM元素不存在后，变量未被清除。</li></ul><h1 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h1><ul><li>一定要在外部函数中 return 内部函数，才会形成闭包吗？<ul><li>不需要，只要满足能够访问外部变量的函数就是闭包。</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;闭包&quot;&gt;&lt;a href=&quot;#闭包&quot; class=&quot;headerlink&quot; title=&quot;闭包&quot;&gt;&lt;/a&gt;闭包&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;即使外部函数已经不存在，也可以获取作用域链上变量的函数。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight</summary>
      
    
    
    
    <category term="前端面试" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/"/>
    
    <category term="前端面试题" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
    <category term="前端面试基本功" scheme="http://example.com/tags/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E5%9F%BA%E6%9C%AC%E5%8A%9F/"/>
    
  </entry>
  
  <entry>
    <title>数据类型（九）垃圾回收机制</title>
    <link href="http://example.com/2023/10/20/base-skill-for-fontend-interview-9/"/>
    <id>http://example.com/2023/10/20/base-skill-for-fontend-interview-9/</id>
    <published>2023-10-20T13:03:46.000Z</published>
    <updated>2023-11-06T03:29:16.841Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引用计数法"><a href="#引用计数法" class="headerlink" title="引用计数法"></a>引用计数法</h1><ul><li>跟踪记录对象的引用次数，当次数为0时就需要被销毁。<ul><li>缺点：当对象中存在循环引用时，该对象无法被回收，造成内存泄漏</li></ul></li></ul><h1 id="标记-清除法"><a href="#标记-清除法" class="headerlink" title="标记-清除法"></a>标记-清除法</h1><ul><li>解决循环引用的问题，但是会出现内存碎片。<ul><li>解决策略：first-fit、best-fit、worst-fit</li></ul></li><li>标记阶段<ul><li>从根出发，遍历所有可达的对象并将其标记上活动对象。</li></ul></li><li>清除阶段<ul><li>清除所有未被标记的对象</li></ul></li></ul><h1 id="Weakmap-和-Map"><a href="#Weakmap-和-Map" class="headerlink" title="Weakmap 和 Map"></a>Weakmap 和 Map</h1><ul><li>Weakmap，键值对集合，键是弱引用，只能是对象，值没有限制。Map没有限制。</li><li>Weakmap，键是弱引用，不会阻止与之关联的对象被垃圾回收。Map键是强引用，会阻止。</li><li>Weakmap的 key 无法使用<code>forEach()</code>和<code>keys()</code>遍历。</li></ul><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul><li>引用 DOM 元素，</li><li>对象的缓存</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;引用计数法&quot;&gt;&lt;a href=&quot;#引用计数法&quot; class=&quot;headerlink&quot; title=&quot;引用计数法&quot;&gt;&lt;/a&gt;引用计数法&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;跟踪记录对象的引用次数，当次数为0时就需要被销毁。&lt;ul&gt;
&lt;li&gt;缺点：当对象中存在循环引用时，该对象</summary>
      
    
    
    
    <category term="前端面试" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/"/>
    
    <category term="前端面试题" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
    <category term="前端面试基本功" scheme="http://example.com/tags/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E5%9F%BA%E6%9C%AC%E5%8A%9F/"/>
    
  </entry>
  
  <entry>
    <title>数据类型（八）This指向</title>
    <link href="http://example.com/2023/10/20/base-skill-for-fontend-interview-8/"/>
    <id>http://example.com/2023/10/20/base-skill-for-fontend-interview-8/</id>
    <published>2023-10-20T08:22:51.000Z</published>
    <updated>2023-11-06T03:29:16.841Z</updated>
    
    <content type="html"><![CDATA[<h1 id="this的绑定时机"><a href="#this的绑定时机" class="headerlink" title="this的绑定时机"></a>this的绑定时机</h1><ul><li>this和函数定义的位置没有关系，只和调用者有关</li><li>this是在运行时被绑定的</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> foo&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>() <span class="comment">// window</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">foo</span>: foo</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">foo</span>() <span class="comment">// obj</span></span><br><span class="line"></span><br><span class="line">foo.<span class="title function_">call</span>(<span class="string">&#x27;hello&#x27;</span>)<span class="comment">// string(&#x27;hello&#x27;)</span></span><br></pre></td></tr></table></figure><h1 id="this的绑定规则"><a href="#this的绑定规则" class="headerlink" title="this的绑定规则"></a>this的绑定规则</h1><ul><li>隐式绑定<ul><li>通过对象调用函数绑定this</li></ul></li><li>显示绑定：<ul><li>call、bind</li></ul></li><li>使用new关键字<ul><li>如果返回的是对象，则直接返回该对象，</li><li>如果返回的是基本类型，则return语句无效，仍然返回我们创建的新对象</li></ul></li></ul><h1 id="多重绑定优先级"><a href="#多重绑定优先级" class="headerlink" title="多重绑定优先级"></a>多重绑定优先级</h1><ul><li>new绑定 &gt; 显示绑定(bind) &gt; 隐式绑定</li></ul><h1 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 输出结果：obj1</span></span><br><span class="line"><span class="comment">// 谁直接调用this就指向谁</span></span><br><span class="line"><span class="keyword">function</span> foo&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;obj1&#x27;</span>,</span><br><span class="line">  <span class="attr">foo</span>: foo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;obj2&#x27;</span>,</span><br><span class="line">  <span class="attr">obj1</span>: obj1</span><br><span class="line">&#125;</span><br><span class="line">obj2.<span class="property">obj1</span>.<span class="title function_">foo</span>()</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">通过new关键字创建一个新对象的步骤是什么/构造函数是如何创建新对象的？</span><br><span class="line">1、创建一个空对象</span><br><span class="line">2、空对象的 __proto__ 指向构造函数的prototype属性</span><br><span class="line">3、执行构造函数，如果构造函数中有this，则将this指向创建的空对象</span><br><span class="line">4、返回刚刚创建的空对象</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line"><span class="keyword">function</span> foo&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;obj1&#x27;</span>,</span><br><span class="line">  <span class="attr">foo</span>: foo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;obj2&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line">(obj2.<span class="property">foo</span> = obj1.<span class="property">foo</span>)()<span class="comment">// 等价于foo()</span></span><br><span class="line"><span class="comment">// window</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;全局window&#x27;</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;person&quot;</span>,</span><br><span class="line">  <span class="attr">sayName</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayName</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> fun = person.<span class="property">sayName</span>;</span><br><span class="line">  <span class="title function_">fun</span>();</span><br><span class="line">  person.<span class="title function_">sayName</span>();</span><br><span class="line">  (b = person.<span class="property">sayName</span>)()</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sayName</span>()</span><br><span class="line"><span class="comment">// 全局window、person、全局window</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;this的绑定时机&quot;&gt;&lt;a href=&quot;#this的绑定时机&quot; class=&quot;headerlink&quot; title=&quot;this的绑定时机&quot;&gt;&lt;/a&gt;this的绑定时机&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;this和函数定义的位置没有关系，只和调用者有关&lt;/li&gt;
&lt;li&gt;th</summary>
      
    
    
    
    
  </entry>
  
</feed>
