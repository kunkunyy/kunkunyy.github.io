<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>姚永坤的小窝</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-02-05T14:35:49.471Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>姚永坤</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue 学习笔记（五）事件处理</title>
    <link href="http://example.com/2022/02/05/vue-5/"/>
    <id>http://example.com/2022/02/05/vue-5/</id>
    <published>2022-02-05T13:36:25.000Z</published>
    <updated>2022-02-05T14:35:49.471Z</updated>
    
    <content type="html"><![CDATA[<h1 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h1><h2 id="监听事件"><a href="#监听事件" class="headerlink" title="监听事件"></a>监听事件</h2><ul><li>可以用 <code>v-on</code> 指令监听 DOM 事件，并在触发时运行一些 JavaScript 代码。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;example-1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;counter += 1&quot;</span>&gt;</span>Add 1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>The button above has been clicked &#123;&#123; counter &#125;&#125; times.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> example1 = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#example-1&#x27;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        counter: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="事件处理方法"><a href="#事件处理方法" class="headerlink" title="事件处理方法"></a>事件处理方法</h2><ul><li>在method中创建事件处理方法，然后使用<code>v-on</code> 绑定对应方法名。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;example-2&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- `greet` 是在下面定义的方法名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;greet&quot;</span>&gt;</span>Greet<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> example2 = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#example-2&#x27;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        name: <span class="string">&#x27;Vue.js&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 在 `methods` 对象中定义方法</span></span><br><span class="line">    methods: &#123;</span><br><span class="line">        greet: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// `this` 在方法里指向当前 Vue 实例</span></span><br><span class="line">        alert(<span class="string">&#x27;Hello &#x27;</span> + <span class="built_in">this</span>.name + <span class="string">&#x27;!&#x27;</span>)</span><br><span class="line">        <span class="comment">// `event` 是原生 DOM 事件</span></span><br><span class="line">        <span class="keyword">if</span> (event) &#123;</span><br><span class="line">            alert(event.target.tagName)</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="内联处理器中的方法"><a href="#内联处理器中的方法" class="headerlink" title="内联处理器中的方法"></a>内联处理器中的方法</h2><ul><li>除了直接绑定到一个方法，也可以在内联 JavaScript 语句中调用方法。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;example-3&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;say(&#x27;hi&#x27;)&quot;</span>&gt;</span>Say hi<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;say(&#x27;what&#x27;)&quot;</span>&gt;</span>Say what<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#example-3&#x27;</span>,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        say: <span class="function"><span class="keyword">function</span> (<span class="params">message</span>) </span>&#123;</span><br><span class="line">        alert(message)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>使用$event特殊变量可用于访问原始的DOM事件。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;warn(&#x27;Form cannot be submitted yet.&#x27;, $event)&quot;</span>&gt;</span></span><br><span class="line">    Submit</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line">methods: &#123;</span><br><span class="line">    warn: <span class="function"><span class="keyword">function</span> (<span class="params">message, event</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 现在我们可以访问原生事件对象</span></span><br><span class="line">        <span class="keyword">if</span> (event) &#123;</span><br><span class="line">        event.preventDefault()</span><br><span class="line">        &#125;</span><br><span class="line">        alert(message)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h2><ul><li>Vue.js 为 <code>v-on</code> 提供了<strong>事件修饰符</strong>｡</li><li>修饰符是由点开头的指令后缀来表示的。主要有6个修饰符。<ul><li><code>.stop</code></li><li><code>.prevent</code></li><li><code>.capture</code></li><li><code>.self</code></li><li><code>.once</code></li><li><code>.passive</code></li></ul></li><li>使用修饰符时，顺序很重要；相应的代码会以同样的顺序产生。因此，用 <code>v-on:click.prevent.self</code> 会阻止<strong>所有的点击</strong>，而 <code>v-on:click.self.prevent</code> 只会阻止对元素自身的点击。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 阻止单击事件继续传播 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop</span>=<span class="string">&quot;doThis&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 提交事件不再重载页面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>=<span class="string">&quot;onSubmit&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 修饰符可以串联 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop.prevent</span>=<span class="string">&quot;doThat&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 只有修饰符 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 添加事件监听器时使用事件捕获模式 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 即内部元素触发的事件先在此处理，然后才交由内部元素进行处理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.capture</span>=<span class="string">&quot;doThis&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 只当在 event.target 是当前元素自身时触发处理函数 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 即事件不是从内部元素触发的 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.self</span>=<span class="string">&quot;doThat&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 点击事件将只会触发一次 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.once</span>=<span class="string">&quot;doThis&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 滚动事件的默认行为 (即滚动行为) 将会立即触发 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 而不会等待 `onScroll` 完成  --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这其中包含 `event.preventDefault()` 的情况 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:scroll.passive</span>=<span class="string">&quot;onScroll&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="按键修饰符"><a href="#按键修饰符" class="headerlink" title="按键修饰符"></a>按键修饰符</h2><ul><li>Vue 允许为 <code>v-on</code> 在<strong>监听键盘事件</strong>时添加按键修饰符。</li><li>以下代码只有在 ‘key’是 ‘Enter’时会调用’vm.submit ’方法。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 只有在 `key` 是 `Enter` 时调用 `vm.submit()` --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.enter</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>你可以直接将 <code>KeyboardEvent.key</code>暴露的任意有效按键名转换为 kebab-case 来作为修饰符。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.page-down</span>=<span class="string">&quot;onPageDown&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="系统修饰键"><a href="#系统修饰键" class="headerlink" title="系统修饰键"></a>系统修饰键</h2><ul><li>可以用如下修饰符来实现仅在按下相应按键时才触发鼠标或键盘事件的监听器。<ul><li><code>.ctrl</code>、<code>.alt</code>、<code>.shift</code>、<code>.meta</code>。</li></ul></li><li>修饰键与常规按键不同，在和 <code>keyup</code> 事件一起用时，事件触发时修饰键必须处于按下状态。</li><li>只有在按住 <code>ctrl</code> 的情况下释放其它按键，才能触发 <code>keyup.ctrl</code>。而单单释放 <code>ctrl</code> 也不会触发事件。</li><li>如果你想要这样的行为，请为 <code>ctrl</code> 换用 <code>keyCode</code>：<code>keyup.17</code>。</li></ul><h3 id="exact修饰符"><a href="#exact修饰符" class="headerlink" title=".exact修饰符"></a>.exact修饰符</h3><ul><li><code>.exact</code> 修饰符允许你控制由精确的系统修饰符组合触发的事件。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 即使 Alt 或 Shift 被一同按下时也会触发 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click.ctrl</span>=<span class="string">&quot;onClick&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 有且只有 Ctrl 被按下的时候才触发 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click.ctrl.exact</span>=<span class="string">&quot;onCtrlClick&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 没有任何系统修饰符被按下的时候才触发 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click.exact</span>=<span class="string">&quot;onClick&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="鼠标修饰符"><a href="#鼠标修饰符" class="headerlink" title="鼠标修饰符"></a>鼠标修饰符</h3><ul><li><code>.left</code>、<code>.right</code>、 <code>.middle</code>。</li><li>这些修饰符会限制处理函数仅响应特定的鼠标按钮。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;事件处理&quot;&gt;&lt;a href=&quot;#事件处理&quot; class=&quot;headerlink&quot; title=&quot;事件处理&quot;&gt;&lt;/a&gt;事件处理&lt;/h1&gt;&lt;h2 id=&quot;监听事件&quot;&gt;&lt;a href=&quot;#监听事件&quot; class=&quot;headerlink&quot; title=&quot;监听事件&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="前端学习笔记" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="VUE" scheme="http://example.com/categories/VUE/"/>
    
    
    <category term="Vue学习" scheme="http://example.com/tags/Vue%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Vue 学习笔记（四）列表渲染</title>
    <link href="http://example.com/2022/02/04/vue-4/"/>
    <id>http://example.com/2022/02/04/vue-4/</id>
    <published>2022-02-04T15:14:59.000Z</published>
    <updated>2022-02-05T14:26:31.719Z</updated>
    
    <content type="html"><![CDATA[<h1 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h1><h2 id="用v-for把一个数组对应为一组元素"><a href="#用v-for把一个数组对应为一组元素" class="headerlink" title="用v-for把一个数组对应为一组元素"></a>用<code>v-for</code>把一个数组对应为一组元素</h2><ul><li>可以用<code>v-for</code>指令基于一个数组来渲染一个列表。<ul><li><code>v-for</code>指令需要使用 <code>item in items</code> 形式的特殊语法；</li><li><code>items</code>是源数据数组，<code>item</code>是被迭代数组的别名。</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;example-1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.message&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123; item.message &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> example1 = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#example-1&#x27;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        items: [</span><br><span class="line">            &#123; <span class="attr">message</span>: <span class="string">&#x27;Foo&#x27;</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">message</span>: <span class="string">&#x27;Bar&#x27;</span> &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>还支持 <code>(item,index) in items</code>形式，index表示当前项的索引。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;example-2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in items&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123; parentMessage &#125;&#125; - &#123;&#123; index &#125;&#125; - &#123;&#123; item.message &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> example2 = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#example-2&#x27;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        parentMessage: <span class="string">&#x27;Parent&#x27;</span>,</span><br><span class="line">        items: [</span><br><span class="line">            &#123; <span class="attr">message</span>: <span class="string">&#x27;Foo&#x27;</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">message</span>: <span class="string">&#x27;Bar&#x27;</span> &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>可以使用of来代替in作为分隔符，因为它更接近JavaScript选代器的语法。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;item of items&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="在-v-for里使用对象"><a href="#在-v-for里使用对象" class="headerlink" title="在 v-for里使用对象"></a>在 v-for里使用对象</h2><ul><li>即：使用v-for来遍历一个对象的property｡ </li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;v-for-object&quot;</span> <span class="attr">class</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;value in object&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123; value &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#v-for-object&#x27;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        object: &#123;</span><br><span class="line">            title: <span class="string">&#x27;How to do lists in Vue&#x27;</span>,</span><br><span class="line">            author: <span class="string">&#x27;Jane Doe&#x27;</span>,</span><br><span class="line">            publishedAt: <span class="string">&#x27;2016-04-10&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>同样，也可以像遍历数组一样使用相同的遍历方式。<ul><li>（value, name） in object</li></ul></li><li>同时还可以使用第三个参数来代表索引。<ul><li>(value, name, index) in object</li></ul></li></ul><h2 id="维护状态"><a href="#维护状态" class="headerlink" title="维护状态"></a>维护状态</h2><ul><li>当Vue正在更新使用v-for渲染的元素列表时，它默认使用“<strong>就地更新</strong>”的策略。</li><li>如果数据项的顺序被改变，Vue 将不会移动 DOM 元素来匹配数据项的顺序，而是就地更新每个元素，并且确保它们在每个索引位置正确渲染。</li><li><strong>为了给 Vue 一个提示，以便它能跟踪每个节点的身份，从而重用和重新排序现有元素</strong>，你需要为每项提供一个唯一 key attribute。</li><li>尽可能在使用 <code>v-for</code> 时提供 <code>key</code> attribute，除非遍历输出的 DOM 内容非常简单，或者是刻意依赖默认行为以获取性能上的提升。</li><li>因为它是 Vue 识别节点的一个通用机制，<code>key</code> 并不仅与 <code>v-for</code> 特别关联。</li></ul><h2 id="数组更新检测"><a href="#数组更新检测" class="headerlink" title="数组更新检测"></a>数组更新检测</h2><h3 id="变更方法"><a href="#变更方法" class="headerlink" title="变更方法"></a>变更方法</h3><ul><li><code>push()</code>、<code>pop()</code>、<code>shift()</code>、<code>unshift()</code>、<code>splice()</code>、<code>sort()</code>、<code>reverse()</code>。</li><li>调用以上方法后将会改变原始数组进而触发视图的更新。</li></ul><h3 id="替换数组"><a href="#替换数组" class="headerlink" title="替换数组"></a>替换数组</h3><ul><li><code>filter()</code>、<code>concat()</code> 和 <code>slice()</code>等。</li><li>使用以上方法后并不会改变原始数组，相应的会生成一个新数组。</li><li>当使用以上方法时，可以<strong>使用新数组替换旧数组</strong>。</li><li>Vue 为了使得 DOM 元素得到最大范围的重用而实现了一些智能的启发式方法，所以用一个含有相同元素的数组去替换原来的数组是非常高效的操作。</li><li>由于 JavaScript 的限制，Vue <strong>不能检测</strong>数组和对象的变化。</li></ul><h2 id="显示过滤-排序后的结果"><a href="#显示过滤-排序后的结果" class="headerlink" title="显示过滤/排序后的结果"></a>显示过滤/排序后的结果</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;n in evenNumbers&quot;</span>&gt;</span>&#123;&#123; n &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">    numbers: [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> ]</span><br><span class="line">&#125;,</span><br><span class="line">computed: &#123;</span><br><span class="line">    evenNumbers: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.numbers.filter(<span class="function"><span class="keyword">function</span> (<span class="params">number</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> number % <span class="number">2</span> === <span class="number">0</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在计算属性不适用的情况下，可以调用方法来完成过滤等效果。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">v-for</span>=<span class="string">&quot;set in sets&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;n in even(set)&quot;</span>&gt;</span>&#123;&#123; n &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">    sets: [[ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> ], [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]]</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">    even: <span class="function"><span class="keyword">function</span> (<span class="params">numbers</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> numbers.filter(<span class="function"><span class="keyword">function</span> (<span class="params">number</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> number % <span class="number">2</span> === <span class="number">0</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="在v-for里使用值范围"><a href="#在v-for里使用值范围" class="headerlink" title="在v-for里使用值范围"></a>在v-for里使用值范围</h2><ul><li>v-for也可以接受整数，它会把模板重复对应次数。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-for</span>=<span class="string">&quot;n in 10&quot;</span>&gt;</span>&#123;&#123; n &#125;&#125; <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="v-for与v-if一同使用"><a href="#v-for与v-if一同使用" class="headerlink" title="v-for与v-if一同使用"></a>v-for与v-if一同使用</h2><ul><li>v-for的优先级比v-if更高。</li><li>同时，可以使用 v-if置于外层元素来有目的跳出循环。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">v-if</span>=<span class="string">&quot;todos.length&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;todo in todos&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123; todo &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else</span>&gt;</span>No todos left!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><ul><li>同时可以在自定义组件中来使用v-for。</li><li>当在组件上使用v-for时，key是必须的。</li><li>但由于任何数据都不会被自动传递到组件里（<strong>因为组件有自己的独立作用域</strong>），为了把迭代数据传到组件里，需要使用prop｡</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;my-component</span><br><span class="line">    v-for=&quot;(item, index) in items&quot;</span><br><span class="line">    v-bind:item=&quot;item&quot;</span><br><span class="line">    v-bind:index=&quot;index&quot;</span><br><span class="line">    v-bind:key=&quot;item.id&quot;</span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;列表渲染&quot;&gt;&lt;a href=&quot;#列表渲染&quot; class=&quot;headerlink&quot; title=&quot;列表渲染&quot;&gt;&lt;/a&gt;列表渲染&lt;/h1&gt;&lt;h2 id=&quot;用v-for把一个数组对应为一组元素&quot;&gt;&lt;a href=&quot;#用v-for把一个数组对应为一组元素&quot; class=&quot;</summary>
      
    
    
    
    <category term="前端学习笔记" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="VUE" scheme="http://example.com/categories/VUE/"/>
    
    
    <category term="Vue学习" scheme="http://example.com/tags/Vue%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Vue 学习笔记（三）条件渲染</title>
    <link href="http://example.com/2022/02/04/vue-3/"/>
    <id>http://example.com/2022/02/04/vue-3/</id>
    <published>2022-02-04T10:46:54.000Z</published>
    <updated>2022-02-05T13:36:56.737Z</updated>
    
    <content type="html"><![CDATA[<h1 id="条件渲染语句"><a href="#条件渲染语句" class="headerlink" title="条件渲染语句"></a>条件渲染语句</h1><ul><li><code>v-if</code>、<code>v-else-if</code>、<code>v-else</code>、<code>v-show</code>、<code>v-for</code>。</li></ul><h2 id="一、条件判断语句"><a href="#一、条件判断语句" class="headerlink" title="一、条件判断语句"></a>一、条件判断语句</h2><ul><li><code>v-if</code>、<code>v-else-if</code>、<code>v-else</code>。</li></ul><h3 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h3><ul><li>v-if指令用于条件性地渲染一块内容。<ul><li>这块内容只有当指令的表达式返回true值的时候被渲染。</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;awesome&quot;</span>&gt;</span>Vue is awesome!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-else"><a href="#v-else" class="headerlink" title="v-else"></a>v-else</h3><ul><li>与v-if联合使用。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;Math.random() &gt; 0.5&quot;</span>&gt;</span></span><br><span class="line">    Now you see me</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">    Now you don&#x27;t</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong><code>v-else</code> 元素必须紧跟在带 <code>v-if</code> 或者 <code>v-else-if</code> 的元素的后面，否则它将不会被识别</strong>。</li></ul><h3 id="v-else-if"><a href="#v-else-if" class="headerlink" title="v-else-if"></a>v-else-if</h3><ul><li><code>v-else-if</code>，顾名思义，充当 <code>v-if</code> 的“else-if 块”，可以连续使用：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;type === &#x27;A&#x27;&quot;</span>&gt;</span></span><br><span class="line">    A</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;type === &#x27;B&#x27;&quot;</span>&gt;</span></span><br><span class="line">    B</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;type === &#x27;C&#x27;&quot;</span>&gt;</span></span><br><span class="line">    C</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">    Not A/B/C</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>类似于 v-else，<code>v-else-if</code>也必须紧跟在带 <code>v-if</code>或者 <code>v-else-if</code> 的元素之后。</li></ul><h1 id="用key管理可复用的元素"><a href="#用key管理可复用的元素" class="headerlink" title="用key管理可复用的元素"></a>用key管理可复用的元素</h1><ul><li>Vue 会尽可能高效地渲染元素，通常会复用已有元素而不是从头开始渲染。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">&quot;loginType === &#x27;username&#x27;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>Username<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">&quot;Enter your username&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">&quot;Enter your email address&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span>  </span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm=<span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:<span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    data:&#123;</span><br><span class="line">        loginType:<span class="string">&#x27;email&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        qiehuan:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">this</span>.loginType==<span class="string">&quot;email&quot;</span>)&#123;</span><br><span class="line">                <span class="built_in">this</span>.loginType==<span class="string">&quot;username&quot;</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">this</span>.loginType==<span class="string">&quot;email&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);   </span><br></pre></td></tr></table></figure><ul><li>那么在上面的代码中切换 loginType 将不会清除用户已经输入的内容。</li><li>Vue 提供了一种方式来声明“这两个元素是完全独立的——不要复用它们”。只需添加一个具有唯一值的 key 属性即可：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">&quot;loginType === &#x27;username&#x27;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>Username<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">&quot;Enter your username&quot;</span> <span class="attr">key</span>=<span class="string">&quot;username-input&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">&quot;Enter your email address&quot;</span> <span class="attr">key</span>=<span class="string">&quot;email-input&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span>  </span><br></pre></td></tr></table></figure></li></ul><h1 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h1><ul><li>带有 v-show 的元素始终会被渲染并保留在 DOM 中。v-show 是简单地切换元素的 CSS 属性 display 。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&quot;ok&quot;</span>&gt;</span>Hello!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>  </span><br></pre></td></tr></table></figure><h1 id="v-if-vs-v-show"><a href="#v-if-vs-v-show" class="headerlink" title="v-if vs v-show"></a>v-if vs v-show</h1><ul><li><p>v-if 有更高的切换开销，而 v-show 有更高的初始渲染开销。</p></li><li><p><strong>如果需要非常频繁地切换</strong>，则使用 v-show 较好；</p></li><li><p><strong>如果在运行时条件不太可能改变</strong>，则使用 v-if 较好。</p></li><li><p>v-if是通过控制dom节点的存在与否来控制元素的显隐；v-show是通过设置DOM元素的display样式，block为显示，none为隐藏；</p></li><li><p>v-if切换有一个局部编译/卸载的过程，切换过程中合适地销毁和重建内部的事件监听和子组件；v-show只是简单的基于css切换；</p></li><li><p>v-if是惰性的，如果初始条件为假，则什么也不做；只有在条件第一次变为真时才开始局部编译（编译被缓存？编译被缓存后，然后再切换的时候进行局部卸载); v-show是在任何条件下（首次条件是否为真）都被编译，然后被缓存，而且DOM元素保留；</p></li><li><p>v-if有更高的切换消耗；v-show有更高的初始渲染消耗；</p></li></ul><h1 id="v-if与v-for一起用"><a href="#v-if与v-for一起用" class="headerlink" title="v-if与v-for一起用"></a>v-if与v-for一起用</h1><ul><li>当 v-if 与 v-for 一起使用时，v-for 具有比 v-if 更高的优先级。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;item.isOk&quot;</span>&gt;</span>&#123;&#123;item.text&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm=<span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    data:&#123;</span><br><span class="line">        items:[</span><br><span class="line">            &#123;<span class="attr">text</span>:<span class="string">&quot;chifan&quot;</span>,<span class="attr">isOk</span>:<span class="literal">true</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">text</span>:<span class="string">&quot;shuijue&quot;</span>,<span class="attr">isOk</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">text</span>:<span class="string">&quot;kandianshi&quot;</span>,<span class="attr">isOk</span>:<span class="literal">true</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">text</span>:<span class="string">&quot;dayouxi&quot;</span>,<span class="attr">isOk</span>:<span class="literal">true</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">text</span>:<span class="string">&quot;kandianying&quot;</span>,<span class="attr">isOk</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">        ]                   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;);  </span><br></pre></td></tr></table></figure><ul><li>如果你的目的是有条件地跳过循环的执行，那么可以将 v-if 置于外层元素 (或<code>&lt;template&gt;</code>)上。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;条件渲染语句&quot;&gt;&lt;a href=&quot;#条件渲染语句&quot; class=&quot;headerlink&quot; title=&quot;条件渲染语句&quot;&gt;&lt;/a&gt;条件渲染语句&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;v-if&lt;/code&gt;、&lt;code&gt;v-else-if&lt;/code&gt;、&lt;code&gt;v</summary>
      
    
    
    
    <category term="前端学习笔记" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="VUE" scheme="http://example.com/categories/VUE/"/>
    
    
    <category term="Vue学习" scheme="http://example.com/tags/Vue%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Vue 学习笔记（二）Vue生命周期</title>
    <link href="http://example.com/2022/02/03/vue-2/"/>
    <id>http://example.com/2022/02/03/vue-2/</id>
    <published>2022-02-03T11:36:30.000Z</published>
    <updated>2022-02-05T13:37:27.728Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本内容和图解"><a href="#基本内容和图解" class="headerlink" title="基本内容和图解"></a>基本内容和图解</h1><ul><li><p>VUE生命周期共分为八个阶段：</p><ul><li>创建前/后、载入前/后、更新前/后、销毁前/后。</li></ul></li><li><p>创建前/后 :</p><ul><li>在beforeCreate阶段，vue实例的挂载元素el和数据对象data都为undefined，还未初始化。</li><li>在created阶段，vue实例的数据data有了，el还没有</li></ul></li><li><p>载入前/后：</p><ul><li>在beforeMount阶段，vue实例的$el和data都初始化了,但还没有挂载之前都是虚拟的demo阶段,data.message还未替换。</li><li>在mounted阶段,vue实例挂载完后,data.message成功渲染.</li></ul></li><li><p>更新前/后：</p><ul><li>当data变化时,户触发beforeUpdate和update方法。</li></ul></li><li><p>销毁前/后：</p><ul><li>在执行destroy方法后，对data的改变不会再触发周期函数，说明此时vue实例已经结束了事件监听以及和dom的绑定，但是dom结构依然存在。</li></ul></li></ul><img lazyload src="/images/loading.svg" data-src="/2022/02/03/vue-2/pic2.png" class title="# tu1"><h1 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h1><h2 id="1、什么是vue生命周期？"><a href="#1、什么是vue生命周期？" class="headerlink" title="1、什么是vue生命周期？"></a>1、什么是vue生命周期？</h2><p>vue实例从创建到销毁的过程，就是生命周期。也就是从开始创建、初始化数据、编译模板、挂载DOM→渲染、更新→渲染、卸载等一系列过程，我们称这是Vue的生命周期。</p><h2 id="2、vue生命周期的作用是什么？"><a href="#2、vue生命周期的作用是什么？" class="headerlink" title="2、vue生命周期的作用是什么？"></a>2、vue生命周期的作用是什么？</h2><p>生命周期中有多个事件钩子，让我们在控制整个Vue实例的过程中更容易形成好的逻辑</p><h2 id="3、vue生命周期总共有几个阶段？"><a href="#3、vue生命周期总共有几个阶段？" class="headerlink" title="3、vue生命周期总共有几个阶段？"></a>3、vue生命周期总共有几个阶段？</h2><p>总共可以分8个阶段：创建前/后、载入前/后、更新前/后、销毁前/后</p><h2 id="4、第一次页面加载会触发哪几个钩子"><a href="#4、第一次页面加载会触发哪几个钩子" class="headerlink" title="4、第一次页面加载会触发哪几个钩子?"></a>4、第一次页面加载会触发哪几个钩子?</h2><p>第一次页面加载时会触发beforeCreate、created、beforeMount、mounted这几个钩子</p><h2 id="5、请列举出3个Vue常用的声明周期钩子函数"><a href="#5、请列举出3个Vue常用的声明周期钩子函数" class="headerlink" title="5、请列举出3个Vue常用的声明周期钩子函数"></a>5、请列举出3个Vue常用的声明周期钩子函数</h2><ul><li>created：实例已经创建完成之后调用，在这一步，实例已经完成数据观测、属性和方法的运算，watch、event事件回调，然而，挂载阶段还没有开始，$el属性目前还不可见</li><li>mounted：el被新创建的vm.$el替换，并挂载到实例上去之后调用该钩子,如果root实例挂在了一个文档内元素，当mounted被调用时vm.$el也在文档内。</li><li>activated：keep-alive组件激活时调用</li></ul><h2 id="6、DOM渲染在那个周期中已完成？"><a href="#6、DOM渲染在那个周期中已完成？" class="headerlink" title="6、DOM渲染在那个周期中已完成？"></a>6、DOM渲染在那个周期中已完成？</h2><p>DOM渲染在mounted中就已经完成了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基本内容和图解&quot;&gt;&lt;a href=&quot;#基本内容和图解&quot; class=&quot;headerlink&quot; title=&quot;基本内容和图解&quot;&gt;&lt;/a&gt;基本内容和图解&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;VUE生命周期共分为八个阶段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建前/后、载入前/后、</summary>
      
    
    
    
    <category term="前端学习笔记" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="VUE" scheme="http://example.com/categories/VUE/"/>
    
    <category term="Vue生命周期" scheme="http://example.com/categories/Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    
    
    <category term="Vue学习" scheme="http://example.com/tags/Vue%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Vue 学习笔记（一）MVVM模式</title>
    <link href="http://example.com/2022/02/03/vue-1/"/>
    <id>http://example.com/2022/02/03/vue-1/</id>
    <published>2022-02-03T09:04:13.000Z</published>
    <updated>2022-02-05T13:37:51.195Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、什么是MVVM"><a href="#一、什么是MVVM" class="headerlink" title="一、什么是MVVM"></a>一、什么是MVVM</h1><ul><li>MVVM<strong>是一种架构设计模式，是一种简化用户界面的事件驱动编程方式</strong>。</li><li>MVVM源自于MVC模式。</li><li>MVVM的核心是ViewModel层：<ul><li>该层向上与视图层进行双向数据绑定；</li><li>向下与Model层通过接口请求进行数据交互。</li></ul></li></ul><h1 id="二、MVVM的优点和好处"><a href="#二、MVVM的优点和好处" class="headerlink" title="二、MVVM的优点和好处"></a>二、MVVM的优点和好处</h1><ul><li>MVVM模式和MVC模式一样，主要目的是分离视图和模型。</li><li>低耦合、可复用、独立开发、可测试。</li></ul><h1 id="三、MVVM的组成部分"><a href="#三、MVVM的组成部分" class="headerlink" title="三、MVVM的组成部分"></a>三、MVVM的组成部分</h1><ul><li><p>视图层：用户界面，主要是HTML、CSS、Template；</p></li><li><p>ViewModel：JavaScript、Runtime、Compiler（核心枢纽）；</p></li><li><p>Model：指数据模型，泛指后端进行各种业务逻辑处理和数据操控，主要围绕数据库系统展开。</p></li><li><p><strong>ViewModel所封装出来的数据模型包括视图的状态和行为两部分，而Model层的数据模型是只包含状态的。</strong></p><ul><li>比如页面的这一块展示什么，那一块展示什么这些都属于视图状态；</li><li>页面加载进来发生什么。点击这一块发生什么，这一块滚动时发生什么都属于视图行为。</li></ul></li><li><p>开发者只需要处理和维护ViewModel，更新数据视图就会自动得到响应更新，真正实现事件驱动。</p></li><li><p>View层展现的不是Model层的数据，而是ViewModel的数据，由ViewModel负责与Model层交互，是前后端分离方案实施重要的一环。</p></li></ul><h1 id="四、双向绑定原理"><a href="#四、双向绑定原理" class="headerlink" title="四、双向绑定原理"></a>四、双向绑定原理</h1><ul><li>双向绑定：data和view之间的自动化处理。</li><li>data &gt; view：正向Objest.defineProperty(ES5的js api)/reflect.defineProperty（ES6）。api能监听到这个data的变化，监听到变化后会有一个回调函数，回调函数里写清data和view关系。</li><li>view &gt; data:input时间</li><li>Object.defineProperty和reflect.defineProperty区别：<ul><li>Objest.defineProperty：返回一个新的对象；</li><li>reflect.defineProperty：返回一个布尔值。</li></ul></li><li><strong>手写Object.defineProperty：</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    test:<span class="string">&quot;hello&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//对象已有的属性添加特性描述</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj,<span class="string">&quot;test&quot;</span>,&#123;</span><br><span class="line">    configurable:<span class="literal">true</span> | <span class="literal">false</span>,</span><br><span class="line">    enumerable:<span class="literal">true</span> | <span class="literal">false</span>,</span><br><span class="line">    value:任意类型的值,</span><br><span class="line">    writable:<span class="literal">true</span> | <span class="literal">false</span></span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 在对象中添加一个属性与存取描述符的示例</span></span><br><span class="line"><span class="keyword">var</span> bValue;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj,<span class="string">&quot;newKey&quot;</span>,&#123;</span><br><span class="line">    get : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bValue;</span><br><span class="line">    &#125;,</span><br><span class="line">    set : <span class="function"><span class="keyword">function</span>(<span class="params">newValue</span>)</span>&#123;</span><br><span class="line">       bValue = newValue;</span><br><span class="line">    &#125;,    </span><br><span class="line">    configurable:<span class="literal">true</span>,</span><br><span class="line">    enumerable:<span class="literal">true</span>,</span><br><span class="line">&#125;);</span><br><span class="line">obj.newKey = <span class="number">38</span>;</span><br></pre></td></tr></table></figure><ul><li>configurable 为 true 时，该属性描述符才能够被改变，同时该属性也能从对应的对象上被删除。默认为 false。</li><li>enumerable为true时，该属性才能够出现在对象的枚举属性中。默认为 false。</li><li>value属性对应的值。可以是任何有效的 JavaScript 值（数值，对象，函数等）。默认为 undefined。</li><li>writable为true时，value才能被赋值运算符改变。默认为 false。</li><li>get: 一个给属性提供 getter 的方法，如果没有 getter 则为 undefined。当访问该属性时，该方法会被执行，方法执行时没有参数传入，但是会传入this对象（由于继承关系，这里的this并不一定是定义该属性的对象）。默认为 undefined。</li><li>set:一个给属性提供 setter 的方法，如果没有 setter 则为 undefined。当属性值修改时，触发执行该方法。该方法将接受唯一参数，即该属性新的参数值。默认为 undefined。</li></ul><h1 id="五、使用的设计模式"><a href="#五、使用的设计模式" class="headerlink" title="五、使用的设计模式"></a>五、使用的设计模式</h1><ul><li><strong>观察者模式。</strong></li></ul><img lazyload src="/images/loading.svg" data-src="/2022/02/03/vue-1/pic1.png" class title="# tu1"><ul><li>实现一个数据监听器Observer，能够对数据对象的所有属性进行监听，如有变动可拿到最新值并通知订阅者（Dep）</li><li>实现一个指令解析器Compile，对每个元素节点的指令进行扫描和解析，根据指令模板替换数据，以及绑定相应的更新函数</li><li>实现一个Watcher，作为连接Observer和Compile的桥梁，能够订阅并收到每个属性变动的通知，执行指令绑定的相应回调函数，从而更新视图</li><li>mvvm入口函数，整合以上三者</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、什么是MVVM&quot;&gt;&lt;a href=&quot;#一、什么是MVVM&quot; class=&quot;headerlink&quot; title=&quot;一、什么是MVVM&quot;&gt;&lt;/a&gt;一、什么是MVVM&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;MVVM&lt;strong&gt;是一种架构设计模式，是一种简化用户界面的事件驱动</summary>
      
    
    
    
    <category term="前端学习笔记" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="VUE" scheme="http://example.com/categories/VUE/"/>
    
    <category term="MVVM" scheme="http://example.com/categories/MVVM/"/>
    
    
    <category term="Vue学习" scheme="http://example.com/tags/Vue%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>CSS学习笔记（十三）结构与布局</title>
    <link href="http://example.com/2022/02/03/css-13/"/>
    <id>http://example.com/2022/02/03/css-13/</id>
    <published>2022-02-02T16:34:01.000Z</published>
    <updated>2022-02-02T17:58:27.002Z</updated>
    
    <content type="html"><![CDATA[<h1 id="自适应内部元素"><a href="#自适应内部元素" class="headerlink" title="自适应内部元素"></a>自适应内部元素</h1><ul><li>关键字：min-content<ul><li>将解析为这个容器内部最大的不可断行元素的宽度</li></ul></li><li>把 figure 设置为恰当的宽度，并让它水平居中。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">figure</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: min-content;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="精确控制表格列宽"><a href="#精确控制表格列宽" class="headerlink" title="精确控制表格列宽"></a>精确控制表格列宽</h1><ul><li>对于不固定的内容，表格布局很难预测。</li><li>table-layout属性：<ul><li>默认值是 auto，其行为模式被称作自动表格布局算法。</li><li>接受另外一个值fixed，这个值的行为要明显可控一些。它把更多的控制权交给了网页开发者。</li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">table</span> &#123;</span><br><span class="line">    <span class="attribute">table-layout</span>: fixed;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="根据兄弟元素的数量来设置样式"><a href="#根据兄弟元素的数量来设置样式" class="headerlink" title="根据兄弟元素的数量来设置样式"></a>根据兄弟元素的数量来设置样式</h1><ul><li>在某些场景下，我们需要根据兄弟元素的总数来为它们设置样式。</li><li>对于只有一个列表项的特殊场景来说，解决方案显然就是 :only-child。</li><li>:only-child 等效于 :first-child:last-child。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">li</span><span class="selector-pseudo">:only-child</span> &#123;</span><br><span class="line">    <span class="comment">/* 只有一个列表项时的样式 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>:last-child 其实也是一个快捷写法，相当于 :nth-last-child(1)。</li><li>这个 1 其实是一个参数，我们可以根据需要来修改这个值。</li><li>li:first-child:nth-last-child(4)<ul><li>一个正好有四个列表项的列表中的第一个列表项。</li><li>可以用兄弟选择符（~）来命中它之后的所有兄弟元素：相当于在这个列表正好包含四个列表项时，命中它的每一项。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">li</span><span class="selector-pseudo">:first</span>-child<span class="selector-pseudo">:nth-last-child</span>(<span class="number">4</span>),</span><br><span class="line"><span class="selector-tag">li</span><span class="selector-pseudo">:first</span>-child<span class="selector-pseudo">:nth-last-child</span>(<span class="number">4</span>) ~ <span class="selector-tag">li</span> &#123;</span><br><span class="line"> <span class="comment">/* 当列表正好包含四项时，命中所有列表项 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="根据兄弟元素的数量范围来匹配元素"><a href="#根据兄弟元素的数量范围来匹配元素" class="headerlink" title="根据兄弟元素的数量范围来匹配元素"></a>根据兄弟元素的数量范围来匹配元素</h2><ul><li>:nth-child()可以用它来命中一个范围<ul><li>参数：an+b，n 表示一个变量，理论上的范围是 0 到 + ∞；</li><li>如果使用 n+b 这种形式的表达式（此时相当于 a 的取值为 1），那么不论 n 如何取值，这个表达式都无法产生一个小于 b 的值。</li><li>因此，n+b 这种形式的表达式可以选中从第 b 个开始的所有子元素。</li></ul></li></ul><h1 id="满幅的背景，定宽的内容"><a href="#满幅的背景，定宽的内容" class="headerlink" title="满幅的背景，定宽的内容"></a>满幅的背景，定宽的内容</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">footer</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">1em</span> <span class="built_in">calc</span>(<span class="number">50%</span> - <span class="number">450px</span>);</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h1><h2 id="基于绝对定位的解决方案"><a href="#基于绝对定位的解决方案" class="headerlink" title="基于绝对定位的解决方案"></a>基于绝对定位的解决方案</h2><ul><li>它要求元素具有固定的宽度和高度。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">main</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: -<span class="number">3em</span>; <span class="comment">/* 6/2 = 3 */</span></span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">9em</span>; <span class="comment">/* 18/2 = 9 */</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">18em</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">6em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">main</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="基于视口单位的解决方案"><a href="#基于视口单位的解决方案" class="headerlink" title="基于视口单位的解决方案"></a>基于视口单位的解决方案</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">main</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">18em</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">1em</span> <span class="number">1.5em</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">50vh</span> auto <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="基于-Flexbox-的解决方案"><a href="#基于-Flexbox-的解决方案" class="headerlink" title="基于 Flexbox 的解决方案"></a>基于 Flexbox 的解决方案</h2><ul><li>只需写两行声明即可：先给这个待居中元素的父元素设置 display: flex，再给这个元素自身设置我们再熟悉不过的 margin: auto。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">100vh</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">main</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;自适应内部元素&quot;&gt;&lt;a href=&quot;#自适应内部元素&quot; class=&quot;headerlink&quot; title=&quot;自适应内部元素&quot;&gt;&lt;/a&gt;自适应内部元素&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;关键字：min-content&lt;ul&gt;
&lt;li&gt;将解析为这个容器内部最大的不可断行元素的</summary>
      
    
    
    
    <category term="前端学习笔记" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="CSS" scheme="http://example.com/categories/CSS/"/>
    
    
    <category term="CSS学习" scheme="http://example.com/tags/CSS%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>CSS学习笔记（十二）用户体验（一）</title>
    <link href="http://example.com/2022/01/28/css-12/"/>
    <id>http://example.com/2022/01/28/css-12/</id>
    <published>2022-01-28T10:51:01.000Z</published>
    <updated>2022-02-02T16:22:11.433Z</updated>
    
    <content type="html"><![CDATA[<h1 id="二十九、选用合适的鼠标光标"><a href="#二十九、选用合适的鼠标光标" class="headerlink" title="二十九、选用合适的鼠标光标"></a>二十九、选用合适的鼠标光标</h1><ul><li>鼠标指针的用途不仅在于显示鼠标在屏幕上的位置，还可以告诉用户当前可以执行什么动作。</li></ul><h2 id="1、提示禁用状态"><a href="#1、提示禁用状态" class="headerlink" title="1、提示禁用状态"></a>1、提示禁用状态</h2><ul><li>提示某个控件因为某些原因而变得无法交互（即控件已被禁用），用这个光标就再合适不过。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:disabled</span>, <span class="selector-attr">[disabled]</span>, <span class="selector-attr">[aria-disabled=<span class="string">&quot;true&quot;</span>]</span> &#123;</span><br><span class="line">    <span class="attribute">cursor</span>: not-allowed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img lazyload src="/images/loading.svg" data-src="/2022/01/28/css-12/pic1.png" class title="# tu1"><h2 id="2、隐藏鼠标光标"><a href="#2、隐藏鼠标光标" class="headerlink" title="2、隐藏鼠标光标"></a>2、隐藏鼠标光标</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">video</span> &#123;</span><br><span class="line">    <span class="attribute">cursor</span>: <span class="built_in">url</span>(<span class="string">transparent.gif</span>);</span><br><span class="line">    <span class="attribute">cursor</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三十、扩大可点击区域"><a href="#三十、扩大可点击区域" class="headerlink" title="三十、扩大可点击区域"></a>三十、扩大可点击区域</h1><ul><li>针对按钮或者选择框扩大可点击区域，提高用户体验感。</li><li>使用内嵌投影+外边框实现。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">button</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">10px</span> solid transparent;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">3</span>) inset;</span><br><span class="line">    <span class="attribute">background-clip</span>: padding-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>box-shadow 可以同时指定多层投影。</li><li>伪元素同样可以代表其宿主元素来响应鼠标交互。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">button</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="comment">/* [其余样式] */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">button</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: -<span class="number">10px</span>; <span class="attribute">right</span>: -<span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: -<span class="number">10px</span>; <span class="attribute">left</span>: -<span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三十一、自定义复选框"><a href="#三十一、自定义复选框" class="headerlink" title="三十一、自定义复选框"></a>三十一、自定义复选框</h1><ul><li>新的伪类 :checked。<ul><li>这个伪类只在复选框被勾选时才会匹配，不论这个勾选状态是由用户交互触发，还是由脚本触发。</li></ul></li><li>可以基于复选框的勾选状态借助组合选择符来给其他元素设置样式。</li><li>当 <code>&lt;label&gt;</code> 元素与复选框关联之后，也可以起到触发开关的作用。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;checkbox&quot;</span>]</span> &#123;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">clip</span>: <span class="built_in">rect</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;checkbox&quot;</span>]</span> + <span class="selector-tag">label</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line"><span class="attribute">content</span>: <span class="string">&#x27;\a0&#x27;</span>;</span><br><span class="line"><span class="attribute">display</span>: inline-block;</span><br><span class="line"><span class="attribute">vertical-align</span>: .<span class="number">2em</span>;</span><br><span class="line"><span class="attribute">width</span>: .<span class="number">8em</span>;</span><br><span class="line"><span class="attribute">height</span>: .<span class="number">8em</span>;</span><br><span class="line"><span class="attribute">margin-right</span>: .<span class="number">2em</span>;</span><br><span class="line"><span class="attribute">border-radius</span>: .<span class="number">2em</span>;</span><br><span class="line"><span class="attribute">background</span>: silver;</span><br><span class="line"><span class="attribute">text-indent</span>: .<span class="number">15em</span>;</span><br><span class="line"><span class="attribute">line-height</span>: .<span class="number">65</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;checkbox&quot;</span>]</span><span class="selector-pseudo">:checked</span> + <span class="selector-tag">label</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line"><span class="attribute">content</span>: <span class="string">&#x27;\2713&#x27;</span>;</span><br><span class="line"><span class="attribute">background</span>: yellowgreen;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;checkbox&quot;</span>]</span><span class="selector-pseudo">:focus</span> + <span class="selector-tag">label</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line"><span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> .<span class="number">1em</span> .<span class="number">1em</span> <span class="number">#58a</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;checkbox&quot;</span>]</span><span class="selector-pseudo">:disabled</span> + <span class="selector-tag">label</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line"><span class="attribute">background</span>: gray;</span><br><span class="line"><span class="attribute">box-shadow</span>: none;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#555</span>;</span><br><span class="line"><span class="attribute">cursor</span>: not-allowed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img lazyload src="/images/loading.svg" data-src="/2022/01/28/css-12/pic2.png" class title="# tu1"><h2 id="开关式按钮"><a href="#开关式按钮" class="headerlink" title="开关式按钮"></a>开关式按钮</h2><ul><li>利用“复选框 hack”的思路来模拟。</li><li>只需要把 label 设置为按钮的样式即可，并不需要用到伪元素。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;checkbox&quot;</span>]</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">clip</span>: <span class="built_in">rect</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;checkbox&quot;</span>]</span> + <span class="selector-tag">label</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">padding</span>: .<span class="number">3em</span> .<span class="number">5em</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(<span class="number">#ddd</span>, <span class="number">#bbb</span>);</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">2</span>);</span><br><span class="line">    <span class="attribute">border-radius</span>: .<span class="number">3em</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">1px</span> white inset;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">1px</span> white;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;checkbox&quot;</span>]</span><span class="selector-pseudo">:checked</span> + <span class="selector-tag">label</span>,</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;checkbox&quot;</span>]</span><span class="selector-pseudo">:active</span> + <span class="selector-tag">label</span> &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: .<span class="number">05em</span> .<span class="number">1em</span> .<span class="number">2em</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">6</span>) inset;</span><br><span class="line">    <span class="attribute">border-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">3</span>);</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#bbb</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三十二、通过阴影来弱化背景"><a href="#三十二、通过阴影来弱化背景" class="headerlink" title="三十二、通过阴影来弱化背景"></a>三十二、通过阴影来弱化背景</h1><ul><li>通过一层半透明的遮罩层来把后面的一切整体调暗，以便凸显某个特定的 UI 元素，引导用户关注。</li><li>最常见的实现方法就是增加一个额外的 HTML 元素用于遮挡背景，这个方法稳定可靠，但需要增加一个额外的 HTML 元素，这意味着该效果无法由 CSS 单独实现。</li></ul><h2 id="伪元素方案"><a href="#伪元素方案" class="headerlink" title="伪元素方案"></a>伪元素方案</h2><ul><li>用伪元素来消除额外的 HTML 元素。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span><span class="selector-class">.dimmed</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">8</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>存在的问题：</strong><ul><li>这个方法的可移植性还不够好；因为 <code>&lt;body&gt;</code>元素上可能有其他需求已经占用了 ::before 伪元素；</li><li>在使用这个效果时，我们往往还需要一点 JavaScript 来给 <code>&lt;body&gt;</code> 添加 dimmed 这个类.</li><li>伪元素无法绑定独立的 JavaScript 事件处理函数。</li></ul></li></ul><h2 id="box-shadow方案"><a href="#box-shadow方案" class="headerlink" title="box-shadow方案"></a>box-shadow方案</h2><ul><li>对于简单的应用场景和产品原型来说，box-shadow 的扩张参数可以把元素的投影向各个方向延伸放大。</li><li><strong>存在的问题：</strong><ul><li>由于遮罩层的尺寸是与视口相关，而不是与页面相关的，当我们滚动页面时，遮罩层的边缘就露出来了，除非给它加上 position: fixed;这个样式，或者页面并没有长到需要滚动的程度。</li><li>当使用一个独立的元素（或伪元素）来实现遮罩层时，这个遮罩层不仅可以从视觉上把用户的注意力引导到关键元素上，还可以防止用户的鼠标与页面的其他部分发生交互，因为遮罩层会捕获所有指针事件。</li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">50vmax</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">8</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="backdrop方案"><a href="#backdrop方案" class="headerlink" title="backdrop方案"></a>backdrop方案</h2><ul><li>如果你想引导用户关注的元素就是一个模态的 <code>&lt;dialog&gt;</code> 元素，那么根据浏览器的默认样式，它会自带一个遮罩层。</li><li>借助 ::backdrop 伪元素，这个原生的遮罩层也是可以设置样式的。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dialog<span class="selector-pseudo">::backdrop</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">8</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三十三、通过模糊来弱化背景"><a href="#三十三、通过模糊来弱化背景" class="headerlink" title="三十三、通过模糊来弱化背景"></a>三十三、通过模糊来弱化背景</h1><ul><li>用一个额外的 HTML 元素来实现这个效果：<ul><li>需要把页面上除了关键元素之外的一切都包裹起来，这样就可以只对这个容器元素进行模糊处理了。</li><li><code>&lt;main&gt;</code> 元素在这里是极为合适的。</li></ul></li><li>结构代码基本上如下所示：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">main</span>&gt;</span>Bacon Ipsum dolor sit amet...<span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dialog</span>&gt;</span></span><br><span class="line">    O HAI, I&#x27;m a dialog. Click on me to dismiss.</span><br><span class="line"><span class="tag">&lt;/<span class="name">dialog</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 其他对话框都写在这里 --&gt;</span></span><br></pre></td></tr></table></figure><ul><li>每当弹出一个对话框，都需要给 <code>&lt;main&gt;</code> 元素增加一个类，以便对它应用模糊滤镜。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">main</span><span class="selector-class">.de-emphasized</span> &#123;</span><br><span class="line">    <span class="attribute">filter</span>: <span class="built_in">blur</span>(<span class="number">5px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用 brightness() 和 / 或 contrast() 滤镜：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">main</span><span class="selector-class">.de-emphasized</span> &#123;</span><br><span class="line">    <span class="attribute">filter</span>: <span class="built_in">blur</span>(<span class="number">3px</span>) <span class="built_in">contrast</span>(.<span class="number">8</span>) <span class="built_in">brightness</span>(.<span class="number">8</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;二十九、选用合适的鼠标光标&quot;&gt;&lt;a href=&quot;#二十九、选用合适的鼠标光标&quot; class=&quot;headerlink&quot; title=&quot;二十九、选用合适的鼠标光标&quot;&gt;&lt;/a&gt;二十九、选用合适的鼠标光标&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;鼠标指针的用途不仅在于显示鼠标在屏幕上的</summary>
      
    
    
    
    <category term="前端学习笔记" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="CSS" scheme="http://example.com/categories/CSS/"/>
    
    
    <category term="CSS学习" scheme="http://example.com/tags/CSS%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>CSS学习笔记（十一）字体排印（二）</title>
    <link href="http://example.com/2022/01/24/css-11/"/>
    <id>http://example.com/2022/01/24/css-11/</id>
    <published>2022-01-24T09:20:30.000Z</published>
    <updated>2022-01-28T10:53:11.946Z</updated>
    
    <content type="html"><![CDATA[<h1 id="二十三、调整tab的宽度"><a href="#二十三、调整tab的宽度" class="headerlink" title="二十三、调整tab的宽度"></a>二十三、调整tab的宽度</h1><h2 id="问题提出"><a href="#问题提出" class="headerlink" title="问题提出"></a>问题提出</h2><ul><li>由于tab导致文本间间隙过大进而影响视觉效果。</li></ul><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ul><li>tab-size属性：<ul><li>接受一个数字（表示字符数）或者一个长度值。</li><li>通常希望把它设置为 4（表示 4 个字符的宽度）或2。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pre &#123;</span><br><span class="line">    <span class="attribute">tab-size</span>: <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li>视觉效果对比：</li></ul><img lazyload src="/images/loading.svg" data-src="/2022/01/24/css-11/pic1.png" class title="# tu1"><img lazyload src="/images/loading.svg" data-src="/2022/01/24/css-11/pic2.png" class title="# tu1"><h1 id="二十四、连字"><a href="#二十四、连字" class="headerlink" title="二十四、连字"></a>二十四、连字</h1><h2 id="问题提出-1"><a href="#问题提出-1" class="headerlink" title="问题提出"></a>问题提出</h2><ul><li>由于字形间的相互影响，导致字形模糊不清。</li></ul><h2 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h2><ul><li>font-variant-ligatures属性：<ul><li>该属性专门用来控制连字效果的开启和关闭。</li><li>如果要启用所有可能的连字，需要同时指定这三个标识符。</li><li>如果要把 font-variant-ligatures 属性复位为初始值，应该使用 normal 而不是 none。</li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">font-variant-ligatures</span>: common-ligatures</span><br><span class="line">        discretionary-ligatures</span><br><span class="line">        historical-ligatures;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二十五、华丽的-amp-符号"><a href="#二十五、华丽的-amp-符号" class="headerlink" title="二十五、华丽的&amp;符号"></a>二十五、华丽的&amp;符号</h1><ul><li><p>通过@font-face规则实现基本的字体嵌入。</p></li><li><p>无法通过单一的字符实现不同样式的&amp;。</p></li></ul><h2 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案"></a>解决方案</h2><ul><li>原理：如果某款字体可用，但仅包括某几个字符，那它就只会用来显示这几个字符；而在显示其他字符时，浏览器就会回退到其他字体。</li><li>方法：创建一种只包含 &amp; 字形的 Web 字体，通过 @font-face 将其引入网页，然后把它排在字体队列中的第一位。<ul><li>@font-face 规则中的 src 描述符还可以接受 local()函数，用于指定本地字体的名称。</li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: Ampersand;</span><br><span class="line">    <span class="attribute">src</span>: <span class="built_in">local</span>(<span class="string">&#x27;Baskerville-Italic&#x27;</span>),</span><br><span class="line">    <span class="built_in">local</span>(<span class="string">&#x27;GoudyOldStyleT-Italic&#x27;</span>),</span><br><span class="line">    <span class="built_in">local</span>(<span class="string">&#x27;Palatino-Italic&#x27;</span>),</span><br><span class="line">    <span class="built_in">local</span>(<span class="string">&#x27;BookAntiqua-Italic&#x27;</span>);</span><br><span class="line">    unicode-range: U+<span class="number">26</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: Ampersand, Helvetica, sans-serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二十六、自定义下划线"><a href="#二十六、自定义下划线" class="headerlink" title="二十六、自定义下划线"></a>二十六、自定义下划线</h1><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><ul><li>CSS 渐变；</li><li>background-size；</li><li>text-shadow；</li><li>“条纹背景”。</li></ul><h2 id="问题提出-2"><a href="#问题提出-2" class="headerlink" title="问题提出"></a>问题提出</h2><ul><li>默认样式往往太过扎眼，更不要提在不同浏览器下的渲染效果大相径庭。</li></ul><h2 id="解决方案-3"><a href="#解决方案-3" class="headerlink" title="解决方案"></a>解决方案</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(gray, gray) no-repeat;</span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">100%</span> <span class="number">1px</span>;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">0</span> <span class="number">1.15em</span>;</span><br><span class="line">    <span class="attribute">text-shadow</span>: .<span class="number">05em</span> <span class="number">0</span> white, -.<span class="number">05em</span> <span class="number">0</span> white;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通过渐变和background-size两个属性来产生灰色细线，然后使用background-position调整位置。</li><li>由于这样产生的下划线会穿过某些字母（比如 p 和 y）的降部。所以此时设置两层与背景色相同的 text-shadow 来模拟下划线在遇到字母时会自动断开避让这种效果。</li><li>生成一条虚线下划线：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">90deg</span>,gray <span class="number">66%</span>, transparent <span class="number">0</span>) repeat-x;</span><br><span class="line">    <span class="attribute">background-size</span>: .<span class="number">2em</span> <span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">0</span> <span class="number">1em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二十七、现实中的文字效果"><a href="#二十七、现实中的文字效果" class="headerlink" title="二十七、现实中的文字效果"></a>二十七、现实中的文字效果</h1><h2 id="凸版印刷效果"><a href="#凸版印刷效果" class="headerlink" title="凸版印刷效果"></a>凸版印刷效果</h2><ul><li><strong>当我们在浅色背景上使用深色文字时（比如眼前的这个例子），在底部加上浅色投影通常效果最佳。</strong></li><li><strong>如果把文字和背景的颜色深度对调，在这种情况下，给文字顶部加深色投影是最佳方案。</strong></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">hsl</span>(<span class="number">210</span>, <span class="number">13%</span>, <span class="number">60%</span>);</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">hsl</span>(<span class="number">210</span>, <span class="number">13%</span>, <span class="number">30%</span>);</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">1px</span> <span class="built_in">hsla</span>(<span class="number">0</span>,<span class="number">0%</span>,<span class="number">100%</span>,.<span class="number">8</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img lazyload src="/images/loading.svg" data-src="/2022/01/24/css-11/pic3.png" class title="# tu1"><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">hsl</span>(<span class="number">210</span>, <span class="number">13%</span>, <span class="number">40%</span>);</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">hsl</span>(<span class="number">210</span>, <span class="number">13%</span>, <span class="number">75%</span>);</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">0</span> -<span class="number">1px</span> <span class="number">1px</span> black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img lazyload src="/images/loading.svg" data-src="/2022/01/24/css-11/pic4.png" class title="# tu1"><h2 id="空心字效果"><a href="#空心字效果" class="headerlink" title="空心字效果"></a>空心字效果</h2><ul><li>使用 text-shadows 属性的扩张参数就可让投影变大，看起来就像给文字勾边了一样。</li><li>方法一：使用多个 text-shadow 分别为这些投影加上不同方向的少量偏移。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: deeppink;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">1px</span> <span class="number">1px</span> black, -<span class="number">1px</span> -<span class="number">1px</span> black,</span><br><span class="line">                <span class="number">1px</span> -<span class="number">1px</span> black, -<span class="number">1px</span> <span class="number">1px</span> black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img lazyload src="/images/loading.svg" data-src="/2022/01/24/css-11/pic5.png" class title="# tu1"><ul><li>方法二：重叠多层轻微模糊的投影来模拟描边。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: deeppink;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">1px</span> black, <span class="number">0</span> <span class="number">0</span> <span class="number">1px</span> black,</span><br><span class="line">                <span class="number">0</span> <span class="number">0</span> <span class="number">1px</span> black, <span class="number">0</span> <span class="number">0</span> <span class="number">1px</span> black,</span><br><span class="line">                <span class="number">0</span> <span class="number">0</span> <span class="number">1px</span> black, <span class="number">0</span> <span class="number">0</span> <span class="number">1px</span> black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文字外发光效果"><a href="#文字外发光效果" class="headerlink" title="文字外发光效果"></a>文字外发光效果</h2><ul><li><strong>方法一</strong>：只需要准备几层重叠的 text-shadow 即可，不需要考虑偏移量，颜色也只需跟文字保持一致。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#203</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ffc</span>;</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">0</span> .<span class="number">1em</span>, <span class="number">0</span> <span class="number">0</span> .<span class="number">3em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img lazyload src="/images/loading.svg" data-src="/2022/01/24/css-11/pic6.png" class title="# tu1"><ul><li>依赖 text-shadow 来实现文字显示的做法无法实现平稳退化：如果浏览器不支持 text-shadow，那就什么字也看不见了。</li><li><strong>方法二</strong>：使用 CSS 滤镜来实现文字的模糊效果</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#203</span>;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">transition</span>: <span class="number">1s</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">filter</span>: <span class="built_in">blur</span>(.<span class="number">1em</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文字突起效果"><a href="#文字突起效果" class="headerlink" title="文字突起效果"></a>文字突起效果</h2><ul><li><strong>思路</strong>：使用一长串累加的投影，不设模糊并以 1px 的跨度逐渐错开，使颜色逐渐变暗，然后在底部加一层强烈模糊的暗投影，从而模拟完整的立体效果。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#58a</span>;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="built_in">hsl</span>(<span class="number">0</span>,<span class="number">0%</span>,<span class="number">85%</span>),</span><br><span class="line">                <span class="number">0</span> <span class="number">2px</span> <span class="built_in">hsl</span>(<span class="number">0</span>,<span class="number">0%</span>,<span class="number">80%</span>),</span><br><span class="line">                <span class="number">0</span> <span class="number">3px</span> <span class="built_in">hsl</span>(<span class="number">0</span>,<span class="number">0%</span>,<span class="number">75%</span>),</span><br><span class="line">                <span class="number">0</span> <span class="number">4px</span> <span class="built_in">hsl</span>(<span class="number">0</span>,<span class="number">0%</span>,<span class="number">70%</span>),</span><br><span class="line">                <span class="number">0</span> <span class="number">5px</span> <span class="built_in">hsl</span>(<span class="number">0</span>,<span class="number">0%</span>,<span class="number">65%</span>),</span><br><span class="line">                <span class="number">0</span> <span class="number">5px</span> <span class="number">10px</span> black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img lazyload src="/images/loading.svg" data-src="/2022/01/24/css-11/pic7.png" class title="# tu1"><h1 id="二十八、环形文字"><a href="#二十八、环形文字" class="headerlink" title="二十八、环形文字"></a>二十八、环形文字</h1><ul><li>使用svg解决。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;二十三、调整tab的宽度&quot;&gt;&lt;a href=&quot;#二十三、调整tab的宽度&quot; class=&quot;headerlink&quot; title=&quot;二十三、调整tab的宽度&quot;&gt;&lt;/a&gt;二十三、调整tab的宽度&lt;/h1&gt;&lt;h2 id=&quot;问题提出&quot;&gt;&lt;a href=&quot;#问题提出&quot; cla</summary>
      
    
    
    
    <category term="前端学习笔记" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="CSS" scheme="http://example.com/categories/CSS/"/>
    
    
    <category term="CSS学习" scheme="http://example.com/tags/CSS%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>CSS学习笔记（十）字体排印（一）</title>
    <link href="http://example.com/2022/01/15/css-10/"/>
    <id>http://example.com/2022/01/15/css-10/</id>
    <published>2022-01-15T13:31:28.000Z</published>
    <updated>2022-01-24T09:16:46.847Z</updated>
    
    <content type="html"><![CDATA[<h1 id="二十、连字符断行"><a href="#二十、连字符断行" class="headerlink" title="二十、连字符断行"></a>二十、连字符断行</h1><ul><li>在对文本进行两端对齐处理时，需要调整单词的间距，此时会出现“单词孤岛”现象。这个结果不仅看起来很糟糕，而且损伤了可读性。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: justify;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img lazyload src="/images/loading.svg" data-src="/2022/01/15/css-10/pic1.png" class title="# tu1"><ul><li>解决方案：<ul><li>hyphens属性：接受三个值none、manual、auto。</li><li>默认值为manual。</li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">hyphens</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img lazyload src="/images/loading.svg" data-src="/2022/01/15/css-10/pic2.png" class title="# tu1"><h1 id="二十一、插入换行"><a href="#二十一、插入换行" class="headerlink" title="二十一、插入换行"></a>二十一、插入换行</h1><ul><li><p>由于<code>&lt;dt&gt;</code>、<code>&lt;dd&gt;</code>都是块级元素，当我们需要指定其在一行时会造成困难，如下所示：</p></li><li><p>我们需要创建以下格式列表：</p><img lazyload src="/images/loading.svg" data-src="/2022/01/15/css-10/pic3.png" class title="# tu1"></li><li><p>应用如下代码和样式，会得到这样的效果。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>Name:<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>Lea Verou<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>Email:<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>lea@verou.me<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>Location:<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>Earth<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">dd</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img lazyload src="/images/loading.svg" data-src="/2022/01/15/css-10/pic4.png" class title="# tu1"></li><li><p>外加display:inline则会出现以下效果：</p></li></ul><img lazyload src="/images/loading.svg" data-src="/2022/01/15/css-10/pic5.png" class title="# tu1"><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ul><li>利用伪元素来实现。</li><li>有一个 Unicode 字符是专门代表换行符的：0x000A。在 CSS 中，这个字符可以写作 “\000A”，或简化为 “\A”。</li><li>我们可以用它来作为 ::after 伪元素的内容，并将其添加到每个 <code>&lt;dd&gt;</code> 元素的尾部。</li><li><strong>由于换行符会与空白符合并导致整体视觉效果压缩，所以需要保留换行符。</strong>（如果不保留，则结果与上图没有任何变化）</li><li>使用white-space: pre实现以上结果。</li></ul><h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h2><ul><li>针对单对单采取以下步骤：<br>  1、 将块级元素转换为行级元素；<br>  2、 利用伪元素给每个<code>&lt;dd&gt;</code>添加换行；<br>  3、 使用white-space:pre属性来处理空白。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">dt</span>, <span class="selector-tag">dd</span> &#123; <span class="attribute">display</span>: inline; &#125;</span><br><span class="line"><span class="selector-tag">dd</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">dd</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;\A&quot;</span>;</span><br><span class="line">    <span class="attribute">white-space</span>: pre;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img lazyload src="/images/loading.svg" data-src="/2022/01/15/css-10/pic6.png" class title="# tu1"><ul><li>如果有一对多情况则需要调整一下第二步：<ul><li>在每个前面有<code>&lt;dd&gt;</code>的<code>&lt;dd&gt;</code>头部插入逗号；</li><li>在每个前面有<code>&lt;dd&gt;</code>的<code>&lt;dt&gt;</code>头部插入换行。</li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">dt</span>, <span class="selector-tag">dd</span> &#123; <span class="attribute">display</span>: inline; &#125;</span><br><span class="line"><span class="selector-tag">dd</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">dd</span> + <span class="selector-tag">dt</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;\A&#x27;</span>;</span><br><span class="line">    <span class="attribute">white-space</span>: pre;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">dd</span> + <span class="selector-tag">dd</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;, &#x27;</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: normal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img lazyload src="/images/loading.svg" data-src="/2022/01/15/css-10/pic6.png" class title="# tu1"><h1 id="二十二、文本行的斑马条纹"><a href="#二十二、文本行的斑马条纹" class="headerlink" title="二十二、文本行的斑马条纹"></a>二十二、文本行的斑马条纹</h1><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><ul><li>CSS 渐变；</li><li>background-size；</li><li>“条纹背景”；</li><li>“灵活的背景定位”。</li></ul><h2 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h2><ul><li>无法在文本行中应用斑马纹效果；</li></ul><h2 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h2><ul><li>利用背景图像来做到模拟斑马纹的效果。</li><li>直接上代码：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">padding</span>: .<span class="number">5em</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.5</span>;</span><br><span class="line">    <span class="attribute">background</span>: beige;</span><br><span class="line">    <span class="attribute">background-size</span>: auto <span class="number">3em</span>;</span><br><span class="line">    <span class="attribute">background-origin</span>: content-box;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(<span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">2</span>) <span class="number">50%</span>,transparent <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1、 在利用background设置整体背景色后，利用background-image属性创建渐变来实现不同行不同颜色的效果。<br>2、 这里需要设置background-size为行高line-height的两倍，因为每个背景贴片需要覆盖两行代码（一行有实际颜色，一行为透明）。<br>3、 padding属性将整体的文本调整位置不至于太过于靠边影响视觉效果。<br>4、 由于文本调整了位置，这里我们需要将背景进行些调整：让它的默认外沿padding box调整为content box。</p><img lazyload src="/images/loading.svg" data-src="/2022/01/15/css-10/pic7.png" class title="# tu1">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;二十、连字符断行&quot;&gt;&lt;a href=&quot;#二十、连字符断行&quot; class=&quot;headerlink&quot; title=&quot;二十、连字符断行&quot;&gt;&lt;/a&gt;二十、连字符断行&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;在对文本进行两端对齐处理时，需要调整单词的间距，此时会出现“单词孤岛”现象。这个</summary>
      
    
    
    
    <category term="前端学习笔记" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="CSS" scheme="http://example.com/categories/CSS/"/>
    
    
    <category term="CSS学习" scheme="http://example.com/tags/CSS%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>CSS学习笔记（九）视觉效果</title>
    <link href="http://example.com/2022/01/11/css-9/"/>
    <id>http://example.com/2022/01/11/css-9/</id>
    <published>2022-01-11T12:16:16.000Z</published>
    <updated>2022-01-17T08:36:59.918Z</updated>
    
    <content type="html"><![CDATA[<h1 id="十五、单侧投影"><a href="#十五、单侧投影" class="headerlink" title="十五、单侧投影"></a>十五、单侧投影</h1><ul><li>使用 box-shadow 的方法是，指定三个长度值和一个颜色值：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">2px</span> <span class="number">3px</span> <span class="number">4px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>box-shadow绘制原理：</p><ul><li>以选定的元素a为准，在相同的位置处绘制尺寸相同的元素b（a，b颜色不同）；</li><li>将元素b进行移动，移动大小由参数决定（第一二个参数）；</li><li>使用高斯模糊算法进行模糊处理（第三个参数决定）；</li><li>模糊后的元素b与元素a交集的部分会被切除掉。</li></ul></li><li><p>如何只在元素的一侧设置投影。</p><ul><li>box-shadow的第四个长度参数，这个参数会根据你指定的值去扩大或缩小投影的尺寸</li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">5px</span> <span class="number">4px</span> -<span class="number">4px</span> black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="邻边投影"><a href="#邻边投影" class="headerlink" title="邻边投影"></a>邻边投影</h2><ul><li>如何在元素的两条边上设置投影。</li><li><strong>扩张半径应该设为模糊半径相反值的一半。</strong></li><li><strong>两个偏移量它们的值需要大于或等于模糊半径的一半。</strong></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">3px</span> <span class="number">3px</span> <span class="number">6px</span> -<span class="number">3px</span> black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="双侧投影"><a href="#双侧投影" class="headerlink" title="双侧投影"></a>双侧投影</h2><ul><li>将投影设置在元素的两条对边。</li><li>将单侧投影使用两次来达到效果</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">5px</span> <span class="number">0</span> <span class="number">5px</span> -<span class="number">5px</span> black,</span><br><span class="line">                -<span class="number">5px</span> <span class="number">0</span> <span class="number">5px</span> -<span class="number">5px</span> black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="十六、不规则投影"><a href="#十六、不规则投影" class="headerlink" title="十六、不规则投影"></a>十六、不规则投影</h1><ul><li>使用 drop-shadow 滤镜实现投影，任何非透明的部分都会被一视同仁地打上投影，包括文本，并且无法通过text-shadow:none; 来取消掉文本上的投影。</li></ul><h1 id="十七、染色效果"><a href="#十七、染色效果" class="headerlink" title="十七、染色效果"></a>十七、染色效果</h1><h2 id="基于滤镜的方案"><a href="#基于滤镜的方案" class="headerlink" title="基于滤镜的方案"></a>基于滤镜的方案</h2><ul><li>叠加滤镜效果的方式实现染色效果。</li><li>sepia()：它会给图片增加一种降饱和度的橙黄色染色效果，几乎所有像素的色相值会被收敛到 35~40。</li><li>saturate()：他会给每个像素提升饱和度。</li><li>hue-rotate()：把每个像素的色相以指定的度数进行偏移。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span>&#123;</span><br><span class="line">    <span class="attribute">filter</span>: <span class="built_in">sepia</span>(<span class="number">1</span>) <span class="built_in">saturate</span>(<span class="number">4</span>) <span class="built_in">hue-rotate</span>(<span class="number">295deg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img lazyload src="/images/loading.svg" data-src="/2022/01/11/css-9/pic1.png" class title="# tu1"><img lazyload src="/images/loading.svg" data-src="/2022/01/11/css-9/pic2.png" class title="# tu1"><h2 id="基于混合模式的方案"><a href="#基于混合模式的方案" class="headerlink" title="基于混合模式的方案"></a>基于混合模式的方案</h2><ul><li>“混合模式”控制了上层元素的颜色与下层颜色进行混合的方式。</li><li>用它来实现染色效果时，需要用到的混合模式<br>是 luminosity。<ul><li>luminosity 混合模式会保留上层元素的 HSL 亮度信息，并从它的下层吸取色相和饱和度信息。</li></ul></li><li>要对一个元素设置混合模式，有两个属性可以派上用场：<ul><li>mix-blend-mode 可以为整个元素设置混合模式；mix-blend-mode 是把整个元素向下进行混合，而不管它的下层是什么。</li><li>background-blend-mode 可以为每层背景单独指定混合模式。</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#something&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;tiger.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Rawrrr!&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">hsl</span>(<span class="number">335</span>, <span class="number">100%</span>, <span class="number">50%</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">    mix-blend-mode: luminosity;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tinted-image&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">style</span>=<span class="string">&quot;background-image:url(tiger.jpg)&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.tinted-image</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">640px</span>; <span class="attribute">height</span>: <span class="number">440px</span>;</span><br><span class="line">    <span class="attribute">background-size</span>: cover;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">hsl</span>(<span class="number">335</span>, <span class="number">100%</span>, <span class="number">50%</span>);</span><br><span class="line">    <span class="attribute">background</span>-blend-mode: luminosity;</span><br><span class="line">    <span class="attribute">transition</span>: .<span class="number">5s</span> background-color;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tinted-image</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="十八、毛玻璃效果"><a href="#十八、毛玻璃效果" class="headerlink" title="十八、毛玻璃效果"></a>十八、毛玻璃效果</h1><ul><li>半透明颜色背景：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">blockquote</span>&gt;</span></span><br><span class="line">        &quot;The only way to get rid of a temptation[...]&quot;</span><br><span class="line">        <span class="tag">&lt;<span class="name">footer</span>&gt;</span>－</span><br><span class="line">            <span class="tag">&lt;<span class="name">cite</span>&gt;</span></span><br><span class="line">                Oscar Wilde,</span><br><span class="line">                The Picture of Dorian Gray</span><br><span class="line">            <span class="tag">&lt;/<span class="name">cite</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&quot;tiger.jpg&quot;</span>) <span class="number">0</span> / cover fixed;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">main</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">hsla</span>(<span class="number">0</span>,<span class="number">0%</span>,<span class="number">100%</span>,.<span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img lazyload src="/images/loading.svg" data-src="/2022/01/11/css-9/pic3.png" class title="# tu1"><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ul><li>由于我们不能直接对元素本身进行模糊处理，就对一个伪元素进行处理，然后将其定位到元素的下层，它的背景将会无缝匹配 <code>&lt;body&gt;</code> 的背景。</li><li>首先，我们添加一个伪元素，将其绝对定位，并把所有偏移量置为 0，这样就可以将它完整地覆盖到 <code>&lt;main&gt;</code> 元素之上：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">main</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="comment">/* [其余样式] */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">main</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>; <span class="attribute">right</span>: <span class="number">0</span>; <span class="attribute">bottom</span>: <span class="number">0</span>; <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">5</span>); <span class="comment">/* 仅用于调试 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img lazyload src="/images/loading.svg" data-src="/2022/01/11/css-9/pic4.png" class title="# tu1"><ul><li>使用 z-index: -1; 来把伪元素移动到宿主元素的后面。</li></ul><img lazyload src="/images/loading.svg" data-src="/2022/01/11/css-9/pic5.png" class title="# tu1"><ul><li>现在该把半透明红色背景换掉了，换成跟背层完全匹配的背景。要实现这一点，我们要么把 <code>&lt;body&gt;</code> 的背景复制过来，要么把伪元素的背景声明合并过去。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>, <span class="selector-tag">main</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&quot;tiger.jpg&quot;</span>) <span class="number">0</span> / cover fixed;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">main</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">hsla</span>(<span class="number">0</span>,<span class="number">0%</span>,<span class="number">100%</span>,.<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">main</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>; <span class="attribute">right</span>: <span class="number">0</span>; <span class="attribute">bottom</span>: <span class="number">0</span>; <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">filter</span>: <span class="built_in">blur</span>(<span class="number">20px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img lazyload src="/images/loading.svg" data-src="/2022/01/11/css-9/pic6.png" class title="# tu1"><ul><li>模糊效果在中心区域看起来非常完美，但在接近边缘处会逐渐消退。这是因为模糊效果会削减实色像素所能覆盖的范围，削减的幅度正是模糊半径的长度。</li></ul><img lazyload src="/images/loading.svg" data-src="/2022/01/11/css-9/pic7.png" class title="# tu1"><ul><li>为了补偿这种情况，我们需要让伪元素相对其宿主元素的尺寸再向外扩大至少 20px（即它的模糊半径）。可以通过 -20px 的外边距来达到目的，由于不同浏览器的模糊算法可能存在差异，用一个更大的绝对值（比如 -30px）会更保险一些。</li><li>这个方法可以修复边缘模糊消退的问题，但现在的情况是有一圈模糊效果超出了容器，这让它看起来不像毛玻璃，而更像是玻璃脏了。</li></ul><img lazyload src="/images/loading.svg" data-src="/2022/01/11/css-9/pic8.png" class title="# tu1"><ul><li>不过幸运的是，这个问题也很容易修复：只要对 main 元素应用overflow: hidden;，就可以把多余的模糊区域裁切掉了。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>, <span class="selector-tag">main</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&quot;tiger.jpg&quot;</span>) <span class="number">0</span> / cover fixed;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">main</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">hsla</span>(<span class="number">0</span>,<span class="number">0%</span>,<span class="number">100%</span>,.<span class="number">3</span>);</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">main</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>; <span class="attribute">right</span>: <span class="number">0</span>; <span class="attribute">bottom</span>: <span class="number">0</span>; <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">filter</span>: <span class="built_in">blur</span>(<span class="number">20px</span>);</span><br><span class="line">    <span class="attribute">margin</span>: -<span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img lazyload src="/images/loading.svg" data-src="/2022/01/11/css-9/pic9.png" class title="# tu1">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;十五、单侧投影&quot;&gt;&lt;a href=&quot;#十五、单侧投影&quot; class=&quot;headerlink&quot; title=&quot;十五、单侧投影&quot;&gt;&lt;/a&gt;十五、单侧投影&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;使用 box-shadow 的方法是，指定三个长度值和一个颜色值：&lt;/li&gt;
&lt;/ul&gt;</summary>
      
    
    
    
    <category term="前端学习笔记" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="CSS" scheme="http://example.com/categories/CSS/"/>
    
    
    <category term="CSS学习" scheme="http://example.com/tags/CSS%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>CSS学习笔记（八）形状（四）</title>
    <link href="http://example.com/2022/01/10/css-8/"/>
    <id>http://example.com/2022/01/10/css-8/</id>
    <published>2022-01-10T14:26:56.000Z</published>
    <updated>2022-01-11T12:00:29.955Z</updated>
    
    <content type="html"><![CDATA[<h1 id="十三、梯形标签页"><a href="#十三、梯形标签页" class="headerlink" title="十三、梯形标签页"></a>十三、梯形标签页</h1><ul><li>在 CSS 中用 3D 旋转来模拟出这个效果。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">perspective</span>(.<span class="number">5em</span>) <span class="built_in">rotateX</span>(<span class="number">5deg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>对元素使用了 3D 变形之后，其内部的变形效应是“不可逆转”的。</li><li>所以唯一可行的途径就是把变形效果作用在伪元素上。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.tab</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">padding</span>: .<span class="number">5em</span> <span class="number">1em</span> .<span class="number">35em</span>;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tab</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>; <span class="comment">/* 用伪元素来生成一个矩形 */</span></span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>; <span class="attribute">right</span>: <span class="number">0</span>; <span class="attribute">bottom</span>: <span class="number">0</span>; <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: -<span class="number">1</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#58a</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scaleY</span>(<span class="number">1.3</span>) <span class="built_in">perspective</span>(.<span class="number">5em</span>)</span><br><span class="line">                <span class="built_in">rotateX</span>(<span class="number">5deg</span>);</span><br><span class="line">    <span class="attribute">transform-origin</span>: bottom;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>下面这段代码会给标签页添加图中的那些样式。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">nav</span> &gt; <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">padding</span>: .<span class="number">3em</span> <span class="number">1em</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">nav</span> &gt; <span class="selector-tag">a</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>; <span class="attribute">right</span>: <span class="number">0</span>; <span class="attribute">bottom</span>: <span class="number">0</span>; <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: -<span class="number">1</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(</span><br><span class="line">                        <span class="built_in">hsla</span>(<span class="number">0</span>,<span class="number">0%</span>,<span class="number">100%</span>,.<span class="number">6</span>),</span><br><span class="line">                        <span class="built_in">hsla</span>(<span class="number">0</span>,<span class="number">0%</span>,<span class="number">100%</span>,<span class="number">0</span>));</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">4</span>);</span><br><span class="line">    <span class="attribute">border-bottom</span>: none;</span><br><span class="line">    <span class="attribute">border-radius</span>: .<span class="number">5em</span> .<span class="number">5em</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> .<span class="number">15em</span> white inset;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">perspective</span>(.<span class="number">5em</span>) <span class="built_in">rotateX</span>(<span class="number">5deg</span>);</span><br><span class="line">    <span class="attribute">transform-origin</span>: bottom;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img lazyload src="/images/loading.svg" data-src="/2022/01/10/css-8/pic1.png" class title="# tu1"><h1 id="十四、简单的饼图"><a href="#十四、简单的饼图" class="headerlink" title="十四、简单的饼图"></a>十四、简单的饼图</h1><h2 id="基于transform的解决方案"><a href="#基于transform的解决方案" class="headerlink" title="基于transform的解决方案"></a>基于transform的解决方案</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pie&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.pie</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>; <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">background</span>: yellowgreen;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img lazyload src="/images/loading.svg" data-src="/2022/01/10/css-8/pic2.png" class title="# tu1"><ul><li><strong>把圆形的左右两部分指定为上述两种颜色，然后用伪元素覆盖上去，通过旋转来决定露出多大的扇区。</strong></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.pie</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>; <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">background</span>: yellowgreen;</span><br><span class="line">    <span class="attribute">background-image</span>:</span><br><span class="line">        <span class="built_in">linear-gradient</span>(to right, transparent <span class="number">50%</span>, <span class="number">#655</span> <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.pie</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>伪元素现在相对于整个饼图进行了重叠。不过现在还没有设置任何样式，它还起不到遮盖的作用：暂时只是一个透明的矩形。在开始为它设置样式之前，我们还要再做一些观察和分析。<ul><li>我们希望它能遮盖圆形中的棕色部分，<strong>因此应该给它指定绿色背景</strong>。在这里使用 background-color: inherit 声明可以避免代码的重复，因为我们希望它的背景色与其宿主元素保持一致。</li><li>我们希望它是绕着圆形的圆心来旋转的，对它自己来说，这个点就是它左边缘的中心点。因此，我们应该把它的 transform-origin 设置为 0 50%，或者干脆写成 left。</li><li>我们不希望它呈现出矩形的形状，否则它会突破整个饼图的圆形范围。因此要么给 .pie 设置 overflow: hidden 的样式，要么给这个伪元素指定合适的 border-radius 属性来把它变成一个半圆。</li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.pie</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>; <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">background</span>: yellowgreen;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">background-image</span>:</span><br><span class="line">        <span class="built_in">linear-gradient</span>(to right, transparent <span class="number">50%</span>, <span class="number">#655</span> <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.pie</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">0</span> <span class="number">100%</span> <span class="number">100%</span> <span class="number">0</span> / <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: inherit;</span><br><span class="line">    <span class="attribute">transform-origin</span>: left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>用虚线框表示伪元素覆盖位置。</li></ul><img lazyload src="/images/loading.svg" data-src="/2022/01/10/css-8/pic3.png" class title="# tu1"><ul><li>如果把 50%~100% 的比率看作另外一个问题，我们就会发现，可以使用上述技巧的一个反向版本来实现这个范围内的比率：设置一个棕色的伪元素，让它在 0 至 .5turn 的范围内旋转。因此，要得到一个 60% 比率的饼图，伪元素的代码可能是这样的：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.pie</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>; <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">background</span>: yellowgreen;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">background-image</span>:</span><br><span class="line">        <span class="built_in">linear-gradient</span>(to right, transparent <span class="number">50%</span>, <span class="number">#655</span> <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.pie</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">0</span> <span class="number">100%</span> <span class="number">100%</span> <span class="number">0</span> / <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#655</span>;</span><br><span class="line">    <span class="attribute">transform-origin</span>: left;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(.<span class="number">1turn</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>用 CSS 动画来实现一个饼图从 0 变化到 100% 的动画，从而得到一个炫酷的进度指示器：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.pie</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>; <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">background</span>: yellowgreen;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">background-image</span>:</span><br><span class="line">        <span class="built_in">linear-gradient</span>(to right, transparent <span class="number">50%</span>, <span class="number">#655</span> <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> spin &#123;</span><br><span class="line"> <span class="selector-tag">to</span> &#123; <span class="attribute">transform</span>: <span class="built_in">rotate</span>(.<span class="number">5turn</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> bg &#123;</span><br><span class="line"> <span class="number">50%</span> &#123; <span class="attribute">background</span>: <span class="number">#655</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.pie</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">0</span> <span class="number">100%</span> <span class="number">100%</span> <span class="number">0</span> / <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: inherit;</span><br><span class="line">    <span class="attribute">transform-origin</span>: left;</span><br><span class="line">    <span class="attribute">animation</span>: spin <span class="number">3s</span> linear infinite,</span><br><span class="line">                bg <span class="number">6s</span> step-end infinite;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;十三、梯形标签页&quot;&gt;&lt;a href=&quot;#十三、梯形标签页&quot; class=&quot;headerlink&quot; title=&quot;十三、梯形标签页&quot;&gt;&lt;/a&gt;十三、梯形标签页&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;在 CSS 中用 3D 旋转来模拟出这个效果。&lt;/li&gt;
&lt;/ul&gt;
&lt;figu</summary>
      
    
    
    
    <category term="前端学习笔记" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="CSS" scheme="http://example.com/categories/CSS/"/>
    
    
    <category term="CSS学习" scheme="http://example.com/tags/CSS%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>CSS学习笔记（七）形状（三）</title>
    <link href="http://example.com/2022/01/10/css-7/"/>
    <id>http://example.com/2022/01/10/css-7/</id>
    <published>2022-01-10T09:28:57.000Z</published>
    <updated>2022-01-10T14:27:46.153Z</updated>
    
    <content type="html"><![CDATA[<h1 id="十二、切角效果"><a href="#十二、切角效果" class="headerlink" title="十二、切角效果"></a>十二、切角效果</h1><ul><li>使用渐变来达到目的。</li><li>一个角使用一层渐变，两个角使用两层渐变，以此类推。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#58a</span>;</span><br><span class="line">    <span class="attribute">background</span>:</span><br><span class="line">        <span class="built_in">linear-gradient</span>(-<span class="number">45deg</span>, transparent <span class="number">15px</span>, <span class="number">#58a</span> <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img lazyload src="/images/loading.svg" data-src="/2022/01/10/css-7/pic1.png" class title="# tu1"><ul><li>左下角和右下角的切角效果。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#58a</span>;</span><br><span class="line">    <span class="attribute">background</span>:</span><br><span class="line">        <span class="built_in">linear-gradient</span>(-<span class="number">45deg</span>, transparent <span class="number">15px</span>, <span class="number">#58a</span> <span class="number">0</span>) right,</span><br><span class="line">        <span class="built_in">linear-gradient</span>(<span class="number">45deg</span>, transparent <span class="number">15px</span>, <span class="number">#655</span> <span class="number">0</span>) left;</span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">50%</span> <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img lazyload src="/images/loading.svg" data-src="/2022/01/10/css-7/pic2.png" class title="# tu1"><ul><li>四个角都切。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#58a</span>;</span><br><span class="line">    <span class="attribute">background</span>:</span><br><span class="line">        <span class="built_in">linear-gradient</span>(<span class="number">135deg</span>, transparent <span class="number">15px</span>, <span class="number">#58a</span> <span class="number">0</span>) top left,</span><br><span class="line">        <span class="built_in">linear-gradient</span>(-<span class="number">135deg</span>, transparent <span class="number">15px</span>, <span class="number">#58a</span> <span class="number">0</span>) top right,</span><br><span class="line">        <span class="built_in">linear-gradient</span>(-<span class="number">45deg</span>, transparent <span class="number">15px</span>, <span class="number">#58a</span> <span class="number">0</span>) bottom right,</span><br><span class="line">        <span class="built_in">linear-gradient</span>(<span class="number">45deg</span>, transparent <span class="number">15px</span>, <span class="number">#58a</span> <span class="number">0</span>) bottom left;</span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">50%</span> <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img lazyload src="/images/loading.svg" data-src="/2022/01/10/css-7/pic3.png" class title="# tu1"><ul><li>SCSS如下，可以直接调用，并传入2~5个参数。</li></ul><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> beveled-corners(<span class="variable">$bg</span>,<span class="variable">$tl</span>:<span class="number">0</span>, <span class="variable">$tr</span>:<span class="variable">$tl</span>, <span class="variable">$br</span>:<span class="variable">$tl</span>, <span class="variable">$bl</span>:<span class="variable">$tr</span>) &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="variable">$bg</span>;</span><br><span class="line">    <span class="attribute">background</span>:</span><br><span class="line">        linear-gradient(<span class="number">135deg</span>, transparent <span class="variable">$tl</span>, <span class="variable">$bg</span> <span class="number">0</span>)</span><br><span class="line">        top left,</span><br><span class="line">        linear-gradient(<span class="number">225deg</span>, transparent <span class="variable">$tr</span>, <span class="variable">$bg</span> <span class="number">0</span>)</span><br><span class="line">        top right,</span><br><span class="line">        linear-gradient(-<span class="number">45deg</span>, transparent <span class="variable">$br</span>, <span class="variable">$bg</span> <span class="number">0</span>)</span><br><span class="line">        bottom right,</span><br><span class="line">        linear-gradient(<span class="number">45deg</span>, transparent <span class="variable">$bl</span>, <span class="variable">$bg</span> <span class="number">0</span>)</span><br><span class="line">        bottom left;</span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">50%</span> <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="弧形切角"><a href="#弧形切角" class="headerlink" title="弧形切角"></a>弧形切角</h2><ul><li>使用径向渐变来替代上述线性渐变。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#58a</span>;</span><br><span class="line">    <span class="attribute">background</span>:</span><br><span class="line">        <span class="built_in">radial-gradient</span>(circle at top left,transparent <span class="number">15px</span>, <span class="number">#58a</span> <span class="number">0</span>) top left,</span><br><span class="line">        <span class="built_in">radial-gradient</span>(circle at top right,transparent <span class="number">15px</span>, <span class="number">#58a</span> <span class="number">0</span>) top right,</span><br><span class="line">        <span class="built_in">radial-gradient</span>(circle at bottom right,transparent <span class="number">15px</span>, <span class="number">#58a</span> <span class="number">0</span>) bottom right,</span><br><span class="line">        <span class="built_in">radial-gradient</span>(circle at bottom left,transparent <span class="number">15px</span>, <span class="number">#58a</span> <span class="number">0</span>) bottom left;</span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">50%</span> <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img lazyload src="/images/loading.svg" data-src="/2022/01/10/css-7/pic4.png" class title="# tu1"><h2 id="内联SVG与border-image方案"><a href="#内联SVG与border-image方案" class="headerlink" title="内联SVG与border-image方案"></a>内联SVG与border-image方案</h2><p>略</p><h2 id="裁切路径方案"><a href="#裁切路径方案" class="headerlink" title="裁切路径方案"></a>裁切路径方案</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#58a</span>;</span><br><span class="line">    <span class="attribute">clip-path</span>: <span class="built_in">polygon</span>(</span><br><span class="line">        <span class="number">20px</span> <span class="number">0</span>, <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">20px</span>) <span class="number">0</span>, <span class="number">100%</span> <span class="number">20px</span>,</span><br><span class="line">        <span class="number">100%</span> <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">20px</span>), <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">20px</span>) <span class="number">100%</span>,<span class="number">20px</span> <span class="number">100%</span>, <span class="number">0</span> <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">20px</span>), <span class="number">0</span> <span class="number">20px</span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="补充方案"><a href="#补充方案" class="headerlink" title="补充方案"></a>补充方案</h2><ul><li>corner-shape属性。</li><li>为容器的四个角指定 15px 的斜面切角。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">15px</span>;</span><br><span class="line">    corner-shape: bevel;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;十二、切角效果&quot;&gt;&lt;a href=&quot;#十二、切角效果&quot; class=&quot;headerlink&quot; title=&quot;十二、切角效果&quot;&gt;&lt;/a&gt;十二、切角效果&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;使用渐变来达到目的。&lt;/li&gt;
&lt;li&gt;一个角使用一层渐变，两个角使用两层渐变，以此类推</summary>
      
    
    
    
    <category term="前端学习笔记" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="CSS" scheme="http://example.com/categories/CSS/"/>
    
    
    <category term="CSS学习" scheme="http://example.com/tags/CSS%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>CSS学习笔记（五）形状（一）</title>
    <link href="http://example.com/2022/01/10/css-5/"/>
    <id>http://example.com/2022/01/10/css-5/</id>
    <published>2022-01-10T03:22:21.000Z</published>
    <updated>2022-01-10T08:21:00.048Z</updated>
    
    <content type="html"><![CDATA[<h1 id="九、自适应的椭圆"><a href="#九、自适应的椭圆" class="headerlink" title="九、自适应的椭圆"></a>九、自适应的椭圆</h1><h2 id="提出问题"><a href="#提出问题" class="headerlink" title="提出问题"></a>提出问题</h2><ul><li>如果它的宽高相等，就显示为一个圆；如果宽高不等，就显示为一个椭圆。</li></ul><h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><ul><li>border-radius：<strong>它可以单独指定水平和垂直半径，只要用一个斜杠（/）分隔这两个值即可</strong>。</li><li>同时，它不仅可以接受长度值，还可以接受百分比值。这个<br>百分比值会基于元素的尺寸进行解析，即宽度用于水平半径的解析，而高度用于垂直半径的解析。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="半椭圆"><a href="#半椭圆" class="headerlink" title="半椭圆"></a>半椭圆</h2><ul><li><p>border-radius是一个简写属性。我们可以为元素的每个角<br>指定不同的值，而且还有两种方法可以做到这一点。<strong>第一种方法就是使用它所对应的各个展开式属性：</strong></p><ul><li>border-top-left-radius</li><li>border-top-right-radius</li><li>border-bottom-right-radius</li><li>border-bottom-left-radius</li></ul></li><li><p>一次性提供用空格分开的多个值。</p><ul><li>如果我们传给它四个值，这四个值就会被分别从左上角开始以顺时针顺序应用到元素的各个拐角。</li><li>如果我们提供的值少于四个，则它们会以 CSS 的常规方式重复，类似于 border-width 的值。</li><li>如果只提供了三个值，则意味着第四个值与第二值相同；如果只有两个值，则意味着第三个值与第一个相同。</li><li>我们甚至可以为所有四个角提供完全不同的水平和垂直半径，方法是在斜杠前指定 1<del>4 个值，在斜杠后指定另外 1</del>4 个值。</li></ul></li><li><p>沿横轴劈开的上半椭圆：</p></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">   <span class="attribute">border-radius</span>: <span class="number">50%</span> / <span class="number">100%</span> <span class="number">100%</span> <span class="number">0</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>沿横轴劈开的下半椭圆：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">   <span class="attribute">border-radius</span>: <span class="number">50%</span> / <span class="number">0</span> <span class="number">0</span> <span class="number">100%</span> <span class="number">100%</span> ; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>沿横轴劈开的左半椭圆：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">   <span class="attribute">border-radius</span>: <span class="number">100%</span> <span class="number">0</span> <span class="number">0</span> <span class="number">100%</span> / <span class="number">50%</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>沿横轴劈开的右半椭圆：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">   <span class="attribute">border-radius</span>:  <span class="number">0</span> <span class="number">100%</span> <span class="number">100%</span> <span class="number">0</span>/ <span class="number">50%</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四分之一椭圆"><a href="#四分之一椭圆" class="headerlink" title="四分之一椭圆"></a>四分之一椭圆</h2><ul><li>其中一个角的水平和垂直半径值都需要是100%，而其他三个角都不能设为圆角。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">   <span class="attribute">border-radius</span>: <span class="number">100%</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;九、自适应的椭圆&quot;&gt;&lt;a href=&quot;#九、自适应的椭圆&quot; class=&quot;headerlink&quot; title=&quot;九、自适应的椭圆&quot;&gt;&lt;/a&gt;九、自适应的椭圆&lt;/h1&gt;&lt;h2 id=&quot;提出问题&quot;&gt;&lt;a href=&quot;#提出问题&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="前端学习笔记" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="CSS" scheme="http://example.com/categories/CSS/"/>
    
    
    <category term="CSS学习" scheme="http://example.com/tags/CSS%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>CSS学习笔记（四）背景与边框（四）</title>
    <link href="http://example.com/2022/01/08/css-4/"/>
    <id>http://example.com/2022/01/08/css-4/</id>
    <published>2022-01-08T07:07:26.000Z</published>
    <updated>2022-01-10T03:17:49.344Z</updated>
    
    <content type="html"><![CDATA[<h1 id="七、伪随机背景"><a href="#七、伪随机背景" class="headerlink" title="七、伪随机背景"></a>七、伪随机背景</h1><ul><li><strong>通过质数来增加随机真实性</strong>。</li></ul><h2 id="1、问题提出"><a href="#1、问题提出" class="headerlink" title="1、问题提出"></a>1、问题提出</h2><ul><li><strong>自然界中的事物都不是以无限平铺的方式存在的。即使重复，也往往伴随着多样性和随机性。</strong></li><li>当你注意到一个有辨识度的特征（比如，木纹上的节疤）在以固定的规律循环重复时，那它试图营造的自然随机性就会立刻崩塌。</li><li>重现大自然的随机性是一个挑战，因为 CSS 本身没有提供任何随机功能。</li></ul><h2 id="2、解决方案"><a href="#2、解决方案" class="headerlink" title="2、解决方案"></a>2、解决方案</h2><ul><li><strong>把这组条纹从一个平面拆散为多个图层：一种颜色作为底色，另三种颜色作为条纹，然后再让条纹以不同的间隔进行重复平铺。</strong></li><li>操作步骤：<ul><li>创建指定宽度的条纹；</li><li>使用background-size来控制条纹的间距。</li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#pic</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">hsl</span>(<span class="number">20</span>, <span class="number">40%</span>, <span class="number">90%</span>);</span><br><span class="line">    <span class="attribute">background-image</span>:</span><br><span class="line">        <span class="built_in">linear-gradient</span>(<span class="number">90deg</span>, <span class="number">#fb3</span> <span class="number">10px</span>, transparent <span class="number">0</span>),</span><br><span class="line">        <span class="built_in">linear-gradient</span>(<span class="number">90deg</span>, <span class="number">#ab4</span> <span class="number">20px</span>, transparent <span class="number">0</span>),</span><br><span class="line">        <span class="built_in">linear-gradient</span>(<span class="number">90deg</span>, <span class="number">#655</span> <span class="number">20px</span>, transparent <span class="number">0</span>);</span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">80px</span> <span class="number">100%</span>, <span class="number">60px</span> <span class="number">100%</span>, <span class="number">40px</span> <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img lazyload src="/images/loading.svg" data-src="/2022/01/08/css-4/pic1.png" class title="# tu1"><ul><li>因为最顶层贴片的重复规律最容易被察觉（它没有被任何东西遮挡），我们应该把平铺间距最大的贴片安排在最顶层。</li><li><strong>这个组合图案中第一个贴片的终点，就是各层背景图像以不同间距重复数次后再次统一对齐的点。</strong></li><li>因此，这里贴片的尺寸实际上就是所有 background-size 的最小公倍数，而 40、60 和 80的最小公倍数正是 240。</li><li><strong>为了让最小公倍数最大化，这些数字最好是“相对质数”。</strong></li><li>要达成相对质数，最简单的办法就是<strong>尽量选择质数</strong>，因为质数跟其他任意数字都是相对质数。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#pic</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">hsl</span>(<span class="number">20</span>, <span class="number">40%</span>, <span class="number">90%</span>);</span><br><span class="line">    <span class="attribute">background-image</span>:</span><br><span class="line">        <span class="built_in">linear-gradient</span>(<span class="number">90deg</span>, <span class="number">#fb3</span> <span class="number">11px</span>, transparent <span class="number">0</span>),</span><br><span class="line">        <span class="built_in">linear-gradient</span>(<span class="number">90deg</span>, <span class="number">#ab4</span> <span class="number">23px</span>, transparent <span class="number">0</span>),</span><br><span class="line">        <span class="built_in">linear-gradient</span>(<span class="number">90deg</span>, <span class="number">#655</span> <span class="number">41px</span>, transparent <span class="number">0</span>);</span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">41px</span> <span class="number">100%</span>, <span class="number">61px</span> <span class="number">100%</span>, <span class="number">83px</span> <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img lazyload src="/images/loading.svg" data-src="/2022/01/08/css-4/pic2.png" class title="# tu1"><h1 id="八、连续的图像边框"><a href="#八、连续的图像边框" class="headerlink" title="八、连续的图像边框"></a>八、连续的图像边框</h1><h2 id="1、提出问题"><a href="#1、提出问题" class="headerlink" title="1、提出问题"></a>1、提出问题</h2><ul><li>把一幅图案或图片应用为边框，而不是背景。</li><li>我们期望望出现在拐角处的图片区域是随着元素宽高和边框厚度的变化而变化的，并不想让图片的某个特定部分固定在拐角处。</li></ul><img lazyload src="/images/loading.svg" data-src="/2022/01/08/css-4/pic4.png" class title="# tu1"><ul><li><p>border-image 工作原理：</p><ul><li>九宫格伸缩法：把图片切割成九块，然后把它们应用到元素边框相应的边和角。<img lazyload src="/images/loading.svg" data-src="/2022/01/08/css-4/pic3.png" class title="# tu1"></li></ul></li><li><p>最简单的办法是使用两个 HTML 元素：<strong>一个元素用来把我们的石雕图片设为背景，另一个元素用来存放内容，并设置纯白背景，然后覆盖在前者之上</strong>：</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;something-meaningful&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        I have a nice stone art border,</span><br><span class="line">        don&#x27;t I look pretty?</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.something-meaningful</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">stone-art.jpg</span>);</span><br><span class="line">    <span class="attribute">background-size</span>: cover;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">1em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.something-meaningful</span> &gt; <span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: white;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">1em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果只用一个元素，我们能做到这个效果吗？</li></ul><h2 id="2、解决问题"><a href="#2、解决问题" class="headerlink" title="2、解决问题"></a>2、解决问题</h2><ul><li>主要思路：<strong>在石雕背景图片之上，再叠加一层纯白的实色背景。</strong></li><li>为了让下层的图片背景透过边框区域显示出来，我们需要给两层背景指定不同的 background-clip 值。</li><li>最后一个要点在于，我们只能在多重背景的最底层设置背景色，因此需要用一道从白色过渡到白色的 CSS 渐变来模拟出纯白实色背景的效果。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;something-meaningful&quot;</span>&gt;</span></span><br><span class="line">    I have a nice stone art border,</span><br><span class="line">    don&#x27;t I look pretty?</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.something-meaningful</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1em</span> solid transparent;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(white, white),</span><br><span class="line">                <span class="built_in">url</span>(<span class="string">stone-art.jpg</span>);</span><br><span class="line">    <span class="attribute">background-size</span>: cover;</span><br><span class="line">    <span class="attribute">background-clip</span>: padding-box, border-box;</span><br><span class="line">    <span class="attribute">background-origin</span>: border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这些新属性也是可以整合到 background 这个简写属性中的，这样可以显著地减少代码量：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.something-meaningful</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1em</span> solid transparent;</span><br><span class="line">    <span class="attribute">background</span>:</span><br><span class="line">        <span class="built_in">linear-gradient</span>(white, white) padding-box,</span><br><span class="line">        <span class="built_in">url</span>(<span class="string">stone-art.jpg</span>) border-box <span class="number">0</span> / cover;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现一个老式信封："><a href="#实现一个老式信封：" class="headerlink" title="实现一个老式信封："></a>实现一个老式信封：</h3><img lazyload src="/images/loading.svg" data-src="/2022/01/08/css-4/pic5.png" class title="# tu1"><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1em</span> solid transparent;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(white, white) padding-box,</span><br><span class="line">                <span class="built_in">repeating-linear-gradient</span>(-<span class="number">45deg</span>,</span><br><span class="line">                red <span class="number">0</span>, red <span class="number">12.5%</span>,</span><br><span class="line">                transparent <span class="number">0</span>, transparent <span class="number">25%</span>,</span><br><span class="line">                <span class="number">#58a</span> <span class="number">0</span>, <span class="number">#58a</span> <span class="number">37.5%</span>,</span><br><span class="line">                transparent <span class="number">0</span>, transparent <span class="number">50%</span>)</span><br><span class="line">                <span class="number">0</span> / <span class="number">5em</span> <span class="number">5em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>代码讲解：</p></li><li><p>创建两层背景：</p><ul><li>linear-gradient(white, white) padding-box：用于创建第一层背景纯白色覆盖在最上层；</li><li>repeating-linear-gradient：用于创建重复线性梯度渐变。效果如下：<img lazyload src="/images/loading.svg" data-src="/2022/01/08/css-4/pic6.png" class title="# tu1"></li></ul></li><li><p>repeating-linear-gradient中参数解释：</p><ul><li>-45deg：用于将整个条纹旋转-45度；</li><li>red 0,red 12%：从0~12.5%位置均为红色；</li><li>transparent 0, transparent 25%：从上次的最大位置至25%的位置均为透明；</li><li>#58a 0, #58a 37.5%：从上次的最大位置至37.5%的位置均为#58；</li><li>transparent 0, transparent 50%：从上次的最大位置至50%的位置均为透明。</li></ul></li><li><p>0/ ：background-position的值为0 0。</p></li><li><p>5em 5em：background-size大小。</p></li></ul><h3 id="蚂蚁行军效果"><a href="#蚂蚁行军效果" class="headerlink" title="蚂蚁行军效果"></a>蚂蚁行军效果</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> ants &#123; <span class="selector-tag">to</span> &#123; <span class="attribute">background-position</span>: <span class="number">100%</span> &#125; &#125;</span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid transparent;</span><br><span class="line">    <span class="attribute">background</span>:</span><br><span class="line">        <span class="built_in">linear-gradient</span>(white, white) padding-box,</span><br><span class="line">        <span class="built_in">repeating-linear-gradient</span>(-<span class="number">45deg</span>,</span><br><span class="line">            black <span class="number">0</span>, black <span class="number">25%</span>, white <span class="number">0</span>, white <span class="number">50%</span></span><br><span class="line">        ) <span class="number">0</span> / .<span class="number">6em</span> .<span class="number">6em</span>;</span><br><span class="line">    <span class="attribute">animation</span>: ants <span class="number">12s</span> linear infinite;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img lazyload src="/images/loading.svg" data-src="/2022/01/08/css-4/pic7.png" class title="# tu1">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;七、伪随机背景&quot;&gt;&lt;a href=&quot;#七、伪随机背景&quot; class=&quot;headerlink&quot; title=&quot;七、伪随机背景&quot;&gt;&lt;/a&gt;七、伪随机背景&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;通过质数来增加随机真实性&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h</summary>
      
    
    
    
    <category term="前端学习笔记" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="CSS" scheme="http://example.com/categories/CSS/"/>
    
    
    <category term="CSS学习" scheme="http://example.com/tags/CSS%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>CSS学习笔记（三）背景与边框（三）</title>
    <link href="http://example.com/2022/01/04/css-3/"/>
    <id>http://example.com/2022/01/04/css-3/</id>
    <published>2022-01-04T15:24:19.000Z</published>
    <updated>2022-01-08T07:27:16.862Z</updated>
    
    <content type="html"><![CDATA[<h1 id="六、复杂的背景图案"><a href="#六、复杂的背景图案" class="headerlink" title="六、复杂的背景图案"></a>六、复杂的背景图案</h1><ul><li><strong>水平渐变图案跟垂直渐变图案配合实现简单的蓝图网格图案。</strong></li></ul><h2 id="0、知识点"><a href="#0、知识点" class="headerlink" title="0、知识点"></a>0、知识点</h2><ul><li>linear-gradient(direction, color-stop1 position, color-stop2  position, …)：<ul><li>用于创建一个表示两种或多种颜色线性渐变的图片。</li><li>direction：用角度值指定渐变的方向（或角度）。</li><li>color-stop1, color-stop2,…：用于指定渐变的起止颜色。</li></ul></li><li>radial-gradient</li><li>repeating-linear-gradient</li><li>repeating-radial-gradient</li></ul><h2 id="1、网格"><a href="#1、网格" class="headerlink" title="1、网格"></a>1、网格</h2><ul><li><strong>把多个渐变图案组合起来，将其透过彼此的透明区域显现。</strong></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: white;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(<span class="number">90deg</span>,</span><br><span class="line">                    <span class="built_in">rgba</span>(<span class="number">200</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">5</span>) <span class="number">50%</span>, transparent <span class="number">0</span>),</span><br><span class="line">                <span class="built_in">linear-gradient</span>(</span><br><span class="line">                    <span class="built_in">rgba</span>(<span class="number">200</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">5</span>) <span class="number">50%</span>, transparent <span class="number">0</span>);</span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">30px</span> <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img lazyload src="/images/loading.svg" data-src="/2022/01/04/css-3/pic1.png" class title="# tu1"><ul><li><strong>网格中每个格子的大小可以调整，而网格线条的粗细同时保持固定。</strong></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#58a</span>;</span><br><span class="line">    <span class="attribute">background-image</span>:</span><br><span class="line">        <span class="built_in">linear-gradient</span>(white <span class="number">1px</span>, transparent <span class="number">0</span>),</span><br><span class="line">        <span class="built_in">linear-gradient</span>(<span class="number">90deg</span>, white <span class="number">1px</span>, transparent <span class="number">0</span>);</span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">30px</span> <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img lazyload src="/images/loading.svg" data-src="/2022/01/04/css-3/pic2.png" class title="# tu1"><ul><li><strong>把两幅不同线宽、不同颜色的网格图案叠加起来，得到一个更加逼真的蓝图网格。</strong></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#58a</span>;</span><br><span class="line">    <span class="attribute">background-image</span>:</span><br><span class="line">        <span class="built_in">linear-gradient</span>(white <span class="number">2px</span>, transparent <span class="number">0</span>),</span><br><span class="line">        <span class="built_in">linear-gradient</span>(<span class="number">90deg</span>, white <span class="number">2px</span>, transparent <span class="number">0</span>),</span><br><span class="line">        <span class="built_in">linear-gradient</span>(<span class="built_in">hsla</span>(<span class="number">0</span>,<span class="number">0%</span>,<span class="number">100%</span>,.<span class="number">3</span>) <span class="number">1px</span>,transparent <span class="number">0</span>),</span><br><span class="line">        <span class="built_in">linear-gradient</span>(<span class="number">90deg</span>, <span class="built_in">hsla</span>(<span class="number">0</span>,<span class="number">0%</span>,<span class="number">100%</span>,.<span class="number">3</span>) <span class="number">1px</span>,transparent <span class="number">0</span>);</span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">75px</span> <span class="number">75px</span>, <span class="number">75px</span> <span class="number">75px</span>,</span><br><span class="line">    <span class="number">15px</span> <span class="number">15px</span>, <span class="number">15px</span> <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img lazyload src="/images/loading.svg" data-src="/2022/01/04/css-3/pic3.png" class title="# tu1"><h2 id="2、波点"><a href="#2、波点" class="headerlink" title="2、波点"></a>2、波点</h2><ul><li><strong>径向渐变创建最简单的圆点的阵列。</strong></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#655</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">radial-gradient</span>(tan <span class="number">30%</span>, transparent <span class="number">0</span>);</span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">30px</span> <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img lazyload src="/images/loading.svg" data-src="/2022/01/04/css-3/pic4.png" class title="# tu1"><ul><li><strong>通过两层圆点阵列图案的错位排列可以实现真正的波点图案，第二个背景图片的偏移量正好等于贴片宽高的一半。</strong></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#655</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: </span><br><span class="line">        <span class="built_in">radial-gradient</span>(tan <span class="number">30%</span>, transparent <span class="number">0</span>),</span><br><span class="line">        <span class="built_in">radial-gradient</span>(tan <span class="number">30%</span>, transparent <span class="number">0</span>);</span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">30px</span> <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">0</span> <span class="number">0</span>, <span class="number">15px</span> <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img lazyload src="/images/loading.svg" data-src="/2022/01/04/css-3/pic5.png" class title="# tu1"><h2 id="3、棋盘"><a href="#3、棋盘" class="headerlink" title="3、棋盘"></a>3、棋盘</h2><ul><li>棋盘图案是可以通过平铺生成的，平铺成这个图案的典型贴片包含两种不同颜色的方块，且相互间隔。</li><li>实现技巧在于用两个直角三角形来拼合出一个方块。</li><li>创建直角三角形渐变。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#eee</span>;</span><br><span class="line">    <span class="attribute">background-image</span>:</span><br><span class="line">        <span class="built_in">linear-gradient</span>(<span class="number">45deg</span>, transparent <span class="number">75%</span>, <span class="number">#bbb</span> <span class="number">0</span>);</span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">30px</span> <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img lazyload src="/images/loading.svg" data-src="/2022/01/04/css-3/pic5.png" class title="# tu1"><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#eee</span>;</span><br><span class="line">    <span class="attribute">background-image</span>:</span><br><span class="line">        <span class="built_in">linear-gradient</span>(<span class="number">45deg</span>, <span class="number">#bbb</span> <span class="number">25%</span>, transparent <span class="number">0</span>),</span><br><span class="line">        <span class="built_in">linear-gradient</span>(<span class="number">45deg</span>, transparent <span class="number">75%</span>, <span class="number">#bbb</span> <span class="number">0</span>);</span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">30px</span> <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img lazyload src="/images/loading.svg" data-src="/2022/01/04/css-3/pic6.png" class title="# tu1"><ul><li>把第二层渐变在水平和垂直方向均移动贴片长度的一半，把它们拼合成一个完整的方块。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#eee</span>;</span><br><span class="line">    <span class="attribute">background-image</span>:</span><br><span class="line">        <span class="built_in">linear-gradient</span>(<span class="number">45deg</span>, <span class="number">#bbb</span> <span class="number">25%</span>, transparent <span class="number">0</span>),</span><br><span class="line">        <span class="built_in">linear-gradient</span>(<span class="number">45deg</span>, transparent <span class="number">75%</span>, <span class="number">#bbb</span> <span class="number">0</span>);</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">0</span> <span class="number">0</span>, <span class="number">15px</span> <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">30px</span> <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img lazyload src="/images/loading.svg" data-src="/2022/01/04/css-3/pic7.png" class title="# tu1"><ul><li>要把现有的这一组渐变重复一份，创建出另一组正方形，并且偏移它们的定位值。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#eee</span>;</span><br><span class="line">    <span class="attribute">background-image</span>:</span><br><span class="line">        <span class="built_in">linear-gradient</span>(<span class="number">45deg</span>, <span class="number">#bbb</span> <span class="number">25%</span>, transparent <span class="number">0</span>),</span><br><span class="line">        <span class="built_in">linear-gradient</span>(<span class="number">45deg</span>, transparent <span class="number">75%</span>, <span class="number">#bbb</span> <span class="number">0</span>),</span><br><span class="line">        <span class="built_in">linear-gradient</span>(<span class="number">45deg</span>, <span class="number">#bbb</span> <span class="number">25%</span>, transparent <span class="number">0</span>),</span><br><span class="line">        <span class="built_in">linear-gradient</span>(<span class="number">45deg</span>, transparent <span class="number">75%</span>, <span class="number">#bbb</span> <span class="number">0</span>);</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">0</span> <span class="number">0</span>, <span class="number">15px</span> <span class="number">15px</span>,</span><br><span class="line">                        <span class="number">15px</span> <span class="number">15px</span>, <span class="number">30px</span> <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">30px</span> <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img lazyload src="/images/loading.svg" data-src="/2022/01/04/css-3/pic8.png" class title="# tu1"><ul><li>以把深灰色改成半透明的黑色，这样我们只需要修改底色就可以改变整个棋盘的色调，不需要单独调整各层渐变的色标了。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#eee</span>;</span><br><span class="line">    <span class="attribute">background-image</span>:</span><br><span class="line">    <span class="built_in">linear-gradient</span>(<span class="number">45deg</span>,</span><br><span class="line">        <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">25</span>) <span class="number">25%</span>, transparent <span class="number">0</span>,</span><br><span class="line">        transparent <span class="number">75%</span>, <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">25</span>) <span class="number">0</span>),</span><br><span class="line">    <span class="built_in">linear-gradient</span>(<span class="number">45deg</span>,</span><br><span class="line">        <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">25</span>) <span class="number">25%</span>, transparent <span class="number">0</span>,</span><br><span class="line">        transparent <span class="number">75%</span>, <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">25</span>) <span class="number">0</span>);</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">0</span> <span class="number">0</span>, <span class="number">15px</span> <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">30px</span> <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img lazyload src="/images/loading.svg" data-src="/2022/01/04/css-3/pic9.png" class title="# tu1">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;六、复杂的背景图案&quot;&gt;&lt;a href=&quot;#六、复杂的背景图案&quot; class=&quot;headerlink&quot; title=&quot;六、复杂的背景图案&quot;&gt;&lt;/a&gt;六、复杂的背景图案&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;水平渐变图案跟垂直渐变图案配合实现简单的蓝图网格图案。&lt;</summary>
      
    
    
    
    <category term="前端学习笔记" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="CSS" scheme="http://example.com/categories/CSS/"/>
    
    
    <category term="CSS学习" scheme="http://example.com/tags/CSS%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>CSS学习笔记（二）背景与边框（二）</title>
    <link href="http://example.com/2022/01/03/css-2/"/>
    <id>http://example.com/2022/01/03/css-2/</id>
    <published>2022-01-02T16:37:52.000Z</published>
    <updated>2022-01-08T07:26:47.344Z</updated>
    
    <content type="html"><![CDATA[<h1 id="五、条纹背景"><a href="#五、条纹背景" class="headerlink" title="五、条纹背景"></a>五、条纹背景</h1><h2 id="难题"><a href="#难题" class="headerlink" title="难题"></a>难题</h2><ul><li>不论是在网页设计中，还是在其他传统媒介中（比如杂志和墙纸等），各种尺寸、颜色、角度的条纹图案在视觉设计中无处不在。</li><li>要想在网页中实现条纹图案，其过程还远远不够理想。通常，我们的方法是创建一个单独的位图文件，然后每次需要做些调整时，都用图像编辑器来修改它。</li><li>可能有人试过用 SVG 来取代位图，但这样还是会有一个独立的文件，而且它的语法也远远不够友好。</li><li>如果可以直接在 CSS 中创建条纹图案，那该有多棒啊！你可能会惊讶地发现，我们居然真的可以。</li></ul><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ul><li>假设我们有一条基本的垂直线性渐变，颜色从 #fb3 过渡到 #58a。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">#fb3</span>, <span class="number">#58a</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img lazyload src="/images/loading.svg" data-src="/2022/01/03/css-2/pic1.png" class title="# tu1"><ul><li>现在，让我们试着把这两个色标拉近一点。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">#fb3</span> <span class="number">20%</span>, <span class="number">#58a</span> <span class="number">80%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img lazyload src="/images/loading.svg" data-src="/2022/01/03/css-2/pic1.png" class title="# tu1"><ul><li>现在容器顶部的 20% 区域被填充为 #fb3 实色，而底部 20% 区域被填充为 #58a 实色。<strong>真正的渐变只出现在容器 60% 的高度区域</strong>。</li><li>如果我们把两个色标继续拉近（分别改为 40% 和 60%），那真正的渐变区域就变得更窄了。</li><li><strong>如果多个色标具有相同的位置，它们会产生一个无限小的过渡区域，过渡的起止色分别是第一个和最后一个指定值。</strong>从效果上看，颜色会在那个位置突然变化，而不是一个平滑的渐变过程。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">#fb3</span> <span class="number">50%</span>, <span class="number">#58a</span> <span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>因为渐变是一种由代码生成的图像，我们能像对待其他任何背景图像那样对待它，而且还可以通过 background-size 来调整其尺寸。</strong></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">#fb3</span> <span class="number">50%</span>, <span class="number">#58a</span> <span class="number">50%</span>);</span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">100%</span> <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img lazyload src="/images/loading.svg" data-src="/2022/01/03/css-2/pic3.png" class title="# tu1"><ul><li>我们还可以用相同的方法来创建不等宽的条纹，只需调整色标的位置值即可。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">#fb3</span> <span class="number">30%</span>, <span class="number">#58a</span> <span class="number">30%</span>);</span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">100%</span> <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img lazyload src="/images/loading.svg" data-src="/2022/01/03/css-2/pic4.png" class title="# tu1"><ul><li>为了避免每次改动条纹宽度时都要修改两个数字，我们可以再次从规范那里找到捷径。<ul><li><strong>如果某个色标的位置值比整个列表中在它之前的色标的位置值都要小，则该色标的位置值会被设置为它前面所有色标位置值的最大值</strong>。</li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">#fb3</span> <span class="number">30%</span>, <span class="number">#58a</span> <span class="number">0</span>);</span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">100%</span> <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果要创建超过两种颜色的条纹，也是很容易的。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">#fb3</span> <span class="number">33.3%</span>,<span class="number">#58a</span> <span class="number">0</span>, <span class="number">#58a</span> <span class="number">66.6%</span>, yellowgreen <span class="number">0</span>);</span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">100%</span> <span class="number">45px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img lazyload src="/images/loading.svg" data-src="/2022/01/03/css-2/pic5.png" class title="# tu1"><h2 id="垂直条纹"><a href="#垂直条纹" class="headerlink" title="垂直条纹"></a>垂直条纹</h2><ul><li>垂直条纹的代码跟水平条纹几乎是一样的，差别主要在于：<strong>我们需要在开头加上一个额外的参数来指定渐变的方向。</strong></li><li>在水平条纹的代码中，我们其实也可以加上这个参数，只不过它的默认值 to bottom 本来就跟我们的意图一致，于是就省略了。</li><li>最后，我们还需要把 background-size 的值颠倒一下。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to right, /* 或 <span class="number">90deg</span> */<span class="number">#fb3</span> <span class="number">50%</span>, <span class="number">#58a</span> <span class="number">0</span>);</span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">30px</span> <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img lazyload src="/images/loading.svg" data-src="/2022/01/03/css-2/pic6.png" class title="# tu1"><h2 id="斜向条纹"><a href="#斜向条纹" class="headerlink" title="斜向条纹"></a>斜向条纹</h2><ul><li>如果我们再次改变 background-size 的值和渐变的方向，是不是就可以得到斜向（比如45°）的条纹图案。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">45deg</span>,<span class="number">#fb3</span> <span class="number">50%</span>, <span class="number">#58a</span> <span class="number">0</span>);</span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">30px</span> <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img lazyload src="/images/loading.svg" data-src="/2022/01/03/css-2/pic7.png" class title="# tu1"><ul><li>这个办法行不通。原因在于我们<strong>只是把每个“贴片”内部的渐变旋转了 45°，而不是把整个重复的背景都旋转了</strong>。</li><li>单个贴片包含了四条条纹，而不是两条，只有这样才有可能做到无缝拼接它正是我们需要在 CSS 代码中重新实现的贴片，因此我们需要增加一些色标。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">45deg</span>,</span><br><span class="line">                <span class="number">#fb3</span> <span class="number">25%</span>, <span class="number">#58a</span> <span class="number">0</span>, <span class="number">#58a</span> <span class="number">50%</span>,</span><br><span class="line">                <span class="number">#fb3</span> <span class="number">0</span>, <span class="number">#fb3</span> <span class="number">75%</span>, <span class="number">#58a</span> <span class="number">0</span>);</span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">30px</span> <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img lazyload src="/images/loading.svg" data-src="/2022/01/03/css-2/pic8.png" class title="# tu1"><h2 id="更好的斜向条纹"><a href="#更好的斜向条纹" class="headerlink" title="更好的斜向条纹"></a>更好的斜向条纹</h2><ul><li>设置任意角度倾斜：<ul><li>repeating-gradient()和repeating-radial-gradient()方法。</li><li><strong>色标是无限循环重复的，直到填满整个背景</strong>。</li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">repeating-linear-gradient</span>(<span class="number">45deg</span>,<span class="number">#fb3</span>, <span class="number">#58a</span> <span class="number">30px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img lazyload src="/images/loading.svg" data-src="/2022/01/03/css-2/pic9.png" class title="# tu1"><ul><li>将斜向45°条纹修改为60°。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">repeating-linear-gradient</span>(<span class="number">60deg</span>,<span class="number">#fb3</span>, <span class="number">#fb3</span> <span class="number">15px</span>, <span class="number">#58a</span> <span class="number">0</span>, <span class="number">#58a</span> <span class="number">30px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img lazyload src="/images/loading.svg" data-src="/2022/01/03/css-2/pic10.png" class title="# tu1"><h2 id="灵活的同色系条纹"><a href="#灵活的同色系条纹" class="headerlink" title="灵活的同色系条纹"></a>灵活的同色系条纹</h2><ul><li>不再为每种条纹单独指定颜色，而是把最深的颜色指定为背景色，同时把半透明白色的条纹叠加在背景色之上来得到浅色条纹。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#58a</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">repeating-linear-gradient</span>(<span class="number">30deg</span>,</span><br><span class="line">                    <span class="built_in">hsla</span>(<span class="number">0</span>,<span class="number">0%</span>,<span class="number">100%</span>,.<span class="number">1</span>),</span><br><span class="line">                    <span class="built_in">hsla</span>(<span class="number">0</span>,<span class="number">0%</span>,<span class="number">100%</span>,.<span class="number">1</span>) <span class="number">15px</span>,</span><br><span class="line">                    transparent <span class="number">0</span>, transparent <span class="number">30px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img lazyload src="/images/loading.svg" data-src="/2022/01/03/css-2/pic11.png" class title="# tu1">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;五、条纹背景&quot;&gt;&lt;a href=&quot;#五、条纹背景&quot; class=&quot;headerlink&quot; title=&quot;五、条纹背景&quot;&gt;&lt;/a&gt;五、条纹背景&lt;/h1&gt;&lt;h2 id=&quot;难题&quot;&gt;&lt;a href=&quot;#难题&quot; class=&quot;headerlink&quot; title=&quot;难题&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="前端学习笔记" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="CSS" scheme="http://example.com/categories/CSS/"/>
    
    
    <category term="CSS学习" scheme="http://example.com/tags/CSS%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>CSS学习笔记（一）背景与边框（一）</title>
    <link href="http://example.com/2021/12/30/css-1/"/>
    <id>http://example.com/2021/12/30/css-1/</id>
    <published>2021-12-30T08:41:09.000Z</published>
    <updated>2022-01-02T16:36:10.905Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">78</span>, <span class="number">78</span>, <span class="number">85</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line">        #pic&#123;</span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">            <span class="attribute">top</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">left</span>: <span class="number">100px</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;pic&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="一、半透明边框"><a href="#一、半透明边框" class="headerlink" title="一、半透明边框"></a>一、半透明边框</h1><ul><li><p>假设给一个容器设置一层白色背景和一道半透明的边框。body的背景会从它的半透明边框透上来。</p></li><li><p>该代码会得到以下效果：</p></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#pic</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">250px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">10px</span> solid <span class="built_in">hsla</span>(<span class="number">0</span>,<span class="number">0%</span>,<span class="number">100%</span>,.<span class="number">5</span>);</span><br><span class="line">    <span class="attribute">background</span>: white;</span><br><span class="line">    <span class="attribute">background-clip</span>: padding-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img lazyload src="/images/loading.svg" data-src="/2021/12/30/css-1/pic1.png" class title="# tu1"><ul><li>通过background-clip属性来指定背景绘制区域。<ul><li>background-clip属性默认值为border-box：背景绘制在边框方框内。</li><li>padding-box：将背景绘制在衬距方框内。</li></ul></li></ul><h1 id="二、多重边框"><a href="#二、多重边框" class="headerlink" title="二、多重边框"></a>二、多重边框</h1><h2 id="1、box-shadow方案"><a href="#1、box-shadow方案" class="headerlink" title="1、box-shadow方案"></a>1、box-shadow方案</h2><ul><li><strong>利用box-shadow的第四个参数指定正值或负值来让投影面积加大或减小</strong>。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#pic</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: yellowgreen;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="number">#655</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img lazyload src="/images/loading.svg" data-src="/2021/12/30/css-1/pic2.png" class title="# tu1"><ul><li><strong>box-shadow支持逗号分隔语法，可以创建任意数量的投影。</strong></li><li>box-shadow 是层层叠加的，第一层投影位于最顶层，依次类推。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#pic</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: yellowgreen;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="number">#655</span>, <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">15px</span> deeppink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img lazyload src="/images/loading.svg" data-src="/2021/12/30/css-1/pic3.png" class title="# tu1"><h2 id="2、outline方案"><a href="#2、outline方案" class="headerlink" title="2、outline方案"></a>2、outline方案</h2><ul><li>用于设置两层边框：先设置一层常规边框，再加上outline属性来产生外层的边框。</li><li><strong>优点：在于边框样式十分灵活，不像box-shadow方案只能模拟实线边框。</strong></li><li>以下代码也可以实现上图效果。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#pic</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: yellowgreen;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">10px</span> solid <span class="number">#655</span>;</span><br><span class="line">    <span class="attribute">outline</span>: <span class="number">5px</span> solid deeppink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三、灵活的背景定位"><a href="#三、灵活的背景定位" class="headerlink" title="三、灵活的背景定位"></a>三、灵活的背景定位</h1><ul><li><strong>难题：</strong><ul><li>针对某个角对背景图片做偏移定位。</li><li>在CSS 2.1中，我们只能指定距离左上角的偏移量，或者干脆完全靠齐到其他三个角。如下图：</li></ul></li></ul><img lazyload src="/images/loading.svg" data-src="/2021/12/30/css-1/pic4.png" class title="# tu1"><h2 id="1、background-position的扩展语法方案"><a href="#1、background-position的扩展语法方案" class="headerlink" title="1、background-position的扩展语法方案"></a>1、background-position的扩展语法方案</h2><ul><li><strong>background-position属性得到扩展：</strong><ul><li><strong>允许我们指定背景图片距离任意角的偏移量</strong>；</li><li><strong>只需要在偏移量前面指定关键字</strong>。</li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#pic</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">code-pirate.svg</span>) no-repeat <span class="number">#58a</span>;</span><br><span class="line">    <span class="attribute">background-position</span>: right <span class="number">20px</span> bottom <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img lazyload src="/images/loading.svg" data-src="/2021/12/30/css-1/pic5.png" class title="# tu1"><ul><li>在不支持background-position扩展语法的浏览器中，背景图片会紧贴在左上角（背景图片的默认位置）。</li><li>提供一个回退方案也很简单，就是把老套的bottom right 定位值写进 background 的简写属性中</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#pic</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">code-pirate.svg</span>)</span><br><span class="line">                no-repeat bottom right <span class="number">#58a</span>;</span><br><span class="line">    <span class="attribute">background-position</span>: right <span class="number">20px</span> bottom <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>默认情况下，background-position是以padding box为准，这样边框才不会遮住背景图片。</li></ul><h2 id="2、background-origin方案"><a href="#2、background-origin方案" class="headerlink" title="2、background-origin方案"></a>2、background-origin方案</h2><ul><li>background-origin默认情况下，它的值是padding-box。</li><li>如果把它的值改成 content-box ，我们在 background-position 属性中使用的边角关键字将会以内容区的边缘作为基准。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#pic</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">code-pirate.svg</span>)</span><br><span class="line">                no-repeat bottom right <span class="number">#58a</span>;</span><br><span class="line">    <span class="attribute">background-position</span>: right <span class="number">20px</span> bottom <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>视觉效果同上。</li></ul><h2 id="3、calc-方案"><a href="#3、calc-方案" class="headerlink" title="3、calc()方案"></a>3、calc()方案</h2><ul><li>如果我们仍然以左上角偏移的思路来考虑，其实就是希望它有一个 100% - 20px 的水平偏移量，以及 100% - 10px 的垂直偏移量。</li><li>calc()函数允许我们执行此类运算，它可以完美地在background-position 属性中使用。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#pic</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&quot;code-pirate.svg&quot;</span>) no-repeat;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">20px</span>) <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">10px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四、边框内圆角"><a href="#四、边框内圆角" class="headerlink" title="四、边框内圆角"></a>四、边框内圆角</h1><ul><li>有时我们需要一个容器，<strong>只在内侧有圆角，而边框或描边的四个角在外部仍然保持直角的形状</strong>，如图下所示。这是一个有趣的效果，目前还没有被滥用。</li></ul><img lazyload src="/images/loading.svg" data-src="/2021/12/30/css-1/pic6.png" class title="# tu1"><ul><li>用两个元素可以实现这个效果，这并没有什么特别的。</li></ul><img lazyload src="/images/loading.svg" data-src="/2021/12/30/css-1/pic7.png" class title="# tu1">]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=</summary>
      
    
    
    
    <category term="前端学习笔记" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="CSS" scheme="http://example.com/categories/CSS/"/>
    
    
    <category term="CSS学习" scheme="http://example.com/tags/CSS%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript学习笔记（四十八）网络请求与远程资源（四）</title>
    <link href="http://example.com/2021/12/30/js-51/"/>
    <id>http://example.com/2021/12/30/js-51/</id>
    <published>2021-12-29T16:06:09.000Z</published>
    <updated>2021-12-29T17:41:31.626Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Web-Socket"><a href="#Web-Socket" class="headerlink" title="Web Socket"></a>Web Socket</h1><ul><li>Web Socket (套接字)的目标是通过一个长时连接实现与服务器全双工、双向的通信。</li></ul><h2 id="1、API"><a href="#1、API" class="headerlink" title="1、API"></a>1、API</h2><ul><li>要创建一个新的WebSocket，就要实例化一个WebSocket对象并传人提供连接的URL。</li><li>必须给WebSocket构造函数传人一个绝对URL。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> socket = <span class="keyword">new</span> WebSocket(<span class="string">&quot;ws://www.example.com/server.php&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li><strong>同源策略不适用于Web Socket，因此可以打开到任意站点的连接。</strong></li><li>至于是否与来自特定源的页面通信，则完全取决于服务器。(在握手阶段就可以确定请求来自哪里。)</li><li><strong>浏览器会在初始化WebSocket对象之后立即创建连接。</strong></li><li>与XHR类似，WebSocket也有一个readyState属性表示当前状态。不过，这个值与XHR中相应的值不一样。</li></ul><img lazyload src="/images/loading.svg" data-src="/2021/12/30/js-51/pic1.png" class title="# tu1"><ul><li><strong>WebSocket对象没有readystatechange 事件，而是有与上述不同状态对应的其他事件。</strong>readyState值从0开始。</li><li>任何时候都可以调用close()方法关闭Web Socket连接，调用close()之后，readyState立即变为2 (连接正在关闭),并会在关闭后变为3 (连接已经关闭)。</li></ul><h2 id="2、发送和接收数据"><a href="#2、发送和接收数据" class="headerlink" title="2、发送和接收数据"></a>2、发送和接收数据</h2><ul><li>打开Web Socket之后，可以通过连接发送和接收数据。</li><li><strong>要向服务器发送数据，使用send()方法并传入一个字符串、ArrayBuffer或Blob。</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> socket = <span class="keyword">new</span> WebSocket(<span class="string">&quot;ws://www.example.com/server.php&quot;</span>); </span><br><span class="line"><span class="keyword">let</span> stringData = <span class="string">&quot;Hello world!&quot;</span>; </span><br><span class="line"><span class="keyword">let</span> arrayBufferData = <span class="built_in">Uint8Array</span>.from([<span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;o&#x27;</span>]); </span><br><span class="line"><span class="keyword">let</span> blobData = <span class="keyword">new</span> Blob([<span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;o&#x27;</span>]); </span><br><span class="line">socket.send(stringData); </span><br><span class="line">socket.send(arrayBufferData.buffer); </span><br><span class="line">socket.send(blobData);</span><br></pre></td></tr></table></figure><ul><li>服务器向客户端发送消息时，WebSocket 对象上会触发message事件。这个message事件与其他消息协议类似，可以通过event.data属性访问到有效载荷。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">socket.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123; </span><br><span class="line">    <span class="keyword">let</span> data = event.data; </span><br><span class="line">    <span class="comment">// 对数据执行某些操作</span></span><br><span class="line">&#125;; </span><br></pre></td></tr></table></figure><ul><li>与通过send()方法发送的数据类似，event.data返回的数据也可能是ArrayBuffer或Blob。这由WebSocket对象的binaryType属性决定，该属性可能是”blob”或” arraybuffer”。</li></ul><h2 id="3、其他事件"><a href="#3、其他事件" class="headerlink" title="3、其他事件"></a>3、其他事件</h2><ul><li>open：在连接成功建立时触发。</li><li>error：在发生错误时触发。连接无法存续。</li><li>close：在连接关闭时触发。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> socket = <span class="keyword">new</span> WebSocket(<span class="string">&quot;ws://www.example.com/server.php&quot;</span>); </span><br><span class="line">socket.onopen = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line"> alert(<span class="string">&quot;Connection established.&quot;</span>); </span><br><span class="line">&#125;; </span><br><span class="line">socket.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line"> alert(<span class="string">&quot;Connection error.&quot;</span>); </span><br><span class="line">&#125;; </span><br><span class="line">socket.onclose = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line"> alert(<span class="string">&quot;Connection closed.&quot;</span>); </span><br><span class="line">&#125;; </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Web-Socket&quot;&gt;&lt;a href=&quot;#Web-Socket&quot; class=&quot;headerlink&quot; title=&quot;Web Socket&quot;&gt;&lt;/a&gt;Web Socket&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Web Socket (套接字)的目标是通过一个长时连接实现与服</summary>
      
    
    
    
    <category term="前端学习笔记" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="JS" scheme="http://example.com/categories/JS/"/>
    
    <category term="Web Socket" scheme="http://example.com/categories/Web-Socket/"/>
    
    
    <category term="JS学习" scheme="http://example.com/tags/JS%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript学习笔记（四十八）网络请求与远程资源（三）</title>
    <link href="http://example.com/2021/12/25/js-50/"/>
    <id>http://example.com/2021/12/25/js-50/</id>
    <published>2021-12-25T12:05:11.000Z</published>
    <updated>2021-12-29T16:02:28.540Z</updated>
    
    <content type="html"><![CDATA[<h1 id="五、Fetch-API"><a href="#五、Fetch-API" class="headerlink" title="五、Fetch API"></a>五、Fetch API</h1><ul><li>Fetch API则必须是异步</li></ul><h2 id="1、基本用法"><a href="#1、基本用法" class="headerlink" title="1、基本用法"></a>1、基本用法</h2><ul><li>fetch()方法是暴露在全局作用域中的，包括主页面执行线程、模块和工作线程。</li></ul><h3 id="1）分派请求"><a href="#1）分派请求" class="headerlink" title="1）分派请求"></a>1）分派请求</h3><ul><li><strong>fetch()只有一个必需的参数input</strong>。多数情况下，这个参数是要获取资源的URL。</li><li><strong>这个方法返回一个期约</strong>。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> r = fetch(<span class="string">&#x27;/bar&#x27;</span>); </span><br><span class="line"><span class="built_in">console</span>.log(r); <span class="comment">// Promise &lt;pending&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>请求完成、资源可用时，期约会解决为一个Response对象</strong>。</li><li>这个对象是API的封装，可以通过它取得相应资源。<strong>获取资源要使用这个对象的属性和方法</strong>，掌握响应的情况并将负载转换为有用的形式。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">&#x27;bar.txt&#x27;</span>) </span><br><span class="line"> .then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123; </span><br><span class="line">    <span class="built_in">console</span>.log(response); </span><br><span class="line">&#125;); </span><br><span class="line"><span class="comment">// Response &#123; type: &quot;basic&quot;, url: ... &#125;</span></span><br></pre></td></tr></table></figure><h3 id="2、读取响应"><a href="#2、读取响应" class="headerlink" title="2、读取响应"></a>2、读取响应</h3><ul><li>读取响应内容的最简单方式是取得纯文本格式的内容，这要用到text()方法。<ul><li>这个方法返回一个期约，会解决为取得资源的完整内容。</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">&#x27;bar.txt&#x27;</span>) </span><br><span class="line">    .then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123; </span><br><span class="line">        response.text().then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123; </span><br><span class="line">            <span class="built_in">console</span>.log(data); </span><br><span class="line">        &#125;); </span><br><span class="line">    &#125;); </span><br><span class="line"><span class="comment">// bar.txt 的内容</span></span><br></pre></td></tr></table></figure><ul><li>内容的结构通常是打平的：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">&#x27;bar.txt&#x27;</span>) </span><br><span class="line">    .then(<span class="function">(<span class="params">response</span>) =&gt;</span> response.text()) </span><br><span class="line">    .then(<span class="function">(<span class="params">data</span>) =&gt;</span> <span class="built_in">console</span>.log(data)); </span><br><span class="line"><span class="comment">// bar.txt 的内容</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="3）处理状态码和请求失败"><a href="#3）处理状态码和请求失败" class="headerlink" title="3）处理状态码和请求失败"></a>3）处理状态码和请求失败</h3><ul><li>Fetch API支持通过Response的status ( 状态码)和statusText (状态文本)属性检查响应状态。</li><li><strong>成功获取响应的请求通常会产生值为200的状态码</strong>。</li><li><strong>请求不存在的资源通常会产生值为 404 的状态码</strong>。</li><li><strong>请求的 URL 如果抛出服务器错误会产生值为 500 的状态码</strong>。</li><li>只要服务器返回了响应，fetch()期约都会解决。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">&#x27;/bar&#x27;</span>) </span><br><span class="line"> .then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123; </span><br><span class="line">    <span class="built_in">console</span>.log(response.status); <span class="comment">// 200 </span></span><br><span class="line">    <span class="built_in">console</span>.log(response.statusText); <span class="comment">// OK </span></span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure><ul><li>通常状态码为200时就会被认为成功了，其他情况可以被认为未成功。为区分这两种情况，可以在状态码非200-299时检查Response对象的ok属性。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">&#x27;/bar&#x27;</span>) </span><br><span class="line"> .then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123; </span><br><span class="line">    <span class="built_in">console</span>.log(response.status); <span class="comment">// 200 </span></span><br><span class="line">    <span class="built_in">console</span>.log(response.ok); <span class="comment">// true </span></span><br><span class="line"> &#125;); </span><br><span class="line">fetch(<span class="string">&#x27;/does-not-exist&#x27;</span>) </span><br><span class="line"> .then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123; </span><br><span class="line">    <span class="built_in">console</span>.log(response.status); <span class="comment">// 404 </span></span><br><span class="line">    <span class="built_in">console</span>.log(response.ok); <span class="comment">// false </span></span><br><span class="line"> &#125;); </span><br></pre></td></tr></table></figure><ul><li><strong>违反CORS、无网络连接、HTTPS错配及其他浏览器/网络策略问题都会导致期约被拒绝</strong>。</li><li>可以通过url属性检查通过fetch()发送请求时使用的完整URL。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// foo.com/bar/baz 发送的请求</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.location.href); <span class="comment">// https://foo.com/bar/baz </span></span><br><span class="line">fetch(<span class="string">&#x27;qux&#x27;</span>).then(<span class="function">(<span class="params">response</span>) =&gt;</span> <span class="built_in">console</span>.log(response.url)); </span><br><span class="line"><span class="comment">// https://foo.com/bar/qux</span></span><br><span class="line">fetch(<span class="string">&#x27;/qux&#x27;</span>).then(<span class="function">(<span class="params">response</span>) =&gt;</span> <span class="built_in">console</span>.log(response.url)); </span><br><span class="line"><span class="comment">// https://foo.com/qux</span></span><br><span class="line">fetch(<span class="string">&#x27;//qux.com&#x27;</span>).then(<span class="function">(<span class="params">response</span>) =&gt;</span> <span class="built_in">console</span>.log(response.url)); </span><br><span class="line"><span class="comment">// https://qux.com</span></span><br><span class="line">fetch(<span class="string">&#x27;https://qux.com&#x27;</span>).then(<span class="function">(<span class="params">response</span>) =&gt;</span> <span class="built_in">console</span>.log(response.url)); </span><br><span class="line"><span class="comment">// https://qux.com</span></span><br></pre></td></tr></table></figure><h3 id="4）自定义选项"><a href="#4）自定义选项" class="headerlink" title="4）自定义选项"></a>4）自定义选项</h3><ul><li>只使用URL时，fetch()会发送GET请求，只包含最低限度的请求头。</li><li>要进一步配置如何发送请求，需要传入可选的第二个参数init对象。</li></ul><h2 id="2、常见Fetch请求模式"><a href="#2、常见Fetch请求模式" class="headerlink" title="2、常见Fetch请求模式"></a>2、常见Fetch请求模式</h2><h3 id="1）发送JSON数据"><a href="#1）发送JSON数据" class="headerlink" title="1）发送JSON数据"></a>1）发送JSON数据</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> payload = <span class="built_in">JSON</span>.stringify(&#123; </span><br><span class="line">    foo: <span class="string">&#x27;bar&#x27;</span> </span><br><span class="line">&#125;); </span><br><span class="line"><span class="keyword">let</span> jsonHeaders = <span class="keyword">new</span> Headers(&#123; </span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span> </span><br><span class="line">&#125;); </span><br><span class="line">fetch(<span class="string">&#x27;/send-me-json&#x27;</span>, &#123; </span><br><span class="line">    method: <span class="string">&#x27;POST&#x27;</span>, <span class="comment">// 发送请求体时必须使用一种 HTTP 方法</span></span><br><span class="line">    body: payload, </span><br><span class="line">    headers: jsonHeaders </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="2）在请求体中发送参数"><a href="#2）在请求体中发送参数" class="headerlink" title="2）在请求体中发送参数"></a>2）在请求体中发送参数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> payload = <span class="string">&#x27;foo=bar&amp;baz=qux&#x27;</span>; </span><br><span class="line"><span class="keyword">let</span> paramHeaders = <span class="keyword">new</span> Headers(&#123; </span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded; charset=UTF-8&#x27;</span> </span><br><span class="line">&#125;); </span><br><span class="line">fetch(<span class="string">&#x27;/send-me-params&#x27;</span>, &#123; </span><br><span class="line">    method: <span class="string">&#x27;POST&#x27;</span>, <span class="comment">// 发送请求体时必须使用一种 HTTP 方法</span></span><br><span class="line">    body: payload, </span><br><span class="line">    headers: paramHeaders </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="3）发送文件"><a href="#3）发送文件" class="headerlink" title="3）发送文件"></a>3）发送文件</h3><ul><li>因为请求体支持FormData实现，所以fetch()也可以序列化并发送文件字段中的文件。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> imageFormData = <span class="keyword">new</span> FormData(); </span><br><span class="line"><span class="keyword">let</span> imageInput = <span class="built_in">document</span>.querySelector(<span class="string">&quot;input[type=&#x27;file&#x27;]&quot;</span>); </span><br><span class="line">imageFormData.append(<span class="string">&#x27;image&#x27;</span>, imageInput.files[<span class="number">0</span>]); </span><br><span class="line">fetch(<span class="string">&#x27;/img-upload&#x27;</span>, &#123; </span><br><span class="line">    method: <span class="string">&#x27;POST&#x27;</span>, </span><br><span class="line">    body: imageFormData </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="4）加载Blob文件"><a href="#4）加载Blob文件" class="headerlink" title="4）加载Blob文件"></a>4）加载Blob文件</h3><ul><li>Fetch API也能提供Blob类型的响应，而Blob又可以兼容多种浏览器API。</li><li>可以使用响应对象上暴露的blob()方法。<ul><li>方法返回一个期约，解决为一个Blob的实例。可以将这个实例传给URL.create0bjectUrl()以生成可以添加给图片元素src属性的值。</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> imageElement = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;img&#x27;</span>); </span><br><span class="line">fetch(<span class="string">&#x27;my-image.png&#x27;</span>) </span><br><span class="line">    .then(<span class="function">(<span class="params">response</span>) =&gt;</span> response.blob()) </span><br><span class="line">    .then(<span class="function">(<span class="params">blob</span>) =&gt;</span> &#123; </span><br><span class="line">        imageElement.src = URL.createObjectURL(blob); </span><br><span class="line">    &#125;); </span><br></pre></td></tr></table></figure><h3 id="5）发送跨源请求"><a href="#5）发送跨源请求" class="headerlink" title="5）发送跨源请求"></a>5）发送跨源请求</h3><ul><li>从不同的源请求资源，响应要包含CORS头部才能保证浏览器收到响应。没有这些头部，跨源请求会失败并抛出错误。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">&#x27;//cross-origin.com&#x27;</span>); </span><br><span class="line"><span class="comment">// TypeError: Failed to fetch </span></span><br><span class="line"><span class="comment">// No &#x27;Access-Control-Allow-Origin&#x27; header is present on the requested resource. </span></span><br></pre></td></tr></table></figure><ul><li>如果代码不需要访问响应，也可以发送no-cors请求。此时响应的type属性值为opaque，因此无法读取相应内容。这种方式适合发送探测请求或者将响应缓存起来供以后使用。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">&#x27;//cross-origin.com&#x27;</span>, &#123; <span class="attr">method</span>: <span class="string">&#x27;no-cors&#x27;</span> &#125;) </span><br><span class="line">    .then(<span class="function">(<span class="params">response</span>) =&gt;</span> <span class="built_in">console</span>.log(response.type)); </span><br><span class="line"><span class="comment">// opaque</span></span><br></pre></td></tr></table></figure><h3 id="6）中断请求"><a href="#6）中断请求" class="headerlink" title="6）中断请求"></a>6）中断请求</h3><ul><li>Fetch API支持通过AbortController/AbortSignal 对中断请求。</li><li>调用AbortController.abort()会中断所有网络传输，特别适合希望停止传输大型负载的情况。</li><li>中断进行中的fetch()请求会导致包含错误的拒绝。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> abortController = <span class="keyword">new</span> AbortController(); </span><br><span class="line">fetch(<span class="string">&#x27;wikipedia.zip&#x27;</span>, &#123; <span class="attr">signal</span>: abortController.signal &#125;) </span><br><span class="line">    .catch(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;aborted!&#x27;</span>); </span><br><span class="line"><span class="comment">// 10 毫秒后中断请求</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> abortController.abort(), <span class="number">10</span>); </span><br><span class="line"><span class="comment">// 已经中断</span></span><br></pre></td></tr></table></figure><h2 id="3、Headers对象"><a href="#3、Headers对象" class="headerlink" title="3、Headers对象"></a>3、Headers对象</h2><ul><li><strong>Headers对象是所有外发请求和入站响应头部的容器</strong>。</li><li>每个外发的Request实例都包含一个空的Headers实例，可以通过Request.prototype.headers 访问，每个入站Response实例也可以通过Response.prototype.headers访问包含着响应头部的Headers对象。<strong>这两个属性都是可修改属性</strong>。</li><li><strong>使用new Headers()也可以创建一个新实例。</strong></li></ul><h3 id="1）Headers与Map的相似之处"><a href="#1）Headers与Map的相似之处" class="headerlink" title="1）Headers与Map的相似之处"></a>1）Headers与Map的相似之处</h3><ul><li>因为HTTP头部本质上是<strong>序列化后的键/值对，它们的JavaScript表示则是中间接口</strong>。</li><li>Headers与Map类型都有get()、set()、has()和delete()等实例方法。</li><li>Headers和Map都可以使用一个可迭代对象来初始化。</li><li>都有相同的keys()、values()和entries()迭代器接口。</li></ul><h3 id="2）Headers独有的特性"><a href="#2）Headers独有的特性" class="headerlink" title="2）Headers独有的特性"></a>2）Headers独有的特性</h3><p>1、 在初始化Headers对象时，可以使用键/值对形式的对象，而Map不可以。<br>2、 Headers对象通过append()方法支持添加多个值。在Headers实例中还不存在的头部上调用append()方法相当于调用set ()。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> seed = &#123;<span class="attr">foo</span>: <span class="string">&#x27;bar&#x27;</span>&#125;; </span><br><span class="line"><span class="keyword">let</span> h = <span class="keyword">new</span> Headers(seed); </span><br><span class="line"><span class="built_in">console</span>.log(h.get(<span class="string">&#x27;foo&#x27;</span>)); <span class="comment">// bar </span></span><br><span class="line"><span class="keyword">let</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>(seed); </span><br><span class="line"><span class="comment">// TypeError: object is not iterable </span></span><br><span class="line"><span class="comment">//==================================</span></span><br><span class="line"><span class="keyword">let</span> h = <span class="keyword">new</span> Headers(); </span><br><span class="line">h.append(<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>); </span><br><span class="line"><span class="built_in">console</span>.log(h.get(<span class="string">&#x27;foo&#x27;</span>)); <span class="comment">// &quot;bar&quot;</span></span><br><span class="line">h.append(<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;baz&#x27;</span>); </span><br><span class="line"><span class="built_in">console</span>.log(h.get(<span class="string">&#x27;foo&#x27;</span>)); <span class="comment">// &quot;bar, baz&quot; </span></span><br></pre></td></tr></table></figure><h3 id="3）头部护卫"><a href="#3）头部护卫" class="headerlink" title="3）头部护卫"></a>3）头部护卫</h3><ul><li>Headers对象使用护卫来防止不被允许的修改。</li><li>不同的护卫设置会改变set()、append()和 delete()的行为。违反护卫限制会抛出TypeError。</li></ul><img lazyload src="/images/loading.svg" data-src="/2021/12/25/js-50/pic1.png" class title="# tu1"><h2 id="4、Request对象"><a href="#4、Request对象" class="headerlink" title="4、Request对象"></a>4、Request对象</h2><ul><li>Request对象是获取资源请求的接口。这个接口暴露了请求的相关信息，也暴露了使用请求体的不同方式。</li></ul><h3 id="1）创建Request对象"><a href="#1）创建Request对象" class="headerlink" title="1）创建Request对象"></a>1）创建Request对象</h3><ul><li>通过构造函数初始化Request对象，为此需要传入一个input参数，一般是URL。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> r = <span class="keyword">new</span> Request(<span class="string">&#x27;https://foo.com&#x27;</span>); </span><br><span class="line"><span class="built_in">console</span>.log(r); </span><br><span class="line"><span class="comment">// Request &#123;...&#125; </span></span><br></pre></td></tr></table></figure><ul><li>Request构造函数也接收第二个参数一个 init 对象。</li><li>没有在init对象中涉及的值则会使用默认值。</li></ul><h3 id="2）克隆Request对象"><a href="#2）克隆Request对象" class="headerlink" title="2）克隆Request对象"></a>2）克隆Request对象</h3><ul><li>Fetch API提供了两种不太一样的方式用于创建Request对象的副本：<ul><li>使用Request构造函数；</li><li>使用clone()方法。</li></ul></li><li>将Request实例作为input参数传给Request构造函数，会得到该请求的一个副本：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> r1 = <span class="keyword">new</span> Request(<span class="string">&#x27;https://foo.com&#x27;</span>); </span><br><span class="line"><span class="keyword">let</span> r2 = <span class="keyword">new</span> Request(r1); </span><br><span class="line"><span class="built_in">console</span>.log(r2.url); <span class="comment">// https://foo.com/ </span></span><br></pre></td></tr></table></figure><ul><li>如果再传入init对象，则init对象的值会覆盖源对象中同名的值：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> r1 = <span class="keyword">new</span> Request(<span class="string">&#x27;https://foo.com&#x27;</span>); </span><br><span class="line"><span class="keyword">let</span> r2 = <span class="keyword">new</span> Request(r1, &#123;<span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>&#125;); </span><br><span class="line"><span class="built_in">console</span>.log(r1.method); <span class="comment">// GET</span></span><br><span class="line"><span class="built_in">console</span>.log(r2.method); <span class="comment">// POST </span></span><br></pre></td></tr></table></figure><ul><li><strong>这种克隆方式并不总能得到一模一样的副本</strong>。最明显的是，第一个请求的请求体会被标记为“已使用”：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> r1 = <span class="keyword">new</span> Request(<span class="string">&#x27;https://foo.com&#x27;</span>, &#123; <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>, <span class="attr">body</span>: <span class="string">&#x27;foobar&#x27;</span> &#125;); </span><br><span class="line"><span class="keyword">let</span> r2 = <span class="keyword">new</span> Request(r1); </span><br><span class="line"><span class="built_in">console</span>.log(r1.bodyUsed); <span class="comment">// true </span></span><br><span class="line"><span class="built_in">console</span>.log(r2.bodyUsed); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><ul><li>第二种克隆Request对象的方式是使用clone()方法，这个方法会创建一模一样的副本，任何值都不会被覆盖。</li><li>与第一种方式不同，这种方法不会将任何请求的请求体标记为“已使用”。</li><li><strong>如果请求对象的bodyUsed属性为true (即请求体已被读取),那么上述任何一种方式都不能用来创建这个对象的副本</strong>。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> r1 = <span class="keyword">new</span> Request(<span class="string">&#x27;https://foo.com&#x27;</span>, &#123; <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>, <span class="attr">body</span>: <span class="string">&#x27;foobar&#x27;</span> &#125;); </span><br><span class="line"><span class="keyword">let</span> r2 = r1.clone(); </span><br><span class="line"><span class="built_in">console</span>.log(r1.url); <span class="comment">// https://foo.com/ </span></span><br><span class="line"><span class="built_in">console</span>.log(r2.url); <span class="comment">// https://foo.com/ </span></span><br><span class="line"><span class="built_in">console</span>.log(r1.bodyUsed); <span class="comment">// false </span></span><br><span class="line"><span class="built_in">console</span>.log(r2.bodyUsed); <span class="comment">// false </span></span><br></pre></td></tr></table></figure><h3 id="3）在fetch-中使用Request对象"><a href="#3）在fetch-中使用Request对象" class="headerlink" title="3）在fetch()中使用Request对象"></a>3）在fetch()中使用Request对象</h3><ul><li>在调用fetch()时，可以传入已经创建好的Request实例而不是URL。</li><li>fetch()会在内部克隆传入的Requeat对象。</li><li>fetch()也不能拿请求体已经用过的Request对象来发送请求。</li><li><strong>有请求体的Request只能在一次fetch中使用</strong>。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> r = <span class="keyword">new</span> Request(<span class="string">&#x27;https://foo.com&#x27;</span>); </span><br><span class="line"><span class="comment">// 向 foo.com 发送 GET 请求</span></span><br><span class="line">fetch(r); </span><br><span class="line"><span class="comment">// 向 foo.com 发送 POST 请求</span></span><br><span class="line">fetch(r, &#123; <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span> &#125;); </span><br></pre></td></tr></table></figure><ul><li>要想基于包含请求体的相同Request对象多次调用fetch(),必须在第一次发送fetch()请求前调用clone()。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> r = <span class="keyword">new</span> Request(<span class="string">&#x27;https://foo.com&#x27;</span>, &#123; <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>, <span class="attr">body</span>: <span class="string">&#x27;foobar&#x27;</span> &#125;); </span><br><span class="line"><span class="comment">// 3 个都会成功</span></span><br><span class="line">fetch(r.clone()); </span><br><span class="line">fetch(r.clone()); </span><br><span class="line">fetch(r); </span><br></pre></td></tr></table></figure><h2 id="5、Response对象"><a href="#5、Response对象" class="headerlink" title="5、Response对象"></a>5、Response对象</h2><ul><li><strong>Response 对象是获取资源响应的接口</strong>。</li><li><strong>这个接口暴露了响应的相关信息，也暴露了使用响应体的不同方式</strong>。</li></ul><h3 id="1）创建Response对象"><a href="#1）创建Response对象" class="headerlink" title="1）创建Response对象"></a>1）创建Response对象</h3><ul><li>可以通过构造函数初始化Response对象且不需要参数。</li><li>此时响应实例的属性均为默认值，因为它并不代表实际的HTTP响应。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> r = <span class="keyword">new</span> Response(); </span><br><span class="line"><span class="built_in">console</span>.log(r); </span><br><span class="line"><span class="comment">/*Response &#123; </span></span><br><span class="line"><span class="comment">    body: (...) </span></span><br><span class="line"><span class="comment">    bodyUsed: false </span></span><br><span class="line"><span class="comment">    headers: Headers &#123;&#125; </span></span><br><span class="line"><span class="comment">    ok: true </span></span><br><span class="line"><span class="comment">    redirected: false </span></span><br><span class="line"><span class="comment">    status: 200 </span></span><br><span class="line"><span class="comment">    statusText: &quot;OK&quot; </span></span><br><span class="line"><span class="comment">    type: &quot;default&quot; </span></span><br><span class="line"><span class="comment">    url: &quot;&quot; </span></span><br><span class="line"><span class="comment">&#125; */</span></span><br></pre></td></tr></table></figure><ul><li>Response构造函数接收一个可选的body参数。<ul><li>这个body可以是null，等同于fetch()参数init中的body。</li></ul></li><li>还可以接收一个可选的init对象，这个对象可以包含下表所列的键和值。</li></ul><img lazyload src="/images/loading.svg" data-src="/2021/12/25/js-50/pic2.png" class title="# tu1"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> r = <span class="keyword">new</span> Response(<span class="string">&#x27;foobar&#x27;</span>, &#123; </span><br><span class="line">    status: <span class="number">418</span>, </span><br><span class="line">    statusText: <span class="string">&#x27;I\&#x27;m a teapot&#x27;</span> </span><br><span class="line">&#125;); </span><br><span class="line"><span class="built_in">console</span>.log(r); </span><br><span class="line"><span class="comment">/*Response &#123; </span></span><br><span class="line"><span class="comment">    body: (...) </span></span><br><span class="line"><span class="comment">    bodyUsed: false </span></span><br><span class="line"><span class="comment">    headers: Headers &#123;&#125; </span></span><br><span class="line"><span class="comment">    ok: false </span></span><br><span class="line"><span class="comment">    redirected: false </span></span><br><span class="line"><span class="comment">    status: 418</span></span><br><span class="line"><span class="comment">    statusText: &quot;I&#x27;m a teapot&quot;</span></span><br><span class="line"><span class="comment">    type: &quot;default&quot; </span></span><br><span class="line"><span class="comment">    url: &quot;&quot; </span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br></pre></td></tr></table></figure><ul><li>**大多数情况下，产生Response 对象的主要方式是调用fetch()**， 它返回一个最后会解决为Response对象的期约，这个Response 对象代表实际的HTTP响应。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">&#x27;https://foo.com&#x27;</span>) </span><br><span class="line"> .then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123; </span><br><span class="line"> <span class="built_in">console</span>.log(response); </span><br><span class="line"> &#125;); </span><br><span class="line"><span class="comment">/*Response &#123; </span></span><br><span class="line"><span class="comment">    body: (...) </span></span><br><span class="line"><span class="comment">    bodyUsed: false </span></span><br><span class="line"><span class="comment">    headers: Headers &#123;&#125; </span></span><br><span class="line"><span class="comment">    ok: true </span></span><br><span class="line"><span class="comment">    redirected: false </span></span><br><span class="line"><span class="comment">    status: 200 </span></span><br><span class="line"><span class="comment">    statusText: &quot;OK&quot; </span></span><br><span class="line"><span class="comment">    type: &quot;basic&quot; </span></span><br><span class="line"><span class="comment">    url: &quot;https://foo.com/&quot; </span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br></pre></td></tr></table></figure><ul><li>Response类还有两个用于生成Response对象的静态方法: Response.redirect()和Response.error()。<ul><li>前者接收一个URL和一个重定向状态码(301、302、303、307或308)，返回重定向的Response对象。</li><li>提供的状态码必须对应重定向，否则会抛出错误。</li></ul></li><li>另一个静态方法Response.error()用于产生表示网络错误的Response 对象。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(Response.redirect(<span class="string">&#x27;https://foo.com&#x27;</span>, <span class="number">301</span>)); </span><br><span class="line"><span class="comment">/*Response &#123; </span></span><br><span class="line"><span class="comment">    body: (...) </span></span><br><span class="line"><span class="comment">    bodyUsed: false </span></span><br><span class="line"><span class="comment">    headers: Headers &#123;&#125; </span></span><br><span class="line"><span class="comment">    ok: false </span></span><br><span class="line"><span class="comment">    redirected: false </span></span><br><span class="line"><span class="comment">    status: 301 </span></span><br><span class="line"><span class="comment">    statusText: &quot;&quot; </span></span><br><span class="line"><span class="comment">    type: &quot;default&quot; </span></span><br><span class="line"><span class="comment">    url: &quot;&quot; </span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br></pre></td></tr></table></figure><h3 id="2）读取响应状态信息"><a href="#2）读取响应状态信息" class="headerlink" title="2）读取响应状态信息"></a>2）读取响应状态信息</h3><ul><li>Response对象包含一组只读属性，描述了请求完成后的状态，如下表所示。</li></ul><img lazyload src="/images/loading.svg" data-src="/2021/12/25/js-50/pic3.png" class title="# tu1"><ul><li>以下代码演示了返回200、302、404和500状态码的URL对应的响应：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">&#x27;//foo.com&#x27;</span>).then(<span class="built_in">console</span>.log); </span><br><span class="line"><span class="comment">// Response &#123; </span></span><br><span class="line">    <span class="comment">// body: (...) </span></span><br><span class="line">    <span class="comment">// bodyUsed: false </span></span><br><span class="line">    <span class="comment">// headers: Headers &#123;&#125; </span></span><br><span class="line">    <span class="comment">// ok: true </span></span><br><span class="line">    <span class="comment">// redirected: false </span></span><br><span class="line">    <span class="comment">// status: 200 </span></span><br><span class="line">    <span class="comment">// statusText: &quot;OK&quot; </span></span><br><span class="line">    <span class="comment">// type: &quot;basic&quot; </span></span><br><span class="line">    <span class="comment">// url: &quot;https://foo.com/&quot; </span></span><br><span class="line"><span class="comment">// &#125; </span></span><br><span class="line">fetch(<span class="string">&#x27;//foo.com/redirect-me&#x27;</span>).then(<span class="built_in">console</span>.log); </span><br><span class="line"><span class="comment">// Response &#123; </span></span><br><span class="line">    <span class="comment">// body: (...) </span></span><br><span class="line">    <span class="comment">// bodyUsed: false </span></span><br><span class="line">    <span class="comment">// headers: Headers &#123;&#125; </span></span><br><span class="line">    <span class="comment">// ok: true </span></span><br><span class="line">    <span class="comment">// redirected: true</span></span><br><span class="line">    <span class="comment">// status: 200 </span></span><br><span class="line">    <span class="comment">// statusText: &quot;OK&quot; </span></span><br><span class="line">    <span class="comment">// type: &quot;basic&quot; </span></span><br><span class="line">    <span class="comment">// url: &quot;https://foo.com/redirected-url/&quot; </span></span><br><span class="line"><span class="comment">// &#125; </span></span><br><span class="line">fetch(<span class="string">&#x27;//foo.com/does-not-exist&#x27;</span>).then(<span class="built_in">console</span>.log); </span><br><span class="line"><span class="comment">// Response &#123; </span></span><br><span class="line">    <span class="comment">// body: (...) </span></span><br><span class="line">    <span class="comment">// bodyUsed: false </span></span><br><span class="line">    <span class="comment">// headers: Headers &#123;&#125; </span></span><br><span class="line">    <span class="comment">// ok: false </span></span><br><span class="line">    <span class="comment">// redirected: true </span></span><br><span class="line">    <span class="comment">// status: 404 </span></span><br><span class="line">    <span class="comment">// statusText: &quot;Not Found&quot;</span></span><br><span class="line">    <span class="comment">// type: &quot;basic&quot; </span></span><br><span class="line">    <span class="comment">// url: &quot;https://foo.com/does-not-exist/&quot; </span></span><br><span class="line"><span class="comment">// &#125; </span></span><br><span class="line">fetch(<span class="string">&#x27;//foo.com/throws-error&#x27;</span>).then(<span class="built_in">console</span>.log); </span><br><span class="line"><span class="comment">// Response &#123; </span></span><br><span class="line">    <span class="comment">// body: (...) </span></span><br><span class="line">    <span class="comment">// bodyUsed: false </span></span><br><span class="line">    <span class="comment">// headers: Headers &#123;&#125; </span></span><br><span class="line">    <span class="comment">// ok: false </span></span><br><span class="line">    <span class="comment">// redirected: true </span></span><br><span class="line">    <span class="comment">// status: 500 </span></span><br><span class="line">    <span class="comment">// statusText: &quot;Internal Server Error&quot;</span></span><br><span class="line">    <span class="comment">// type: &quot;basic&quot; </span></span><br><span class="line">    <span class="comment">// url: &quot;https://foo.com/throws-error/&quot; </span></span><br><span class="line"><span class="comment">// &#125; </span></span><br></pre></td></tr></table></figure><h3 id="3）克隆Response对象"><a href="#3）克隆Response对象" class="headerlink" title="3）克隆Response对象"></a>3）克隆Response对象</h3><ul><li>克隆Response对象的主要方式是使用clone()方法，这个方法会创建一个一模一样的副本，不会覆盖任何值。这样不会将任何请求的请求体标记为已使用。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> r1 = <span class="keyword">new</span> Response(<span class="string">&#x27;foobar&#x27;</span>); </span><br><span class="line"><span class="keyword">let</span> r2 = r1.clone(); </span><br><span class="line"><span class="built_in">console</span>.log(r1.bodyUsed); <span class="comment">// false </span></span><br><span class="line"><span class="built_in">console</span>.log(r2.bodyUsed); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><ul><li>如果响应对象的bodyUsed属性为true (即响应体已被读取),则不能再创建这个对象的副本。在响应体被读取之后再克隆会导致抛出TypeError。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> r = <span class="keyword">new</span> Response(<span class="string">&#x27;foobar&#x27;</span>); </span><br><span class="line">r.clone(); </span><br><span class="line"><span class="comment">// 没有错误</span></span><br><span class="line">r.text(); <span class="comment">// 设置 bodyUsed 为 true </span></span><br><span class="line">r.clone(); </span><br><span class="line"><span class="comment">// TypeError: Failed to execute &#x27;clone&#x27; on &#x27;Response&#x27;: Response body is already used </span></span><br></pre></td></tr></table></figure><ul><li>有响应体的Response对象只能读取一次。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> r = <span class="keyword">new</span> Response(<span class="string">&#x27;foobar&#x27;</span>); </span><br><span class="line">r.text().then(<span class="built_in">console</span>.log); <span class="comment">// foobar </span></span><br><span class="line">r.text().then(<span class="built_in">console</span>.log); </span><br><span class="line"><span class="comment">// TypeError: Failed to execute &#x27;text&#x27; on &#x27;Response&#x27;: body stream is locked</span></span><br></pre></td></tr></table></figure><ul><li>要多次读取包含响应体的同一个Response对象，必须在第一次读取前调用clone()：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> r = <span class="keyword">new</span> Response(<span class="string">&#x27;foobar&#x27;</span>); </span><br><span class="line">r.clone().text().then(<span class="built_in">console</span>.log); <span class="comment">// foobar </span></span><br><span class="line">r.clone().text().then(<span class="built_in">console</span>.log); <span class="comment">// foobar </span></span><br><span class="line">r.text().then(<span class="built_in">console</span>.log); <span class="comment">// foobar </span></span><br></pre></td></tr></table></figure><h2 id="6、Request、Response及Body混入"><a href="#6、Request、Response及Body混入" class="headerlink" title="6、Request、Response及Body混入"></a>6、Request、Response及Body混入</h2><h3 id="1）Body-text"><a href="#1）Body-text" class="headerlink" title="1）Body.text()"></a>1）Body.text()</h3><ul><li>Body.text ()方法返回期约，解决为将缓冲区转存得到的UTF-8 格式字符串。下面的代码展示了在Response对象上使用Body.text()：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">&#x27;https://foo.com&#x27;</span>) </span><br><span class="line">    .then(<span class="function">(<span class="params">response</span>) =&gt;</span> response.text()) </span><br><span class="line">    .then(<span class="built_in">console</span>.log); </span><br><span class="line"><span class="comment">// &lt;!doctype html&gt;&lt;html lang=&quot;en&quot;&gt; </span></span><br><span class="line"><span class="comment">// &lt;head&gt; </span></span><br><span class="line"><span class="comment">// &lt;meta charset=&quot;utf-8&quot;&gt; </span></span><br><span class="line"><span class="comment">// ... </span></span><br></pre></td></tr></table></figure><ul><li>以下代码展示了在Request对象上使用Body.text()：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> request = <span class="keyword">new</span> Request(<span class="string">&#x27;https://foo.com&#x27;</span>, &#123; <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>, <span class="attr">body</span>: <span class="string">&#x27;barbazqux&#x27;</span> &#125;); </span><br><span class="line">request.text() </span><br><span class="line">    .then(<span class="built_in">console</span>.log); </span><br><span class="line"><span class="comment">// barbazqux</span></span><br></pre></td></tr></table></figure><h3 id="2）Body-json"><a href="#2）Body-json" class="headerlink" title="2）Body.json()"></a>2）Body.json()</h3><ul><li>Body.json()方法返回期约，解决为将缓冲区转存得到的JSON。下面的代码展示了在Response对象上使用Body.json()：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">&#x27;https://foo.com/foo.json&#x27;</span>) </span><br><span class="line">    .then(<span class="function">(<span class="params">response</span>) =&gt;</span> response.json()) </span><br><span class="line">    .then(<span class="built_in">console</span>.log); </span><br><span class="line"><span class="comment">// &#123;&quot;foo&quot;: &quot;bar&quot;&#125;</span></span><br></pre></td></tr></table></figure><ul><li>以下代码展示了在Request对象上使用Body.json()：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> request = <span class="keyword">new</span> Request(<span class="string">&#x27;https://foo.com&#x27;</span>, &#123; <span class="attr">method</span>:<span class="string">&#x27;POST&#x27;</span>, <span class="attr">body</span>: <span class="built_in">JSON</span>.stringify(&#123; <span class="attr">bar</span>: <span class="string">&#x27;baz&#x27;</span> &#125;) &#125;); </span><br><span class="line">request.json().then(<span class="built_in">console</span>.log); </span><br><span class="line"><span class="comment">// &#123;bar: &#x27;baz&#x27;&#125; </span></span><br></pre></td></tr></table></figure><h3 id="3）Body-formData"><a href="#3）Body-formData" class="headerlink" title="3）Body.formData()"></a>3）Body.formData()</h3><ul><li><strong>浏览器可以将FormData对象序列化/反序列化为主体。</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myFormData = <span class="keyword">new</span> FormData(); </span><br><span class="line">myFormData.append(<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>); </span><br></pre></td></tr></table></figure><ul><li><strong>Body.formData()方法返回期约，解决为将缓冲区转存得到的FormData实例。</strong></li><li>下面的代码展示了在Response对象上使用Body.formData()：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">&#x27;https://foo.com/form-data&#x27;</span>) </span><br><span class="line"> .then(<span class="function">(<span class="params">response</span>) =&gt;</span> response.formData()) </span><br><span class="line"> .then(<span class="function">(<span class="params">formData</span>) =&gt;</span> <span class="built_in">console</span>.log(formData.get(<span class="string">&#x27;foo&#x27;</span>)); </span><br><span class="line"><span class="comment">// bar </span></span><br></pre></td></tr></table></figure><ul><li>以下代码展示了在Request对象上使用Body.formData()：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myFormData = <span class="keyword">new</span> FormData(); </span><br><span class="line">myFormData.append(<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>); </span><br><span class="line"><span class="keyword">let</span> request = <span class="keyword">new</span> Request(<span class="string">&#x27;https://foo.com&#x27;</span>, &#123; <span class="attr">method</span>:<span class="string">&#x27;POST&#x27;</span>, <span class="attr">body</span>: myFormData &#125;); </span><br><span class="line">request.formData() .then(<span class="function">(<span class="params">formData</span>) =&gt;</span> <span class="built_in">console</span>.log(formData.get(<span class="string">&#x27;foo&#x27;</span>)); </span><br><span class="line"><span class="comment">// bar </span></span><br></pre></td></tr></table></figure><h3 id="4）Body-arrayBuffer"><a href="#4）Body-arrayBuffer" class="headerlink" title="4）Body.arrayBuffer()"></a>4）Body.arrayBuffer()</h3><ul><li>可以使用Body.arrayBuffer()将主体内容转换为ArrayBuffer实例。</li><li>Body.arrayBuffer()方法返回期约，解决为将缓冲区转存得到的ArrayBuffer实例。</li><li>下面的代码展示了在Response对象上使用Body.arrayBuffer()：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">&#x27;https://foo.com&#x27;</span>) </span><br><span class="line">    .then(<span class="function">(<span class="params">response</span>) =&gt;</span> response.arrayBuffer()) </span><br><span class="line">    .then(<span class="built_in">console</span>.log); </span><br><span class="line"><span class="comment">// ArrayBuffer(...) &#123;&#125;</span></span><br></pre></td></tr></table></figure><ul><li>以下代码展示了在Request对象上使用Body.arrayBuffer()：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> request = <span class="keyword">new</span> Request(<span class="string">&#x27;https://foo.com&#x27;</span>, &#123; <span class="attr">method</span>:<span class="string">&#x27;POST&#x27;</span>, <span class="attr">body</span>: <span class="string">&#x27;abcdefg&#x27;</span> &#125;); </span><br><span class="line"><span class="comment">// 以整数形式打印二进制编码的字符串</span></span><br><span class="line">request.arrayBuffer()</span><br><span class="line"> .then(<span class="function">(<span class="params">buf</span>) =&gt;</span> <span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Int8Array</span>(buf))); </span><br><span class="line"><span class="comment">// Int8Array(7) [97, 98, 99, 100, 101, 102, 103] </span></span><br></pre></td></tr></table></figure><h3 id="5）Body-blob"><a href="#5）Body-blob" class="headerlink" title="5）Body.blob()"></a>5）Body.blob()</h3><ul><li>有时候，可能需要以原始二进制格式使用主体，不用查看和修改。</li><li>可以使用Body.blob()将主体内容转换为Blob实例。</li><li><strong>Body.blob()方法返回期约，解决为将缓冲区转存得到的Blob实例</strong>。</li><li>下面的代码展示了在Response对象上使用Body.blob()：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">&#x27;https://foo.com&#x27;</span>) </span><br><span class="line">    .then(<span class="function">(<span class="params">response</span>) =&gt;</span> response.blob()) </span><br><span class="line">    .then(<span class="built_in">console</span>.log); </span><br><span class="line"><span class="comment">// Blob(...) &#123;size:..., type: &quot;...&quot;&#125;</span></span><br></pre></td></tr></table></figure><ul><li>以下代码展示了在Request对象上使用Body.blob()：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> request = <span class="keyword">new</span> Request(<span class="string">&#x27;https://foo.com&#x27;</span>, &#123; <span class="attr">method</span>:<span class="string">&#x27;POST&#x27;</span>, <span class="attr">body</span>: <span class="string">&#x27;abcdefg&#x27;</span> &#125;); </span><br><span class="line">request.blob().then(<span class="built_in">console</span>.log); </span><br><span class="line"><span class="comment">// Blob(7) &#123;size: 7, type: &quot;text/plain;charset=utf-8&quot;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="6）一次性流"><a href="#6）一次性流" class="headerlink" title="6）一次性流"></a>6）一次性流</h3><ul><li>因为Body混入是构建在ReadableStream之上的，所以<strong>主体流只能使用一次</strong>。</li><li>这意味着所有主体混入方法都只能调用一次，再次调用就会抛出错误。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">&#x27;https://foo.com&#x27;</span>) </span><br><span class="line">    .then(<span class="function">(<span class="params">response</span>) =&gt;</span> response.blob().then(<span class="function">() =&gt;</span> response.blob())); </span><br><span class="line"><span class="comment">// TypeError: Failed to execute &#x27;blob&#x27; on &#x27;Response&#x27;: body stream is locked </span></span><br><span class="line"><span class="keyword">let</span> request = <span class="keyword">new</span> Request(<span class="string">&#x27;https://foo.com&#x27;</span>, &#123; <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>, <span class="attr">body</span>: <span class="string">&#x27;foobar&#x27;</span> &#125;); </span><br><span class="line">request.blob().then(<span class="function">() =&gt;</span> request.blob()); </span><br><span class="line"><span class="comment">// TypeError: Failed to execute &#x27;blob&#x27; on &#x27;Request&#x27;: body stream is locked </span></span><br></pre></td></tr></table></figure><ul><li>即使是在读取流的过程中，所有这些方法也会在它们被调用时给ReadableStream加锁，以阻止其他读取器访问：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">&#x27;https://foo.com&#x27;</span>) </span><br><span class="line">    .then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123; </span><br><span class="line">        response.blob(); <span class="comment">// 第一次调用给流加锁</span></span><br><span class="line">        response.blob(); <span class="comment">// 第二次调用再次加锁会失败</span></span><br><span class="line">    &#125;); </span><br><span class="line"><span class="comment">// TypeError: Failed to execute &#x27;blob&#x27; on &#x27;Response&#x27;: body stream is locked </span></span><br><span class="line"><span class="keyword">let</span> request = <span class="keyword">new</span> Request(<span class="string">&#x27;https://foo.com&#x27;</span>, &#123; <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>, <span class="attr">body</span>: <span class="string">&#x27;foobar&#x27;</span> &#125;); </span><br><span class="line">request.blob(); <span class="comment">// 第一次调用给流加锁</span></span><br><span class="line">request.blob(); <span class="comment">// 第二次调用再次加锁会失败</span></span><br><span class="line"><span class="comment">// TypeError: Failed to execute &#x27;blob&#x27; on &#x27;Request&#x27;: body stream is locked </span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;五、Fetch-API&quot;&gt;&lt;a href=&quot;#五、Fetch-API&quot; class=&quot;headerlink&quot; title=&quot;五、Fetch API&quot;&gt;&lt;/a&gt;五、Fetch API&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Fetch API则必须是异步&lt;/li&gt;
&lt;/ul&gt;
&lt;</summary>
      
    
    
    
    <category term="前端学习笔记" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="JS" scheme="http://example.com/categories/JS/"/>
    
    <category term="Fetch" scheme="http://example.com/categories/Fetch/"/>
    
    
    <category term="JS学习" scheme="http://example.com/tags/JS%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript学习笔记（四十八）网络请求与远程资源（二）</title>
    <link href="http://example.com/2021/12/24/js-49/"/>
    <id>http://example.com/2021/12/24/js-49/</id>
    <published>2021-12-24T06:24:34.000Z</published>
    <updated>2021-12-25T11:57:34.564Z</updated>
    
    <content type="html"><![CDATA[<h1 id="三、跨源资源共享"><a href="#三、跨源资源共享" class="headerlink" title="三、跨源资源共享"></a>三、跨源资源共享</h1><ul><li><p><strong>跨源资源共享(CORS, Cross-Origin Resource Sharing)定义了浏览器与服务器如何实现跨源通信</strong>。</p></li><li><p>CORS背后的基本思路就是<strong>使用自定义的HTTP头部允许浏览器和服务器相互了解，以确实请求或响应应该成功还是失败</strong>。</p></li><li><p>对于简单的请求，比如GET或POST请求，没有自定义头部，而且请求体是text/plain类型，这样的请求在发送时会有一个额外的头部叫Origin。Origin头部包含发送请求的页面的源(协议域名和端口)，以便服务器确定是否为其提供响应。</p></li><li><p><strong>现代浏览器通过XMLHttpRequest对象原生支持CORS。</strong></p></li><li><p>要向不同域的源发送请求，可以使用标准XHR对象并给open()方法传入一个绝对URL。</p></li><li><p>跨域XHR对象允许访问status和statusText属性，也允许同步请求。</p></li><li><p>跨域XHR对象有以下额外限制：</p><ul><li>不能使用setRequestHeader()设置自定义头部。</li><li>不能发送和接收cookie。</li><li>getAllResponseHeaders()方法始终返回空字符串。</li></ul></li></ul><h2 id="1、预检请求"><a href="#1、预检请求" class="headerlink" title="1、预检请求"></a>1、预检请求</h2><ul><li>CORS通过一种叫预检请求的服务器验证机制，允许使用自定义头部、除GET和POST之外的方法，以及不同请求体内容类型。</li><li><strong>这个请求使用OPTIONS方法发送并包含以下头部</strong>。</li></ul><img lazyload src="/images/loading.svg" data-src="/2021/12/24/js-49/pic1.png" class title="# tu1"><ul><li>在这个请求发送后，服务器可以确定是否允许这种类型的请求。</li><li>服务器会通过在响应中发送如下头部与浏览器沟通这些信息。</li></ul><img lazyload src="/images/loading.svg" data-src="/2021/12/24/js-49/pic2.png" class title="# tu1"><h2 id="2、凭据请求"><a href="#2、凭据请求" class="headerlink" title="2、凭据请求"></a>2、凭据请求</h2><ul><li>默认情况下，跨源请求不提供凭据（cookie、HTTP认证和客户端SSL证书）。</li><li>可以通过将withCredentials属性设置为true来表明请求会发送凭据。如果服务器允许带凭据的请求，那么可以在响应中包含如下HTTP头部：</li></ul><p>Access-Control-Allow-Credentials: true </p><h1 id="四、替代性跨源技术"><a href="#四、替代性跨源技术" class="headerlink" title="四、替代性跨源技术"></a>四、替代性跨源技术</h1><h2 id="1、图片探测"><a href="#1、图片探测" class="headerlink" title="1、图片探测"></a>1、图片探测</h2><ul><li>图片探测是利用<code>&lt;img&gt;</code>标签实现跨域通信的最早的一种技术。</li><li>原理是：<strong>任何页面都可以跨域加载图片而不必担心限制</strong>。</li><li>图片探测是与服务器之间简单、跨域、单向的通信。</li><li>数据通过查询字符串发送，响应可以随意设置，不过一般是位图图片或值为204的状态码。</li></ul><h2 id="2、JSONP"><a href="#2、JSONP" class="headerlink" title="2、JSONP"></a>2、JSONP</h2><ul><li>JSONP是JSON with padding 的简写，是在Web服务上流行的一种JSON变体。</li><li><strong>JSONP格式包含两个部分：回调和数据</strong>：<ul><li>回调是在页面接收到响应之后应该调用的函数，通常回调函数的名称是通过请求来动态指定的。</li><li>数据就是作为参数传给回调函数的JSON数据。</li></ul></li><li>优点：相比于图片探测，使用JSONP可以直接访问响应，实现浏览器与服务器的双向通信。</li><li>缺点：①JSONP是从不同的域拉取可执行代码。如果这个域并不可信，则可能在响应中加人恶意内容。②不好确定JSONP请求是否失败。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;三、跨源资源共享&quot;&gt;&lt;a href=&quot;#三、跨源资源共享&quot; class=&quot;headerlink&quot; title=&quot;三、跨源资源共享&quot;&gt;&lt;/a&gt;三、跨源资源共享&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;跨源资源共享(CORS, Cross-Origin Res</summary>
      
    
    
    
    <category term="前端学习笔记" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="JS" scheme="http://example.com/categories/JS/"/>
    
    <category term="跨域问题" scheme="http://example.com/categories/%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/"/>
    
    
    <category term="JS学习" scheme="http://example.com/tags/JS%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
</feed>
