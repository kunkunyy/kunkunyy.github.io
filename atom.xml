<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>姚永坤的小窝</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-03-27T08:55:08.543Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>姚永坤</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python学习笔记（三）</title>
    <link href="http://example.com/2021/03/22/python-study-notes-3/"/>
    <id>http://example.com/2021/03/22/python-study-notes-3/</id>
    <published>2021-03-22T00:37:48.000Z</published>
    <updated>2021-03-27T08:55:08.543Z</updated>
    
    <content type="html"><![CDATA[<p>程序控制结构是每一种程序设计语言都会涉及到的一块，这边文章就来讲讲python中的程序设计结构。</p><h2 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h2><h3 id="用于条件组合的三个保留字"><a href="#用于条件组合的三个保留字" class="headerlink" title="用于条件组合的三个保留字"></a>用于条件组合的三个保留字</h3><p>设x，y为两个条件：</p><table><thead><tr><th align="center">操作符</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">x and y</td><td align="center">逻辑与</td></tr><tr><td align="center">x or y</td><td align="center">逻辑或</td></tr><tr><td align="center">not x</td><td align="center">逻辑非</td></tr></tbody></table><h3 id="单分支结构"><a href="#单分支结构" class="headerlink" title="单分支结构"></a>单分支结构</h3><ul><li>单分支结构的定义想必大家也比较清楚了。条件语句中单分支结构写法如下：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 判断条件:</span><br><span class="line">    执行语句</span><br></pre></td></tr></table></figure></li><li><em>当条件符合时，执行相应的语句；不符合时则跳过。</em>*</li></ul><h3 id="二分支结构"><a href="#二分支结构" class="headerlink" title="二分支结构"></a>二分支结构</h3><ul><li><p>二分支增添了else这个保留字，和if一起使用，及<strong>满足判断条件执行if中的内容，不满足就执行else中内容</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 判断条件:</span><br><span class="line">    执行语句</span><br><span class="line"><span class="keyword">else</span>：</span><br><span class="line">    执行语句</span><br></pre></td></tr></table></figure><h3 id="多分支结构"><a href="#多分支结构" class="headerlink" title="多分支结构"></a>多分支结构</h3></li><li><p>多分支结构在二分支的结构上引入了elif这个保留字，实际上等价于C语言中的else if：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 判断条件:</span><br><span class="line">    执行语句</span><br><span class="line"><span class="keyword">elif</span> 判断条件:</span><br><span class="line">    执行语句</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    执行语句</span><br></pre></td></tr></table></figure></li></ul><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><ul><li>python中的for循环需要和保留字in进行搭配使用，即：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 元素 <span class="keyword">in</span> 迭代对象:</span><br><span class="line">    执行语句</span><br></pre></td></tr></table></figure></li><li>这里我们要注意的是for语句是<strong>从可迭代的对象中依次取出每一个元素，然后再进行操作。</strong></li></ul><ol><li>和range()函数一起使用：<ul><li>range()用于生成一个可迭代的对象</li><li>range(start, stop[, step])<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    print(i)</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">----------------------------</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">3</span>):</span><br><span class="line">    print(i)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">----------------------------</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>,<span class="number">2</span>):</span><br><span class="line">    print(i)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure></li></ul></li><li>列表，元组，集合，字符串<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#遍历列表</span></span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    print(i)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line">----------------------------</span><br><span class="line"><span class="comment">#遍历元组</span></span><br><span class="line">b = (<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world&quot;</span>,<span class="string">&quot;!&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> b:</span><br><span class="line">    print(i)</span><br><span class="line">hello</span><br><span class="line">world</span><br><span class="line">!</span><br><span class="line">----------------------------</span><br><span class="line"><span class="comment">#遍历集合</span></span><br><span class="line">c = &#123;<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world&quot;</span>,<span class="string">&quot;!&quot;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> c:</span><br><span class="line">    print(i)</span><br><span class="line">hello</span><br><span class="line">world</span><br><span class="line">!</span><br><span class="line">----------------------------</span><br><span class="line"><span class="comment">#遍历字符串</span></span><br><span class="line">d = <span class="string">&quot;python&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> d:</span><br><span class="line">    print(i)</span><br><span class="line">p</span><br><span class="line">y</span><br><span class="line">t</span><br><span class="line">h</span><br><span class="line">o</span><br><span class="line">n</span><br></pre></td></tr></table></figure></li><li>字典<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">e = &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;sun&#x27;</span>,<span class="string">&#x27;habit&#x27;</span>:<span class="string">&#x27;sunshine&#x27;</span>&#125;</span><br><span class="line"><span class="comment">#遍历键值对</span></span><br><span class="line"><span class="keyword">for</span> i,j <span class="keyword">in</span> e.items():</span><br><span class="line">    print(i,j)</span><br><span class="line">name sun</span><br><span class="line">habit sunshine</span><br><span class="line">----------------------------</span><br><span class="line"><span class="comment">#遍历键</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> e.keys():</span><br><span class="line">    print(i)</span><br><span class="line">name</span><br><span class="line">habit</span><br><span class="line">----------------------------</span><br><span class="line"><span class="comment">#遍历值</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> e.values():</span><br><span class="line">    print(i)</span><br><span class="line">sun</span><br><span class="line">sunshine</span><br></pre></td></tr></table></figure></li><li>文件</li></ol><ul><li><p>fi是一个文件标识符，遍历其每行，产生循环</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> fi:</span><br><span class="line">    &lt;语句块&gt;</span><br></pre></td></tr></table></figure><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3></li><li><p>使用方法：</p><ul><li>当条件判断为True时，执行语句块；</li><li>当条件判断为False时，循环终止。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> &lt;条件&gt;：</span><br><span class="line">    &lt;语句块&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>与else同用：</p><ul><li>当while语句条件为true时，执行语句块内容，为false时执行else语句中的内容。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> &lt;条件&gt;:</span><br><span class="line">    &lt;语句块&gt;</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    &lt;语句块&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="循环保留字：continue和break"><a href="#循环保留字：continue和break" class="headerlink" title="循环保留字：continue和break"></a>循环保留字：continue和break</h3><h4 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h4><ul><li>被用来跳过当前循环块中的剩余语句，然后继续进行下一轮循环</li></ul><h4 id="break"><a href="#break" class="headerlink" title="break"></a>break</h4><ul><li>可以跳出 for 和 while 的循环体</li><li>break仅跳出当前最内层循环</li><li>示例：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&quot;PYTHON&quot;</span>:</span><br><span class="line">    <span class="keyword">if</span> i == <span class="string">&quot;T&quot;</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    print(i,end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&quot;正常退出&quot;</span>)</span><br><span class="line">PYTHON正常退出</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&quot;PYTHON&quot;</span>:</span><br><span class="line">    <span class="keyword">if</span> i == <span class="string">&quot;T&quot;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    print(i,end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&quot;正常退出&quot;</span>)</span><br><span class="line">PY</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;程序控制结构是每一种程序设计语言都会涉及到的一块，这边文章就来讲讲python中的程序设计结构。&lt;/p&gt;
&lt;h2 id=&quot;条件语句&quot;&gt;&lt;a href=&quot;#条件语句&quot; class=&quot;headerlink&quot; title=&quot;条件语句&quot;&gt;&lt;/a&gt;条件语句&lt;/h2&gt;&lt;h3 id=&quot;用</summary>
      
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    
    <category term="Skill" scheme="http://example.com/tags/Skill/"/>
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python 字符串连接方法</title>
    <link href="http://example.com/2021/03/16/python-skill-string-concatenation/"/>
    <id>http://example.com/2021/03/16/python-skill-string-concatenation/</id>
    <published>2021-03-16T02:41:58.000Z</published>
    <updated>2021-03-22T00:32:02.094Z</updated>
    
    <content type="html"><![CDATA[<p>之前在学习Python的时候对于字符串的连接并没有过多的研究，能应付考试就好啦。最近在写博客遇到相关内容去查了查，发现字符串连接的方法还是非常多的，这篇博客就来记录一下方便以后查看。</p><h1 id="字符串连接方法总结"><a href="#字符串连接方法总结" class="headerlink" title="字符串连接方法总结"></a>字符串连接方法总结</h1><p>假设’str1’，’str2’为两个字符串。</p><h2 id="‘-’-连接"><a href="#‘-’-连接" class="headerlink" title="‘+’ 连接"></a>‘+’ 连接</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = str1</span><br><span class="line">b = str2</span><br><span class="line">print(a+b)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;str1str2</span><br></pre></td></tr></table></figure><h2 id="模式串”-s”方法"><a href="#模式串”-s”方法" class="headerlink" title="模式串”%s”方法"></a>模式串”%s”方法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>（<span class="string">&#x27;%s%s&#x27;</span> %(str1,str2)）</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;str1str2</span><br></pre></td></tr></table></figure><h2 id="format-方法"><a href="#format-方法" class="headerlink" title="format 方法"></a>format 方法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">&quot;&#123;&#125;&#123;&#125;&quot;</span>.<span class="built_in">format</span>(str1，str2))</span><br><span class="line">print(<span class="string">&quot;&#123;0&#125;&#123;1&#125;&quot;</span>.<span class="built_in">format</span>(str1，str2))</span><br><span class="line">print(<span class="string">&quot;&#123;c&#125;&#123;d&#125;&quot;</span>.<span class="built_in">format</span>(c=str1，d=str2))</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;str1str2</span><br></pre></td></tr></table></figure><h2 id="‘f-string’方法"><a href="#‘f-string’方法" class="headerlink" title="‘f-string’方法"></a>‘f-string’方法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">f&#x27;<span class="subst">&#123;str1&#125;</span><span class="subst">&#123;str2&#125;</span>&#x27;</span>) </span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;str1str2</span><br></pre></td></tr></table></figure><h2 id="join方法"><a href="#join方法" class="headerlink" title="join方法"></a>join方法</h2><ul><li>列表<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">&#x27;&#x27;</span>.join([str1,str2])) </span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;str1str2</span><br></pre></td></tr></table></figure></li><li>字典：只有键和值均为字符串时才可使用。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a=&#123;<span class="string">&#x27;20&#x27;</span>:<span class="string">&#x27;20&#x27;</span>,<span class="string">&#x27;520&#x27;</span>:<span class="string">&#x27;1314&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;&#x27;</span>.join(a))</span><br><span class="line">print(<span class="string">&#x27;&#x27;</span>.join(a.value（））) </span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;20520</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; &#x27;</span><span class="number">201314</span><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="通过-多行拼接"><a href="#通过-多行拼接" class="headerlink" title="通过() 多行拼接"></a>通过() 多行拼接</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">s = (</span><br><span class="line">    <span class="string">&#x27;Hello&#x27;</span></span><br><span class="line">    <span class="string">&#x27; &#x27;</span></span><br><span class="line">    <span class="string">&#x27;World&#x27;</span></span><br><span class="line">    <span class="string">&#x27;!&#x27;</span></span><br><span class="line">)</span><br><span class="line">print(s)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Hello World! </span><br></pre></td></tr></table></figure><h2 id="通过string模块中的Template对象拼接"><a href="#通过string模块中的Template对象拼接" class="headerlink" title="通过string模块中的Template对象拼接"></a>通过string模块中的Template对象拼接</h2></li><li>实现原理：通过Template初始化一个字符串。这些字符串中包含了一个个key。通过调用substitute或safe_subsititute，将key值与方法中传递过来的参数对应上，从而实现在指定的位置导入字符串。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> Template</span><br><span class="line">s = Template(<span class="string">&#x27;$&#123;s1&#125; $&#123;s2&#125;!&#x27;</span>)</span><br><span class="line">print(s.safe_substitute(s1=<span class="string">&#x27;Hello&#x27;</span>,s2=<span class="string">&#x27;World&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Hello World</span><br></pre></td></tr></table></figure><h2 id="空格自动连接"><a href="#空格自动连接" class="headerlink" title="空格自动连接"></a>空格自动连接</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;Hello&quot;</span> <span class="string">&quot;Nasus&quot;</span></span><br><span class="line"><span class="string">&#x27;HelloNasus&#x27;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;之前在学习Python的时候对于字符串的连接并没有过多的研究，能应付考试就好啦。最近在写博客遇到相关内容去查了查，发现字符串连接的方法还是非常多的，这篇博客就来记录一下方便以后查看。&lt;/p&gt;
&lt;h1 id=&quot;字符串连接方法总结&quot;&gt;&lt;a href=&quot;#字符串连接方法总结&quot; c</summary>
      
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    
    <category term="Skill" scheme="http://example.com/tags/Skill/"/>
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python max函数不同参数结果比较</title>
    <link href="http://example.com/2021/03/15/python-skill-max/"/>
    <id>http://example.com/2021/03/15/python-skill-max/</id>
    <published>2021-03-15T14:29:08.000Z</published>
    <updated>2021-03-17T09:25:19.451Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>&emsp; &emsp; 在菜鸟教程中对于max函数描述是这样的：max() 方法返回给定参数的最大值，参数可以为序列。这个描述只是客观的将这个函数的功能给描述出来了，但这只是一个模糊的定义。由于没有指定可传入参数的类型，所以说这就带给了这个函数无限种可能。现在就来讨论讨论吧！如果有哪些地方表述不是很正确希望大家在评论区指出来哦！</p><h2 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h2><p>&emsp; &emsp; 首先我们来看看最简单大数字类型。毋庸置疑，当参数是数字的时候，直接返回最大的数就好了。但是要注意的是<strong>这里的数字指的是一系列数，返回其中最大的。</strong><br>下面来看一个简单的例子。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">max</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>)</span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure><h2 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h2><p>&emsp; &emsp; 我们知道python中字符串是由单引号双引号括起来的一个字符序列。那么当输入max的变量为一个字符串它会返回给我们什么结果呢？</p><p>&emsp; &emsp; 我们先看下面这个例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;a=<span class="string">&#x27;1,6,0,4,5&#x27;</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">max</span>(a)</span><br><span class="line"><span class="string">&#x27;6&#x27;</span></span><br></pre></td></tr></table></figure><p>我们输入一个由单个数字组成的字符串，穿入max函数后返回了其中的 ‘6’ 这个字符。难道是将字符转化为数字然后再比较大小吗？那字符串中的 ‘,’ 又去哪了呢？那如果是字母又如何进行比较呢？来看下一个例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;b=<span class="string">&#x27;fabced&#x27;</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">max</span>(b)</span><br><span class="line"><span class="string">&#x27;f&#x27;</span></span><br></pre></td></tr></table></figure><p>这里变量b为一个字母组成的字符串，结果返回给我们的是字符 ‘f’ ，这里我们大致应该可以判断出来：<strong>当max函数的输入变量为一个字符串的时候，则返回字符串中字符所对应的ASCII码最大的那个字符。</strong></p><p>&emsp; &emsp; 为了验证这一结论我们利用下面这个例子进行验证：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;c=<span class="string">&#x27;1,a,2,c&#x27;</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">max</span>(c)</span><br><span class="line"><span class="string">&#x27;c&#x27;</span></span><br></pre></td></tr></table></figure><p>&emsp; &emsp; 从这个例子我们就可以验证刚刚的结论了：c这个字符串中字符’1’’a’’2’’c’对应的ASCII码的大小分别为49，97，50，99，所以字符’c’所对应的ASCII码值最大固返回字符’c’。那么字符’,’去哪了呢？实际上字符’,’也是参与了比较，由于它所对应的ASCII码为44最小，所以看似跟舍弃了一样。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;c=<span class="string">&#x27;1,a,2,c&#x27;</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">min</span>(c)</span><br><span class="line"><span class="string">&#x27;,&#x27;</span></span><br></pre></td></tr></table></figure><p>另外，max函数还可以对于传入的可迭代对象找出元素中的最大值。这里可迭代的对象主要是列表和字典</p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>同样对于列表，它满足可迭代这样一个特点，这里我们主要分四种情况来讨论：</p><ul><li>元素全为数字<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">max</span>(a)</span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure></li><li>元素全为字符<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;b=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>]</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">max</span>(b)</span><br><span class="line"><span class="string">&#x27;e&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;c=[<span class="string">&#x27;ab&#x27;</span>,<span class="string">&#x27;ac&#x27;</span>,<span class="string">&#x27;ad&#x27;</span>,<span class="string">&#x27;ae&#x27;</span>]</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">max</span>(c)</span><br><span class="line"><span class="string">&#x27;ae&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;d=[<span class="string">&#x27;1a&#x27;</span>,<span class="string">&#x27;1b&#x27;</span>,<span class="string">&#x27;2a&#x27;</span>,<span class="string">&#x27;2b&#x27;</span>]</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">max</span>(d)</span><br><span class="line"><span class="string">&#x27;2b&#x27;</span></span><br></pre></td></tr></table></figure>通过以上几个例子我们不难发现：</li><li><strong>列表中元素类型需一致；（前提条件）</strong></li><li><strong>若列表中元素数字类型值，则返回列表中元素的最大值；</strong></li><li><strong>若列表中元素为字符，字符转换为对应ASCII码值输出最大的；</strong></li><li><strong>若列表中元素为字符串，将组成字符串的每个字符的ASCII码相加，然后输出最大的。</strong></li></ul><h2 id="列表（元组）"><a href="#列表（元组）" class="headerlink" title="列表（元组）"></a>列表（元组）</h2><p>刚刚我们讨论了简单元素组成的列表作为参数的情况，接下来我们看一看由元组组成的列表：我们还是按照上面的步骤来。</p><ul><li><p>全为数字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;a=[(<span class="number">1</span>,<span class="number">3</span>),(<span class="number">2</span>,<span class="number">2</span>),(<span class="number">1</span>,<span class="number">4</span>),(<span class="number">3</span>,<span class="number">0</span>)]</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">max</span>(a)</span><br><span class="line">(<span class="number">3</span>,<span class="number">0</span>)</span><br></pre></td></tr></table></figure></li><li><p>对应位置元素类型相同</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;b=[(<span class="string">&#x27;a&#x27;</span>,<span class="number">1</span>),(<span class="string">&#x27;b&#x27;</span>,<span class="number">5</span>),(<span class="string">&#x27;a&#x27;</span>,<span class="number">6</span>)]</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">max</span>(b)</span><br><span class="line">(<span class="string">&#x27;b&#x27;</span>,<span class="number">5</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;c=[(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;A&#x27;</span>),(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;B&#x27;</span>)]</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">max</span>(c)</span><br><span class="line">(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;B&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>元组大小不一致</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;d=[(<span class="number">1</span>,<span class="number">4</span>),(<span class="number">3</span>,<span class="number">1</span>,<span class="number">5</span>),(<span class="number">3</span>,<span class="number">1</span>)]</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">max</span>(d)</span><br><span class="line">(<span class="number">3</span>,<span class="number">1</span>,<span class="number">5</span>)</span><br></pre></td></tr></table></figure></li><li><p>对应位置元素不同</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;e=[(<span class="number">6</span>,<span class="number">4</span>),(<span class="number">6</span>,<span class="number">1</span>,<span class="number">5</span>),(<span class="number">3</span>,<span class="string">&#x27;a&#x27;</span>)]</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">max</span>(e)</span><br><span class="line">(<span class="number">6</span>,<span class="number">4</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;f=[(<span class="number">1</span>,<span class="number">4</span>),(<span class="string">&#x27;a&#x27;</span>,<span class="number">2</span>),(<span class="number">3</span>,<span class="number">1</span>)]</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">max</span>(e)</span><br><span class="line">TypeError: <span class="string">&#x27;&gt;&#x27;</span> <span class="keyword">not</span> supported between instances of <span class="string">&#x27;str&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;int&#x27;</span></span><br></pre></td></tr></table></figure><p>通过以上几个例子对比分析我们不难发现：</p></li><li><p>按照元组内部排列顺序<strong>从前到后对应位置</strong>进行比较，<strong>如果对应位置元素类型和大小相同，则比较下一个位置的元素</strong>，按照此规则进行比较直至<strong>找到最大值或者出错</strong>。</p></li><li><p>类型不匹配：列表元组中当比较到<strong>对应位置</strong>发现存在相比较的两个元素<strong>类型不相同</strong>时报错；</p></li><li><p>当比较位置<strong>不存在元素</strong>时，默认为NUL；</p></li><li><p><strong>当比较的元素为数字类型值，则返回列表中元素的最大值；</strong></p></li><li><p><strong>当比较的元素为字符，字符转换为对应ASCII码值返回；</strong></p></li><li><p><strong>当比较的元素为字符串，将组成字符串的每个字符的ASCII码相加返回。</strong></p></li></ul><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><ul><li>对于字典类型来说相比较容易一些，只需要比较字典的键值，输出最大的键值；</li><li>键值的比较同上。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;a=&#123;<span class="number">1</span>:<span class="number">1</span>,<span class="number">2</span>:<span class="number">19</span>,<span class="number">3</span>:<span class="number">100</span>,<span class="number">4</span>:<span class="number">1</span>&#125;</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">max</span>(a)</span><br><span class="line"><span class="number">4</span></span><br><span class="line">&gt;&gt;&gt;b=&#123;<span class="number">20</span>:<span class="number">21</span>,<span class="number">5</span>:<span class="number">20</span>,<span class="number">13</span>:<span class="number">14</span>&#125;</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">max</span>(b)</span><br><span class="line"><span class="number">20</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&amp;emsp; &amp;emsp; 在菜鸟教程中对于max函数描述是这样的：max() 方法返回给定参数的最大值，参数可以为序列。这个描述只是客观的</summary>
      
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    
    <category term="Skill" scheme="http://example.com/tags/Skill/"/>
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python学习笔记（二）</title>
    <link href="http://example.com/2021/03/15/python-study-notes-2/"/>
    <id>http://example.com/2021/03/15/python-study-notes-2/</id>
    <published>2021-03-15T12:10:35.000Z</published>
    <updated>2021-03-16T04:06:36.873Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h1><p>这一章主要是对基本数据类型的学习，包括数字和字符串类型以及对应的操作。</p><h2 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h2><ul><li>类型：整数、浮点数、复数</li></ul><h3 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h3><ul><li><p>浮点数间运算存在不确定尾数，如下图所示：</p><ul><li><img lazyload src="/images/loading.svg" data-src="/2021/03/15/python-study-notes-2/p1.png" class title="first"></li><li>原因：浮点数是小数的一种二进制表示方法，由于浮点数存在精度限制，在使用浮点数做运算时就可能会产生不确定尾数。</li><li>解决方法：round(x,d)对x四舍五入，d是小数截取位数。</li></ul></li><li><p>科学计数法</p><img lazyload src="/images/loading.svg" data-src="/2021/03/15/python-study-notes-2/p2.png" class title="second"></li></ul><h3 id="复数"><a href="#复数" class="headerlink" title="复数"></a>复数</h3><ul><li>实、虚部获取方法：z为一复数<ul><li>实部：z.real</li><li>虚部：z.imag</li></ul></li></ul><h3 id="数字类型关系"><a href="#数字类型关系" class="headerlink" title="数字类型关系"></a>数字类型关系</h3><ul><li>不同类型间可进行混合运算，生成结果为”最宽”类型</li><li>整数 &gt; 浮点数 &gt; 复数</li></ul><h2 id="数值运算函数"><a href="#数值运算函数" class="headerlink" title="数值运算函数"></a>数值运算函数</h2><h3 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h3><h4 id="abs-x"><a href="#abs-x" class="headerlink" title="abs(x)"></a>abs(x)</h4><ul><li>对于x取绝对值</li></ul><h4 id="sqrt-x"><a href="#sqrt-x" class="headerlink" title="sqrt(x)"></a>sqrt(x)</h4><ul><li>x的平方根</li></ul><h4 id="pow-x-y"><a href="#pow-x-y" class="headerlink" title="pow(x,y)"></a>pow(x,y)</h4><ul><li>x的y次幂</li></ul><h4 id="round-x-d"><a href="#round-x-d" class="headerlink" title="round(x,[d])"></a>round(x,[d])</h4><ul><li>对于数x，四舍五入保留d位</li></ul><h4 id="max-min"><a href="#max-min" class="headerlink" title="max()/min()"></a>max()/min()</h4><ul><li>返回给定参数的最大值</li><li>参数可以为：数字、字符串、列表、元组</li><li>不同参数返回结果请参考这篇文章：<a href="/2021/03/15/python-skill-max/" title="max不同参数比较">max不同参数比较</a></li></ul><h4 id="int-x"><a href="#int-x" class="headerlink" title="int(x)"></a>int(x)</h4><ul><li>将x变成整数，直接舍弃小数部分；</li><li>参数：数字，字符</li></ul><h4 id="float-x"><a href="#float-x" class="headerlink" title="float(x)"></a>float(x)</h4><ul><li>将x变成浮点数，增加小数部分</li><li>参数：数字，字符</li></ul><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="字符串表示方法"><a href="#字符串表示方法" class="headerlink" title="字符串表示方法"></a>字符串表示方法</h3><ul><li>一对单、双或三引号构成</li><li><strong>多行字符串表示方法：</strong><ul><li>三引号</li><li>小括号</li></ul></li><li>单、双、三引号的使用：  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;这里有个&quot;双引号&quot;哦&#x27;</span> </span><br><span class="line"><span class="string">&quot;这里有个&#x27;单引号&#x27;嘎&quot;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27; 这里既有&#x27;单引号&#x27;嘎，又有&quot;双引号&quot;哦  &#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="字符串排序"><a href="#字符串排序" class="headerlink" title="字符串排序"></a>字符串排序</h3><ul><li>正向递增序号以最左侧字符序号为0，向右依次递增，最右侧字符序号为L-1；</li><li>反向递减序号以最右侧字符序号为-1，向左依次递减，最左侧字符序号为-L。</li></ul><h3 id="字符串字符的获取"><a href="#字符串字符的获取" class="headerlink" title="字符串字符的获取"></a>字符串字符的获取</h3><ul><li>假设变量name为一字符串，其中N、M均为索引号：<ul><li>获取单个字符：name[N];</li><li>获取一段字符串：name[N:M];</li><li>根据步长K切片：name[N:M:K];</li></ul></li></ul><h2 id="字符串的操作符、处理函数和方法"><a href="#字符串的操作符、处理函数和方法" class="headerlink" title="字符串的操作符、处理函数和方法"></a>字符串的操作符、处理函数和方法</h2><h3 id="字符串的操作符"><a href="#字符串的操作符" class="headerlink" title="字符串的操作符"></a>字符串的操作符</h3><ol><li>x+y<ul><li>连接两个字符串x和y</li><li><a href="/2021/03/16/python-skill-string-concatenation/" title="字符串连接方法">字符串连接方法</a></li></ul></li><li>x*n<ul><li>复制n次字符串x</li></ul></li><li>x in s<ul><li>判断x是否是s的子串，，是返回true，否返回false</li></ul></li></ol><h3 id="字符串常用处理函数和方法"><a href="#字符串常用处理函数和方法" class="headerlink" title="字符串常用处理函数和方法"></a>字符串常用处理函数和方法</h3><ul><li>len(x)：返回字符串长度</li><li>str(x)：任意类型x对应的字符串形式</li><li>str.lower()/upper()<ul><li>返回新的字符串，全部字符小写/大写</li></ul></li><li>str.split(sep)<ul><li>返回的是一个列表，将源字符串按照sep进行分割</li></ul></li><li>str.count(sub)<ul><li>返回字串sub在str中出现的次数</li></ul></li><li>str.replace(old,new)<ul><li>返回新的字符串，将str中所有old子串替换为new</li></ul></li><li>str.center(width[,fillchart])<ul><li>字符串str根据宽度width居中，fillchart为剩余区域的填充字符</li></ul></li><li>str.join(item)<ul><li>在item除最后一个元素外增加一个str</li><li>多用于字符串分割</li></ul></li></ul><h3 id="字符串类型格式化"><a href="#字符串类型格式化" class="headerlink" title="字符串类型格式化"></a>字符串类型格式化</h3><ul><li>&lt;模板字符串&gt;.format(&lt;逗号分隔的参数&gt;)</li><li>槽：<img lazyload src="/images/loading.svg" data-src="/2021/03/15/python-study-notes-2/p3.png" class title="third"></li><li>槽内部对格式化的配置方式<img lazyload src="/images/loading.svg" data-src="/2021/03/15/python-study-notes-2/p4.png" class title="third"><img lazyload src="/images/loading.svg" data-src="/2021/03/15/python-study-notes-2/p5.png" class title="third"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;&#123;0:=^20&#125;.format(&quot;</span>python<span class="string">&quot;)&quot;</span></span><br><span class="line"><span class="string">&#x27;=======PYTHON======&#x27;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第三章&quot;&gt;&lt;a href=&quot;#第三章&quot; class=&quot;headerlink&quot; title=&quot;第三章&quot;&gt;&lt;/a&gt;第三章&lt;/h1&gt;&lt;p&gt;这一章主要是对基本数据类型的学习，包括数字和字符串类型以及对应的操作。&lt;/p&gt;
&lt;h2 id=&quot;数字类型&quot;&gt;&lt;a href=&quot;#数字</summary>
      
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    
    <category term="study notes" scheme="http://example.com/tags/study-notes/"/>
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python学习笔记（一）</title>
    <link href="http://example.com/2021/03/15/python-study-note/"/>
    <id>http://example.com/2021/03/15/python-study-note/</id>
    <published>2021-03-15T06:46:30.000Z</published>
    <updated>2021-03-15T12:09:12.154Z</updated>
    
    <content type="html"><![CDATA[<pre><code>本科学习python课程笔记，之前使用的有道云笔记记载，现在将它搬运到博客中。第一章是一些基本概念，所以从第二章开始记的。所以，一起加油咯！</code></pre><h1 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h1><p>主要是turtle库的使用，然后简单介绍了python中的字符串的使用，第三章会详细讲字符串。</p><h2 id="字符串简单介绍"><a href="#字符串简单介绍" class="headerlink" title="字符串简单介绍"></a>字符串简单介绍</h2><h3 id="字符串的两种序号表达"><a href="#字符串的两种序号表达" class="headerlink" title="字符串的两种序号表达"></a>字符串的两种序号表达</h3><ul><li>假设字符串长度为L：<ul><li>正向递增序号以最左侧字符序号为0，向右依次递增，最右侧字符序号为L-1；</li><li>反向递减序号以最右侧字符序号为-1，向左依次递减，最左侧字符序号为-L。</li></ul></li><li><img lazyload src="/images/loading.svg" data-src="/2021/03/15/python-study-note/p1.png" class title="first"></li></ul><h3 id="字符串截取范围"><a href="#字符串截取范围" class="headerlink" title="字符串截取范围"></a>字符串截取范围</h3><ul><li>TempStr[0:-1]    从0到-1，但不包括-1</li><li><strong>口诀：前取后不取</strong></li></ul><h2 id="turtle库"><a href="#turtle库" class="headerlink" title="turtle库"></a>turtle库</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>&emsp; &emsp; 实际上我们使用turtle库来绘制图形就是：在操纵“小海龟”在我们所定义的画布（canvas）（或者叫做窗体也可以）上进行爬行，它行动留下的痕迹就是我们所要绘制图形的轮廓。<br>&emsp; &emsp; 在了解绘制原理后我们就对于这个必不可少的画布进行了解和学习。</p><h3 id="画布"><a href="#画布" class="headerlink" title="画布"></a>画布</h3><h4 id="坐标轴"><a href="#坐标轴" class="headerlink" title="坐标轴"></a>坐标轴</h4><p>&emsp; &emsp; 一般情况下，当你创建了一个画布它就会对应的生成坐标轴，一方面是为了方便我们绘制图形；另一方面也是为了避免造成歧义导致出错。<br>&emsp; &emsp; 下图是对应坐标系的规定：</p><img lazyload src="/images/loading.svg" data-src="/2021/03/15/python-study-note/p2.png" class title="second"><img lazyload src="/images/loading.svg" data-src="/2021/03/15/python-study-note/p3.png" class title="third"><h4 id="画布（窗体）的创建"><a href="#画布（窗体）的创建" class="headerlink" title="画布（窗体）的创建"></a>画布（窗体）的创建</h4><ul><li>turtle.screensize(canvwidth=None,canvheight=None,bg=None)<ul><li>参数：画布宽、高、背景色</li></ul></li><li>turtle.setup(width, height, startx, starty)<ul><li>参数：窗体宽、高、窗体左上角顶点的横纵坐标</li><li>输入宽和高为整数时,表示像素;为小数时,表示占据电脑屏幕的比例</li></ul></li></ul><h3 id="画笔"><a href="#画笔" class="headerlink" title="画笔"></a>画笔</h3><p>&emsp; &emsp;默认情况下，我们的“画笔”是一个位于坐标原点面朝正向的小海龟，我们通过控制小海龟来完成图形的绘制。</p><h4 id="画笔的属性"><a href="#画笔的属性" class="headerlink" title="画笔的属性"></a>画笔的属性</h4><ul><li>turtle.pensize/width(width)<ul><li>用于设置画笔宽度</li></ul></li><li>turtle.pencolor()<ul><li>用于设置画笔颜色</li></ul></li><li>turtle.speed(x)<ul><li>用于设置画笔速度，0≤x≤10</li></ul></li></ul><h4 id="画笔移动状态"><a href="#画笔移动状态" class="headerlink" title="画笔移动状态"></a>画笔移动状态</h4><ul><li>turtle.forward/backward(d)<ul><li>向前/向后移动距离为d</li></ul></li><li>turtle.right/left(r)<ul><li>向左/右转动度数</li></ul></li><li>turtle.down/up()<ul><li>画笔落下/抬起</li></ul></li><li>turtle.fillcolor()<ul><li>给绘制的图形填充颜色</li></ul></li><li>turtle.circle(r,angle)<ul><li>绘制圆，半径正负均可，angle为角度</li><li><img lazyload src="/images/loading.svg" data-src="/2021/03/15/python-study-note/p4.png" class title="forth"></li><li><img lazyload src="/images/loading.svg" data-src="/2021/03/15/python-study-note/p5.png" class title="fifth"></li></ul></li><li>turtle.done()<ul><li>结束程序</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;pre&gt;&lt;code&gt;本科学习python课程笔记，之前使用的有道云笔记记载，现在将它搬运到博客中。
第一章是一些基本概念，所以从第二章开始记的。所以，一起加油咯！
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&quot;第二章&quot;&gt;&lt;a href=&quot;#第二章&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    
    <category term="study notes" scheme="http://example.com/tags/study-notes/"/>
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Markdown学习笔记</title>
    <link href="http://example.com/2021/03/12/markdown-study-notes/"/>
    <id>http://example.com/2021/03/12/markdown-study-notes/</id>
    <published>2021-03-12T10:55:11.000Z</published>
    <updated>2021-03-15T01:28:45.038Z</updated>
    
    <content type="html"><![CDATA[<p> 之前只是用markdown写过博客并没有系统的去了markdown语法，现在将创建博客后的第一篇文章用来记录我学习markdown的经历以及对于知识点的理解。</p><h1 id="markdown官方介绍和个人理解"><a href="#markdown官方介绍和个人理解" class="headerlink" title="markdown官方介绍和个人理解"></a>markdown官方介绍和个人理解</h1><h2 id="菜鸟教程介绍"><a href="#菜鸟教程介绍" class="headerlink" title="菜鸟教程介绍"></a>菜鸟教程介绍</h2><ul><li>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。</li><li>Markdown 语言在 2004 由约翰·格鲁伯（英语：John Gruber）创建。</li><li>Markdown 编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式的文档。</li><li>Markdown 编写的文档后缀为 .md, .markdown。</li></ul><h2 id="个人理解"><a href="#个人理解" class="headerlink" title="个人理解"></a>个人理解</h2><ul><li>Markdown是一种纯文本标记语言</li><li>语法简单，容易上手</li><li>按照语法，自动排版，格式易操作</li><li>……</li></ul><h1 id="语法学习"><a href="#语法学习" class="headerlink" title="语法学习"></a>语法学习</h1><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>标题有两种书写格式，推荐使用第一种。</p><h3 id="号标识标题"><a href="#号标识标题" class="headerlink" title="# 号标识标题"></a># 号标识标题</h3><ul><li>用法：使用 # 号可表示 1-6 级标题，每升一级添加一个 # 号</li><li>易错点：最后一个 # 号后空一格</li><li>示例：<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 一级标题</span></span><br><span class="line"><span class="section">## 二级标题</span></span><br></pre></td></tr></table></figure></li><li>结果<blockquote><img lazyload src="/images/loading.svg" data-src="/2021/03/12/markdown-study-notes/head1.png" class title="# 标识标题">  </blockquote></li></ul><h3 id="和-标记标题"><a href="#和-标记标题" class="headerlink" title="= 和 - 标记标题"></a>= 和 - 标记标题</h3><ul><li>用法：在对应文字下方输入 = （-）即可</li><li>示例：<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">一级标题</span><br><span class="line">=</span><br><span class="line">二级标题</span><br><span class="line">-</span><br></pre></td></tr></table></figure></li><li>结果<blockquote><img lazyload src="/images/loading.svg" data-src="/2021/03/12/markdown-study-notes/head1.png" class title="# 标识标题"></blockquote></li></ul><h2 id="段落格式"><a href="#段落格式" class="headerlink" title="段落格式"></a>段落格式</h2><h3 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h3><ul><li>实现方式：<ul><li>句子末尾空两格然后回车</li><li>空一行实现换行</li></ul></li></ul><h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">斜体</span><br><span class="line"><span class="emphasis">*猫猫头*</span></span><br><span class="line"><span class="emphasis">_猫猫头_</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">粗体</span><br><span class="line"><span class="strong">**猫猫头**</span></span><br><span class="line"><span class="strong">__猫猫头__</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">粗斜体</span><br><span class="line"><span class="strong">**<span class="emphasis">*猫猫头<span class="strong">**<span class="emphasis">*</span></span></span></span></span><br><span class="line"><span class="strong"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">__<span class="emphasis">_猫猫头<span class="strong">__<span class="emphasis">_</span></span></span></span></span></span></span></span></span><br></pre></td></tr></table></figure><h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><ul><li>实现方式：<ul><li>在一行中用<strong>三个以上</strong>的星号、减号、底线来建立一个分隔线。</li><li><strong>行内不能有其他东西</strong>。</li><li>可以在星号或是减号中间插入空格。</li></ul></li></ul><h3 id="删除线（在文字上添加删除线）"><a href="#删除线（在文字上添加删除线）" class="headerlink" title="删除线（在文字上添加删除线）"></a>删除线（在文字上添加删除线）</h3><ul><li>实现方式：<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~~猫猫头的小窝~~</span><br></pre></td></tr></table></figure></li><li>效果展示：<br><del>猫猫头的小窝</del></li></ul><h3 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h3><ul><li>实现方式：<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">u</span>&gt;</span></span>猫猫头的小窝<span class="xml"><span class="tag">&lt;/<span class="name">u</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li><li>效果展示：<br><u>猫猫头的小窝</u></li></ul><h3 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h3><ul><li>补充说明词语或者句子内容。</li><li>可用于标注出处，翻译等。</li><li>实现方式：<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">“[^情不知所起，一往而深。]”</span><br><span class="line">[<span class="symbol">^情不知所起，一往而深。</span>]:<span class="link">感情不知道什么时候就开始了，而且愈来愈深厚。</span></span><br></pre></td></tr></table></figure></li><li>效果展示：<br>“<a href="%E6%84%9F%E6%83%85%E4%B8%8D%E7%9F%A5%E9%81%93%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E5%B0%B1%E5%BC%80%E5%A7%8B%E4%BA%86%EF%BC%8C%E8%80%8C%E4%B8%94%E6%84%88%E6%9D%A5%E6%84%88%E6%B7%B1%E5%8E%9A%E3%80%82">情不知所起，一往而深。</a>”</li></ul><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="有序、无序列表"><a href="#有序、无序列表" class="headerlink" title="有序、无序列表"></a>有序、无序列表</h3><ul><li>实现方式：<ul><li>有序：数字并加上 . 号来表示。</li><li>无序：星号(*)、加号(+)或是减号(-)作为列表标记，且标记后面要添加一个空格。</li></ul></li></ul><h3 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h3><ul><li>实现方式：在子列表中的选项前面添加四个空格（或者一个Tab键）</li><li>例子：<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 猫猫头：</span><br><span class="line"><span class="bullet">    -</span> 猫猫头的代码库</span><br><span class="line"><span class="bullet">    -</span> 猫猫头的图片库</span><br></pre></td></tr></table></figure><blockquote><img lazyload src="/images/loading.svg" data-src="/2021/03/12/markdown-study-notes/list.png" class title="# 嵌套列表"></blockquote></li></ul><h2 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h2><ul><li>实现方式：在段落开头使用 &gt; 符号，后面紧跟一个空格符号。</li><li>嵌套使用：<ul><li>区块嵌套：每增加一个 &gt; 符号增加一层。</li><li>区块嵌套列表：<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; + 猫猫头的代码库</span></span><br><span class="line"><span class="quote">&gt; + 猫猫头的图片库</span></span><br></pre></td></tr></table></figure><blockquote><ul><li>猫猫头的代码库</li><li>猫猫头的图片库</li></ul></blockquote></li><li>列表嵌套区块：<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 猫猫头</span><br><span class="line"><span class="code">    &gt; 猫猫头的图片库</span></span><br><span class="line"><span class="code">    &gt; 猫猫头的代码库</span></span><br></pre></td></tr></table></figure></li></ul><ol><li>猫猫头<blockquote><p>猫猫头的图片库<br>猫猫头的代码库</p></blockquote></li></ol></li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><ul><li>实现方式：<ul><li>代码区块：<ul><li>使用 4 个空格或者一个制表符（Tab 键）。</li><li>用 ``` 包裹一段代码，并指定一种语言，也可以不指定（推荐）。</li></ul></li></ul></li></ul><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><ul><li>实现方法：<code>[链接名称](链接地址)</code>或者<code>&lt;链接地址&gt;</code></li><li>例子：<code>[百度](www.baidu.com)</code></li></ul><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><ul><li>实现方式：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![alt 属性文本](图片地址)</span><br><span class="line">![alt 属性文本](图片地址 &quot;可选标题&quot;)</span><br></pre></td></tr></table></figure><ul><li>开头一个感叹号 !</li><li>接着一个方括号，里面放上图片的替代文字</li><li>接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上选择性的 ‘title’ 属性的文字。</li></ul></li><li>补充：可以使用<code>&lt;img&gt;</code>标签，用于指定图片的高度与宽度。</li></ul><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><ul><li>实现方式：<ul><li>使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行。</li><li>-: 设置内容和标题栏居右对齐。</li><li>:- 设置内容和标题栏居左对齐。</li><li>:-: 设置内容和标题栏居中对齐。</li></ul></li><li>示例：<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| 左对齐 | 右对齐 | 居中对齐 |</span><br><span class="line">| :-----| ----: | :----: |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br></pre></td></tr></table></figure><blockquote><img lazyload src="/images/loading.svg" data-src="/2021/03/12/markdown-study-notes/form.png" class title="# 表格"></blockquote></li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这里就暂时总结了markdown一些基本用法，能够满足用来写博客就可以了，后面继续加油吧！有什么问题可以留言哦！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt; 之前只是用markdown写过博客并没有系统的去了markdown语法，现在将创建博客后的第一篇文章用来记录我学习markdown的经历以及对于知识点的理解。&lt;/p&gt;
&lt;h1 id=&quot;markdown官方介绍和个人理解&quot;&gt;&lt;a href=&quot;#markdown官方介绍和个人</summary>
      
    
    
    
    <category term="markdown" scheme="http://example.com/categories/markdown/"/>
    
    
    <category term="markdown" scheme="http://example.com/tags/markdown/"/>
    
    <category term="study notes" scheme="http://example.com/tags/study-notes/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2021/03/10/hello-world/"/>
    <id>http://example.com/2021/03/10/hello-world/</id>
    <published>2021-03-10T05:13:50.867Z</published>
    <updated>2021-03-10T05:13:50.868Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a class="link" href="https://hexo.io/">Hexo<i class="fas fa-external-link-alt"></i></a>! This is your very first post. Check <a class="link" href="https://hexo.io/docs/">documentation<i class="fas fa-external-link-alt"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link" href="https://hexo.io/docs/troubleshooting.html">troubleshooting<i class="fas fa-external-link-alt"></i></a> or you can ask me on <a class="link" href="https://github.com/hexojs/hexo/issues">GitHub<i class="fas fa-external-link-alt"></i></a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a class="link" href="https://hexo.io/docs/writing.html">Writing<i class="fas fa-external-link-alt"></i></a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a class="link" href="https://hexo.io/docs/server.html">Server<i class="fas fa-external-link-alt"></i></a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a class="link" href="https://hexo.io/docs/generating.html">Generating<i class="fas fa-external-link-alt"></i></a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a class="link" href="https://hexo.io/docs/one-command-deployment.html">Deployment<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a class=&quot;link&quot; href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;! This is your very first post. Check </summary>
      
    
    
    
    
  </entry>
  
</feed>
