<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>姚永坤的小窝</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-02-27T11:21:51.440Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>姚永坤</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>前端面试题-JS篇（一）</title>
    <link href="http://example.com/2022/02/27/interview-JS-1/"/>
    <id>http://example.com/2022/02/27/interview-JS-1/</id>
    <published>2022-02-27T08:18:12.000Z</published>
    <updated>2022-02-27T11:21:51.440Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、闭包"><a href="#1、闭包" class="headerlink" title="1、闭包"></a>1、闭包</h1><ul><li>能够读取其他函数内部变量的函数或者子函数在外调用，子函数所在的父函数的作用域不会被释放。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1、闭包&quot;&gt;&lt;a href=&quot;#1、闭包&quot; class=&quot;headerlink&quot; title=&quot;1、闭包&quot;&gt;&lt;/a&gt;1、闭包&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;能够读取其他函数内部变量的函数或者子函数在外调用，子函数所在的父函数的作用域不会被释放。&lt;/li&gt;
&lt;/ul&gt;
</summary>
      
    
    
    
    <category term="JS" scheme="http://example.com/categories/JS/"/>
    
    <category term="前端面试题" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
    <category term="JS学习" scheme="http://example.com/tags/JS%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>前端面试题-CSS篇（二）</title>
    <link href="http://example.com/2022/02/27/interview-CSS-2/"/>
    <id>http://example.com/2022/02/27/interview-CSS-2/</id>
    <published>2022-02-27T06:28:50.000Z</published>
    <updated>2022-02-27T07:56:32.056Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、自适应布局"><a href="#1、自适应布局" class="headerlink" title="1、自适应布局"></a>1、自适应布局</h1><ul><li>使用flex；</li><li>左侧浮动或者绝对定位，右侧margin撑开使用div包含，靠-margin形成BFC；</li></ul><h1 id="2、display相关参数"><a href="#2、display相关参数" class="headerlink" title="2、display相关参数"></a>2、display相关参数</h1><ul><li>block：块级元素；</li><li>inline：等行元素；</li><li>table：table类型</li><li>flex：弹性布局，子元素的float、clear和vertical-align属性将失效</li><li>inline-block：行内块元素</li></ul><h1 id="3、display-none-和-visibility-hidden-的区别"><a href="#3、display-none-和-visibility-hidden-的区别" class="headerlink" title="3、display:none 和 visibility:hidden 的区别"></a>3、display:none 和 visibility:hidden 的区别</h1><ul><li>display:none 隐藏对应的元素，<strong>在文档布局中不再给它分配空间</strong>，它各边的元素会合拢，就当他从来不存在。</li><li>visibility:hidden 隐藏对应的元素，但是<strong>在文档布局中仍保留原来的空间</strong>。</li></ul><h1 id="4、position的absolute-与fixed共同点与不同点"><a href="#4、position的absolute-与fixed共同点与不同点" class="headerlink" title="4、position的absolute 与fixed共同点与不同点"></a>4、position的absolute 与fixed共同点与不同点</h1><ul><li>共同点：<ul><li>改变行内元素的呈现方式，display被置为block；</li><li>让元素脱离普通流，不占据空间；</li><li>默认会覆盖到非定位元素上不同点；</li></ul></li><li>不同点：<ul><li>absolute的“根元素”是可以设置的，而 fixed 的“根元素”固定为浏览器窗口。</li></ul></li></ul><h1 id="5、position的值分别是相对于谁进行定位的"><a href="#5、position的值分别是相对于谁进行定位的" class="headerlink" title="5、position的值分别是相对于谁进行定位的"></a>5、position的值分别是相对于谁进行定位的</h1><ul><li>absolute：相对于static定位以外的第一个祖先元素。</li><li>fixed：相对于浏览器窗口进行定位。</li><li>relative：相对于其在普通流中的位置进行定位</li><li>static，默认值，没有定位，元素出现在正常的流中。</li><li>inherit：从父元素继承position。</li></ul><h1 id="6、为什么要初始化CSS"><a href="#6、为什么要初始化CSS" class="headerlink" title="6、为什么要初始化CSS"></a>6、为什么要初始化CSS</h1><ul><li>因为浏览器的兼容问题，不同浏览器对有些标签的默认值是不同的，如果没对CSS初始化往往会出现浏览器之间的页面显示差异。</li></ul><h1 id="7、canvas在标签山设置宽高和在style中设置宽高有什么区别"><a href="#7、canvas在标签山设置宽高和在style中设置宽高有什么区别" class="headerlink" title="7、canvas在标签山设置宽高和在style中设置宽高有什么区别"></a>7、canvas在标签山设置宽高和在style中设置宽高有什么区别</h1><ul><li>标签的width和height是画布实际宽度和高度；</li><li>style的是canvas在浏览器中被渲染的高度和宽度。</li></ul><h1 id="8、CSS预处理器"><a href="#8、CSS预处理器" class="headerlink" title="8、CSS预处理器"></a>8、CSS预处理器</h1><ul><li>Sass，Less，Postcss</li><li>原理：将类CSS语言通过Webpack编译转成浏览器可读的真正CSS。</li></ul><h1 id="9、哪些属性可以继承"><a href="#9、哪些属性可以继承" class="headerlink" title="9、哪些属性可以继承"></a>9、哪些属性可以继承</h1><ul><li>可继承：font-size, font-family, color等</li><li>不可继承border, padding, margin, width, height</li></ul><h1 id="10、-before-和-after-中双冒号和单冒号有什么区别"><a href="#10、-before-和-after-中双冒号和单冒号有什么区别" class="headerlink" title="10、::before 和 :after 中双冒号和单冒号有什么区别"></a>10、::before 和 :after 中双冒号和单冒号有什么区别</h1><ul><li>单冒号用于CSS3伪类，双冒号用于CSS3伪元素。</li><li>CSS 伪类用于向某些选择器添加特殊的效果。</li><li>CSS 伪元素用于将特殊的效果添加到某些选择器。</li></ul><h1 id="11、什么是响应式设计？其基本原理是什么？"><a href="#11、什么是响应式设计？其基本原理是什么？" class="headerlink" title="11、什么是响应式设计？其基本原理是什么？"></a>11、什么是响应式设计？其基本原理是什么？</h1><ul><li>响应式网站设计(Responsive Web design)是一个网站能够兼容多个终端，而不是为每一个终端做一个特定的版本。</li><li>基本原理是通过媒体查询检测不同的设备屏幕尺寸做处理。</li><li>页面头部必须有meta声明的viewport。</li></ul><h1 id="12、浏览器是怎样解析CSS选择器的？"><a href="#12、浏览器是怎样解析CSS选择器的？" class="headerlink" title="12、浏览器是怎样解析CSS选择器的？"></a>12、浏览器是怎样解析CSS选择器的？</h1><ul><li>CSS选择器的解析是从右向左解析的。若从左向右的匹配，发现不符合规则,需要进行回溯，会损失很多性能。</li><li>若从右向左匹配，先找到所有的最右节点，对于每一个节点，向上寻找其父节点直到找到根元素或满足条件的匹配规则，则结束这个分支的遍历。</li><li>在CSS解析完毕后，需要将解析的结果与DOM Tree 的内容一起进行分析建立一棵Render Tree，最终用来进行绘图。</li></ul><h1 id="13、CSS优化、提高性能的方法有哪些？"><a href="#13、CSS优化、提高性能的方法有哪些？" class="headerlink" title="13、CSS优化、提高性能的方法有哪些？"></a>13、CSS优化、提高性能的方法有哪些？</h1><ul><li>避免过度约束</li><li>避免后代选择符避免链式选择符使用紧凑的语法</li><li>避免不必要的命名空间</li><li>避免不必要的重复</li><li>最好使用表示语义的名字。一个好的类名应该是描述他是什么而不是像什么</li><li>避免! important，可以选择其他选择器</li><li>尽可能的精简规则，你可以合并不同类里的重复规则</li></ul><h1 id="14-position跟display、overflow、float这些特性相互叠加后会怎么样"><a href="#14-position跟display、overflow、float这些特性相互叠加后会怎么样" class="headerlink" title="14.position跟display、overflow、float这些特性相互叠加后会怎么样?"></a>14.position跟display、overflow、float这些特性相互叠加后会怎么样?</h1><ul><li>display属性规定元素应该生成的框的类型;</li><li>position 属性规定元素的定位类型;</li><li>float属性是一种布局方式，定义元素在哪个方向浮动。</li><li>类似于优先级机制: <ul><li>position: absolute/fixed优先级最高,有他们在时, float不起作用, display值需要调整。</li><li>float或者absolute定位的元素，只能是块元素或表格。</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1、自适应布局&quot;&gt;&lt;a href=&quot;#1、自适应布局&quot; class=&quot;headerlink&quot; title=&quot;1、自适应布局&quot;&gt;&lt;/a&gt;1、自适应布局&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;使用flex；&lt;/li&gt;
&lt;li&gt;左侧浮动或者绝对定位，右侧margin撑开使用div包</summary>
      
    
    
    
    <category term="CSS" scheme="http://example.com/categories/CSS/"/>
    
    <category term="前端面试题" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
    <category term="JS学习" scheme="http://example.com/tags/JS%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>150. 逆波兰表达式求值</title>
    <link href="http://example.com/2022/02/27/lc-150/"/>
    <id>http://example.com/2022/02/27/lc-150/</id>
    <published>2022-02-26T18:00:36.000Z</published>
    <updated>2022-02-27T05:27:58.319Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a class="link" href="https://leetcode-cn.com/problems/evaluate-reverse-polish-notation/">点击前往<i class="fas fa-external-link-alt"></i></a></p><p>根据 逆波兰表示法，求表达式的值。</p><p>有效的算符包括 +、-、*、/ 。每个运算对象可以是整数，也可以是另一个逆波兰表达式。</p><p>注意 两个整数之间的除法只保留整数部分。</p><p>可以保证给定的逆波兰表达式总是有效的。换句话说，表达式总会得出有效数值且不存在除数为 0 的情况。</p><p>示例 1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：tokens &#x3D; [&quot;2&quot;,&quot;1&quot;,&quot;+&quot;,&quot;3&quot;,&quot;*&quot;]</span><br><span class="line">输出：9</span><br><span class="line">解释：该算式转化为常见的中缀算术表达式为：((2 + 1) * 3) &#x3D; 9</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：tokens &#x3D; [&quot;4&quot;,&quot;13&quot;,&quot;5&quot;,&quot;&#x2F;&quot;,&quot;+&quot;]</span><br><span class="line">输出：6</span><br><span class="line">解释：该算式转化为常见的中缀算术表达式为：(4 + (13 &#x2F; 5)) &#x3D; 6</span><br></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">输入：tokens &#x3D; [&quot;10&quot;,&quot;6&quot;,&quot;9&quot;,&quot;3&quot;,&quot;+&quot;,&quot;-11&quot;,&quot;*&quot;,&quot;&#x2F;&quot;,&quot;*&quot;,&quot;17&quot;,&quot;+&quot;,&quot;5&quot;,&quot;+&quot;]</span><br><span class="line">输出：22</span><br><span class="line">解释：该算式转化为常见的中缀算术表达式为：</span><br><span class="line">  ((10 * (6 &#x2F; ((9 + 3) * -11))) + 17) + 5</span><br><span class="line">&#x3D; ((10 * (6 &#x2F; (12 * -11))) + 17) + 5</span><br><span class="line">&#x3D; ((10 * (6 &#x2F; -132)) + 17) + 5</span><br><span class="line">&#x3D; ((10 * 0) + 17) + 5</span><br><span class="line">&#x3D; (0 + 17) + 5</span><br><span class="line">&#x3D; 17 + 5</span><br><span class="line">&#x3D; 22</span><br></pre></td></tr></table></figure><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><ul><li>利用栈的思想，先进后出。</li><li>使用map来进行存储计算符对应的计算操作。</li><li>当遇到计算符的时候，将栈顶前两个元素出栈，然后映射到对应方法上，再将计算的结果存入栈中。</li><li>循环以上操作直至遍历完整个数组。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string[]&#125;</span> <span class="variable">tokens</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> evalRPN = <span class="function"><span class="keyword">function</span>(<span class="params">tokens</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result =<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> tmp = [];</span><br><span class="line">    <span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">        [<span class="string">&quot;+&quot;</span>,<span class="function">(<span class="params">a,b</span>)=&gt;</span> a * <span class="number">1</span> + b * <span class="number">1</span>],</span><br><span class="line">        [<span class="string">&quot;-&quot;</span>,<span class="function">(<span class="params">a,b</span>)=&gt;</span> b - a],</span><br><span class="line">        [<span class="string">&quot;*&quot;</span>,<span class="function">(<span class="params">a,b</span>)=&gt;</span> b * a],</span><br><span class="line">        [<span class="string">&quot;/&quot;</span>,<span class="function">(<span class="params">a,b</span>)=&gt;</span> (b / a) | <span class="number">0</span>]</span><br><span class="line">    ])</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> i <span class="keyword">of</span> tokens)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!map.has(i))&#123;</span><br><span class="line">            tmp.push(i);</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        tmp.push(map.get(i)(tmp.pop(),tmp.pop()))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tmp.pop();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;&lt;a class=&quot;link&quot; href=&quot;https://leetcode-cn.com/problems/evaluate-revers</summary>
      
    
    
    
    <category term="JS" scheme="http://example.com/categories/JS/"/>
    
    <category term="前端刷题" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%88%B7%E9%A2%98/"/>
    
    <category term="栈和队列" scheme="http://example.com/categories/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/"/>
    
    
    <category term="LeetCode刷题" scheme="http://example.com/tags/LeetCode%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>1047. 删除字符串中的所有相邻重复项</title>
    <link href="http://example.com/2022/02/26/lc-1047/"/>
    <id>http://example.com/2022/02/26/lc-1047/</id>
    <published>2022-02-26T13:28:54.000Z</published>
    <updated>2022-02-26T14:31:56.351Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a class="link" href="https://leetcode-cn.com/problems/remove-all-adjacent-duplicates-in-string">点击前往<i class="fas fa-external-link-alt"></i></a></p><p>给出由小写字母组成的字符串 S，重复项删除操作会选择两个相邻且相同的字母，并删除它们。</p><p>在 S 上反复执行重复项删除操作，直到无法继续删除。</p><p>在完成所有重复项删除操作后返回最终的字符串。答案保证唯一。</p><p>示例 1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：&quot;abbaca&quot;</span><br><span class="line">输出：&quot;ca&quot;</span><br><span class="line">解释：</span><br><span class="line">例如，在 &quot;abbaca&quot; 中，我们可以删除 &quot;bb&quot; 由于两字母相邻且相同，这是此时唯一可以执行删除操作的重复项。之后我们得到字符串 &quot;aaca&quot;，其中又只有 &quot;aa&quot; 可以执行重复项删除操作，所以最后的字符串为 &quot;ca&quot;。</span><br></pre></td></tr></table></figure><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><ul><li>利用栈的思想，判断相邻的两个字符是否相同，如果相同则将栈顶元素出栈，否则该字符入栈。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">s</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;string&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> removeDuplicates = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> stack = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">of</span> s)&#123;</span><br><span class="line">        <span class="keyword">if</span>(stack.length === <span class="number">0</span>) stack.push(i);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(stack[stack.length-<span class="number">1</span>]===i)</span><br><span class="line">                stack.pop(stack[stack.length-<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                stack.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> stack.join(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;&lt;a class=&quot;link&quot; href=&quot;https://leetcode-cn.com/problems/remove-all-adja</summary>
      
    
    
    
    <category term="JS" scheme="http://example.com/categories/JS/"/>
    
    <category term="前端刷题" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%88%B7%E9%A2%98/"/>
    
    <category term="栈和队列" scheme="http://example.com/categories/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/"/>
    
    
    <category term="LeetCode刷题" scheme="http://example.com/tags/LeetCode%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>20. 有效的括号</title>
    <link href="http://example.com/2022/02/26/lc-20/"/>
    <id>http://example.com/2022/02/26/lc-20/</id>
    <published>2022-02-26T12:43:47.000Z</published>
    <updated>2022-02-26T13:05:08.720Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a class="link" href="https://leetcode-cn.com/problems/valid-parentheses">点击前往<i class="fas fa-external-link-alt"></i></a></p><p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串 s ，判断字符串是否有效。</p><p>有效字符串需满足：</p><pre><code>左括号必须用相同类型的右括号闭合。左括号必须以正确的顺序闭合。</code></pre><p>示例 1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s &#x3D; &quot;()&quot;</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">s</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isValid = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">of</span> s)&#123;</span><br><span class="line">        <span class="keyword">switch</span>(i)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;(&quot;</span>:</span><br><span class="line">                arr.push(<span class="string">&quot;)&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;&#123;&quot;</span>:</span><br><span class="line">                arr.push(<span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;[&quot;</span>:</span><br><span class="line">                arr.push(<span class="string">&quot;]&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">if</span>(i !== arr.pop())&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr.length === <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;&lt;a class=&quot;link&quot; href=&quot;https://leetcode-cn.com/problems/valid-parenthes</summary>
      
    
    
    
    <category term="JS" scheme="http://example.com/categories/JS/"/>
    
    <category term="前端刷题" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%88%B7%E9%A2%98/"/>
    
    <category term="链表" scheme="http://example.com/categories/%E9%93%BE%E8%A1%A8/"/>
    
    
    <category term="LeetCode刷题" scheme="http://example.com/tags/LeetCode%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>225. 用队列实现栈</title>
    <link href="http://example.com/2022/02/26/lc-225/"/>
    <id>http://example.com/2022/02/26/lc-225/</id>
    <published>2022-02-26T12:08:48.000Z</published>
    <updated>2022-02-26T12:14:15.186Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a class="link" href="https://leetcode-cn.com/problems/implement-stack-using-queues/">点击前往<i class="fas fa-external-link-alt"></i></a></p><p>请你仅使用两个队列实现一个后入先出（LIFO）的栈，并支持普通栈的全部四种操作（push、top、pop 和 empty）。</p><p>实现 MyStack 类：</p><pre><code>void push(int x) 将元素 x 压入栈顶。int pop() 移除并返回栈顶元素。int top() 返回栈顶元素。boolean empty() 如果栈是空的，返回 true ；否则，返回 false 。</code></pre><p>注意：</p><pre><code>你只能使用队列的基本操作 —— 也就是 push to back、peek/pop from front、size 和 is empty 这些操作。你所使用的语言也许不支持队列。 你可以使用 list （列表）或者 deque（双端队列）来模拟一个队列 , 只要是标准的队列操作即可。</code></pre><p>示例 1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">[&quot;MyStack&quot;, &quot;push&quot;, &quot;push&quot;, &quot;top&quot;, &quot;pop&quot;, &quot;empty&quot;]</span><br><span class="line">[[], [1], [2], [], [], []]</span><br><span class="line">输出：</span><br><span class="line">[null, null, null, 2, 2, false]</span><br><span class="line"></span><br><span class="line">解释：</span><br><span class="line">MyStack myStack &#x3D; new MyStack();</span><br><span class="line">myStack.push(1);</span><br><span class="line">myStack.push(2);</span><br><span class="line">myStack.top(); &#x2F;&#x2F; 返回 2</span><br><span class="line">myStack.pop(); &#x2F;&#x2F; 返回 2</span><br><span class="line">myStack.empty(); &#x2F;&#x2F; 返回 False</span><br></pre></td></tr></table></figure><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> MyStack = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.queue1 = [];</span><br><span class="line">    <span class="built_in">this</span>.queue2 = [];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Push element x onto stack. </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">x</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;void&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MyStack.prototype.push = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.queue1.push(x);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Removes the element on top of the stack and returns that element.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MyStack.prototype.pop = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 减少两个队列交换的次数， 只有当queue1为空时，交换两个队列</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">this</span>.queue1.length) &#123;</span><br><span class="line">        [<span class="built_in">this</span>.queue1, <span class="built_in">this</span>.queue2] = [<span class="built_in">this</span>.queue2, <span class="built_in">this</span>.queue1];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">this</span>.queue1.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.queue2.push(<span class="built_in">this</span>.queue1.shift());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.queue1.shift();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Get the top element.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MyStack.prototype.top = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> x = <span class="built_in">this</span>.pop();</span><br><span class="line">    <span class="built_in">this</span>.queue1.push(x);</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns whether the stack is empty.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MyStack.prototype.empty = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !<span class="built_in">this</span>.queue1.length &amp;&amp; !<span class="built_in">this</span>.queue2.length;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;&lt;a class=&quot;link&quot; href=&quot;https://leetcode-cn.com/problems/implement-stack</summary>
      
    
    
    
    <category term="JS" scheme="http://example.com/categories/JS/"/>
    
    <category term="前端刷题" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%88%B7%E9%A2%98/"/>
    
    <category term="链表" scheme="http://example.com/categories/%E9%93%BE%E8%A1%A8/"/>
    
    
    <category term="LeetCode刷题" scheme="http://example.com/tags/LeetCode%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>232. 用栈实现队列</title>
    <link href="http://example.com/2022/02/26/lc-232/"/>
    <id>http://example.com/2022/02/26/lc-232/</id>
    <published>2022-02-26T11:35:31.000Z</published>
    <updated>2022-02-26T11:49:21.063Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a class="link" href="https://leetcode-cn.com/problems/implement-queue-using-stacks">点击前往<i class="fas fa-external-link-alt"></i></a></p><p>请你仅使用两个栈实现先入先出队列。队列应当支持一般队列支持的所有操作（push、pop、peek、empty）：</p><p>实现 MyQueue 类：</p><pre><code>void push(int x) 将元素 x 推到队列的末尾int pop() 从队列的开头移除并返回元素int peek() 返回队列开头的元素boolean empty() 如果队列为空，返回 true ；否则，返回 false</code></pre><p>说明：</p><pre><code>你 只能 使用标准的栈操作 —— 也就是只有 push to top, peek/pop from top, size, 和 is empty 操作是合法的。你所使用的语言也许不支持栈。你可以使用 list 或者 deque（双端队列）来模拟一个栈，只要是标准的栈操作即可。</code></pre><p>示例 1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">[&quot;MyQueue&quot;, &quot;push&quot;, &quot;push&quot;, &quot;peek&quot;, &quot;pop&quot;, &quot;empty&quot;]</span><br><span class="line">[[], [1], [2], [], [], []]</span><br><span class="line">输出：</span><br><span class="line">[null, null, null, 1, 1, false]</span><br><span class="line"></span><br><span class="line">解释：</span><br><span class="line">MyQueue myQueue &#x3D; new MyQueue();</span><br><span class="line">myQueue.push(1); &#x2F;&#x2F; queue is: [1]</span><br><span class="line">myQueue.push(2); &#x2F;&#x2F; queue is: [1, 2] (leftmost is front of the queue)</span><br><span class="line">myQueue.peek(); &#x2F;&#x2F; return 1</span><br><span class="line">myQueue.pop(); &#x2F;&#x2F; return 1, queue is [2]</span><br><span class="line">myQueue.empty(); &#x2F;&#x2F; return false</span><br></pre></td></tr></table></figure><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> MyQueue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.stackIn = [];</span><br><span class="line">    <span class="built_in">this</span>.stackOut = [];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">x</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;void&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MyQueue.prototype.push = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.stackIn.push(x);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MyQueue.prototype.pop = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> len = <span class="built_in">this</span>.stackOut.length;</span><br><span class="line">    <span class="keyword">if</span>(len) <span class="keyword">return</span> <span class="built_in">this</span>.stackOut.pop();</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">this</span>.stackIn.length) &#123;</span><br><span class="line">       <span class="built_in">this</span>.stackOut.push(<span class="built_in">this</span>.stackIn.pop());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.stackOut.pop();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MyQueue.prototype.peek = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> x = <span class="built_in">this</span>.pop();</span><br><span class="line">    <span class="built_in">this</span>.stackOut.push(x);</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MyQueue.prototype.empty = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !<span class="built_in">this</span>.stackIn.length &amp;&amp; !<span class="built_in">this</span>.stackOut.length;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MyQueue object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * var obj = new MyQueue()</span></span><br><span class="line"><span class="comment"> * obj.push(x)</span></span><br><span class="line"><span class="comment"> * var param_2 = obj.pop()</span></span><br><span class="line"><span class="comment"> * var param_3 = obj.peek()</span></span><br><span class="line"><span class="comment"> * var param_4 = obj.empty()</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;&lt;a class=&quot;link&quot; href=&quot;https://leetcode-cn.com/problems/implement-queue</summary>
      
    
    
    
    <category term="JS" scheme="http://example.com/categories/JS/"/>
    
    <category term="前端刷题" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%88%B7%E9%A2%98/"/>
    
    <category term="栈" scheme="http://example.com/categories/%E6%A0%88/"/>
    
    <category term="队列" scheme="http://example.com/categories/%E9%98%9F%E5%88%97/"/>
    
    
    <category term="LeetCode刷题" scheme="http://example.com/tags/LeetCode%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>前端面试题-CSS篇（一）</title>
    <link href="http://example.com/2022/02/26/interview-CSS-1/"/>
    <id>http://example.com/2022/02/26/interview-CSS-1/</id>
    <published>2022-02-26T05:31:44.000Z</published>
    <updated>2022-02-27T07:48:44.585Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、盒子模型"><a href="#一、盒子模型" class="headerlink" title="一、盒子模型"></a>一、盒子模型</h1><ul><li>标准盒子模型：<ul><li>标准盒子模型：宽度 = 内容的宽度(content) + border + padding + margin</li></ul></li></ul><img lazyload src="/images/loading.svg" data-src="/2022/02/26/interview-CSS-1/css-1-1.jpg" class title="# tu1"><ul><li>IE盒子模型：<ul><li>宽度 = 内容宽度(content + border + padding) + margin</li></ul></li></ul><img lazyload src="/images/loading.svg" data-src="/2022/02/26/interview-CSS-1/css-1-2.jpg" class title="# tu1"><ul><li>盒模型：内容(content)、填充(padding)、边界(margin)、边框(border)。</li></ul><h2 id="1、页面渲染时-dom元素所采用的布局模型-可通过box-sizing进行设置。根据计算宽高的区域可分为"><a href="#1、页面渲染时-dom元素所采用的布局模型-可通过box-sizing进行设置。根据计算宽高的区域可分为" class="headerlink" title="1、页面渲染时,dom元素所采用的布局模型,可通过box-sizing进行设置。根据计算宽高的区域可分为:"></a>1、页面渲染时,dom元素所采用的布局模型,可通过box-sizing进行设置。根据计算宽高的区域可分为:</h2><ul><li>content-box (W3C标准盒模型) </li><li>border-box (IE盒模型) </li><li>padding-box (FireFox 曾经支持)</li><li>margin-box (浏览器未实现)</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.div</span>&#123;</span><br><span class="line">    <span class="attribute">box-sizing</span>: content-box;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.div</span>&#123;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二、居中方法"><a href="#二、居中方法" class="headerlink" title="二、居中方法"></a>二、居中方法</h1><h2 id="1、水平居中"><a href="#1、水平居中" class="headerlink" title="1、水平居中"></a>1、水平居中</h2><h3 id="text-align-center"><a href="#text-align-center" class="headerlink" title="text-align: center;"></a>text-align: center;</h3><ul><li>只针对行内元素。对于元素中的块级元素它是不起作用的。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.text_div</span>&#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="margin-0-auto"><a href="#margin-0-auto" class="headerlink" title="margin: 0 auto;"></a>margin: 0 auto;</h3><ul><li>针对块级元素的居中方案，必要前提：<strong>需要知道父级元素的宽度</strong>。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.children</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="positon-absolute"><a href="#positon-absolute" class="headerlink" title="positon: absolute;"></a>positon: absolute;</h3><ul><li>首先给父元素添加 position: relative 这样子元素就可以通过父元素来实现绝对定位。</li><li>然后让元素向右偏移 50%，需要注意，这个时候居中的是子元素的左边线。所以这时候就需要使用 translateX(-50%) 让元素再相对自己向右位移 50%，</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.children</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">50%</span>);</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="display-flex"><a href="#display-flex" class="headerlink" title="display: flex;"></a>display: flex;</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.chilren</span> &#123;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h2><h3 id="单行内联元素垂直居中"><a href="#单行内联元素垂直居中" class="headerlink" title="单行内联元素垂直居中"></a>单行内联元素垂直居中</h3><ul><li>通过设置内联元素的高度(height)和行高(line-height)相等，从而使元素垂直居中。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.text_div</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="利用表布局"><a href="#利用表布局" class="headerlink" title="利用表布局"></a>利用表布局</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: table;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.chilren</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: table-cell;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="flex布局"><a href="#flex布局" class="headerlink" title="flex布局"></a>flex布局</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.center-flex</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h3><ul><li>已知元素高度：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.chilren</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: -<span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>未知元素高度：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.chilren</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="垂直水平居中"><a href="#垂直水平居中" class="headerlink" title="垂直水平居中"></a>垂直水平居中</h2><h3 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">align-items</span>: center</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="grid"><a href="#grid" class="headerlink" title="grid"></a>grid</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">140px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.chilren</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三、清除浮动"><a href="#三、清除浮动" class="headerlink" title="三、清除浮动"></a>三、清除浮动</h1><h2 id="1、为什么需要清除浮动"><a href="#1、为什么需要清除浮动" class="headerlink" title="1、为什么需要清除浮动"></a>1、为什么需要清除浮动</h2><ul><li>不清楚浮动会发生高度塌陷：浮动元素父元素高度自适应。(父元素不写高度时，子元素写了浮动后，父元素会发生高度塌陷)</li></ul><h2 id="2、如何清除浮动"><a href="#2、如何清除浮动" class="headerlink" title="2、如何清除浮动"></a>2、如何清除浮动</h2><ul><li>父级div定义height</li><li>最后一个浮动元素后加空div标签并添加样式clear:both。</li><li>包含浮动元素的父标签添加样式overflow为 hidden或auto。父级div定义zoo</li></ul><h1 id="四、CSS选择器"><a href="#四、CSS选择器" class="headerlink" title="四、CSS选择器"></a>四、CSS选择器</h1><ul><li><strong>每个选择器都有权值，权值越大越优先</strong>。</li><li>继承的样式优先级低于自身指定样式。</li><li>! important优先级最高js 也无法修改。</li><li>权值相同时，靠近元素的样式优先级高(顺序为内联样式表（标签内部&gt;内部样式表（当前文件中)&gt;外部样式表（外部文件中)</li></ul><h2 id="选择器类型"><a href="#选择器类型" class="headerlink" title="选择器类型"></a>选择器类型</h2><ul><li>通配符选择器（*)</li><li>元素(类型)选择器</li><li>相邻选择器</li><li>属性选择器</li><li>伪类选择器</li><li>类选择器</li><li>ID选择器</li><li>标签选择器</li></ul><h2 id="优先级算法如何计算？"><a href="#优先级算法如何计算？" class="headerlink" title="优先级算法如何计算？"></a>优先级算法如何计算？</h2><ul><li>元素选择符: 1 class 选择符:10；id选择符:100；元素标签:1000</li></ul><p>1.!important声明的样式优先级最高，如果冲突再进行计算。<br>2.如果优先级相同，则选择最后出现的样式。<br>3.继承得到的样式的优先级最低。</p><h2 id="选择器优先级"><a href="#选择器优先级" class="headerlink" title="选择器优先级"></a>选择器优先级</h2><p>!important &gt; 行内样式 &gt; id &gt; .class &gt; tag &gt; * &gt; 继承 &gt;默认选择器 从右往左解析</p><h1 id="五、CSS3新增的伪类"><a href="#五、CSS3新增的伪类" class="headerlink" title="五、CSS3新增的伪类"></a>五、CSS3新增的伪类</h1><ul><li>p:first-of-type 选择属于其<strong>父元素的首个元素</strong>的每个元素。</li><li>p:last-of-type 选择属于其<strong>父元素的最后元素</strong>的每个元素。</li><li>p:only-of-type 选择属于其<strong>父元素唯一</strong>的元素的每个元素。</li><li>p:only-child选择属于其<strong>父元素的唯一子元素</strong>的每个元素。</li><li>p:nth-child(2)选择属于其<strong>父元素的第二个子元素</strong>的每个元素。</li><li>:enabled，:disabled 控制表单控件的禁用状态。</li><li>:checked 单选框或复选框被选中。</li></ul><h1 id="六、边距重叠解决方案"><a href="#六、边距重叠解决方案" class="headerlink" title="六、边距重叠解决方案"></a>六、边距重叠解决方案</h1><ul><li>BFC(Block Formatting Context)块级格式化上下文，是用于布局块级盒子的一块渲染区域。</li><li>一个BFC的范围包含创建该上下文元素的所有子元素，但不包括创建了新BFC的子元素的内部元素。这从另一方角度说明，<strong>一个元素不能同时存在于两个BFC中</strong>。因为如果一个元素能够同时处于两个BFC中，那么就意味着这个元素能与两个BFC中的元素发生作用，就违反了BFC的隔离作用。</li></ul><h2 id="文档流"><a href="#文档流" class="headerlink" title="文档流"></a>文档流</h2><ul><li>常规流：<ul><li>盒一个接着一个排列;</li><li>在块级格式化上下文里面，它们竖着排列；</li><li>在行内格式化上下文里面，它们横着排列;</li><li>对于静态定位(static positioning)，position: static，盒的位置是常规流布局里的位置；</li><li>对于相对定位(relative positioning)，position: relative，盒偏移位置由top、bottom、left、right属性定义。即使有偏移，仍然保留原有的位置，其它常规流不能占用这个位置。</li></ul></li><li>浮动：<ul><li>左浮动元素尽量靠左、靠上，右浮动同理</li><li><strong>这导致常规流环绕在它的周边，除非设置 clear 属性</strong></li><li>浮动元素不会影响块级元素的布局</li><li>但浮动元素会影响行内元素的布局，让其围绕在自己周围，撑大父级元素，从而间接影响块级元素布局</li><li>最高点不会超过当前行的最高点、它前面的浮动元素的最高点</li><li>不超过它的包含块，除非元素本身已经比包含块更宽</li><li>行内元素出现在左浮动元素的右边和右浮动元素的左边，左浮动元素的左边和右浮动元素的右边是不会摆放浮动元素的</li></ul></li><li>绝对定位：<ul><li>绝对定位方案，盒从常规流中被移除，不影响常规流的布局；</li><li>它的定位相对于它的包含块，相关CSS属性：top、bottom、left、right；</li><li>如果元素的属性position为absolute或fixed，它是绝对定位元素；</li><li>对于position: absolute，元素定位将相对于上级元素中最近的一个relative、fixed、absolute，如果没有则相对于body；</li></ul></li></ul><h2 id="BFC触发方式"><a href="#BFC触发方式" class="headerlink" title="BFC触发方式"></a>BFC触发方式</h2><ul><li>根元素，即HTML标签</li><li>浮动元素：float值为left、right</li><li>overflow值不为 visible，为 auto、scroll、hidden</li><li>display值为 inline-block、table-cell、table-caption、table、inline-table、flex、inline-flex、grid、inline-grid</li><li>定位元素：position值为 absolute、fixed</li></ul><h2 id="约束规则"><a href="#约束规则" class="headerlink" title="约束规则"></a>约束规则</h2><ul><li>内部的Box会在垂直方向上一个接一个的放置</li><li>内部的Box垂直方向上的距离由margin决定。（完整的说法是：属于同一个BFC的两个相邻Box的margin会发生折叠，不同BFC不会发生折叠。）</li><li>每个元素的左外边距与包含块的左边界相接触（从左向右），即使浮动元素也是如此。（这说明BFC中子元素不会超出他的包含块，而position为absolute的元素可以超出他的包含块边界）</li><li>BFC的区域不会与float的元素区域重叠</li><li>计算BFC的高度时，浮动子元素也参与计算</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、盒子模型&quot;&gt;&lt;a href=&quot;#一、盒子模型&quot; class=&quot;headerlink&quot; title=&quot;一、盒子模型&quot;&gt;&lt;/a&gt;一、盒子模型&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;标准盒子模型：&lt;ul&gt;
&lt;li&gt;标准盒子模型：宽度 = 内容的宽度(content) + bor</summary>
      
    
    
    
    <category term="CSS" scheme="http://example.com/categories/CSS/"/>
    
    <category term="前端面试题" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
    <category term="JS学习" scheme="http://example.com/tags/JS%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>459. 重复的子字符串</title>
    <link href="http://example.com/2022/02/26/lc-459/"/>
    <id>http://example.com/2022/02/26/lc-459/</id>
    <published>2022-02-26T05:07:53.000Z</published>
    <updated>2022-02-26T05:28:37.791Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a class="link" href="https://leetcode-cn.com/problems/repeated-substring-pattern/">点击前往<i class="fas fa-external-link-alt"></i></a></p><p>给定一个非空的字符串 s ，检查是否可以通过由它的一个子串重复多次构成。</p><p>示例 1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: s &#x3D; &quot;abab&quot;</span><br><span class="line">输出: true</span><br><span class="line">解释: 可由子串 &quot;ab&quot; 重复两次构成。</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: s &#x3D; &quot;aba&quot;</span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: s &#x3D; &quot;abcabcabcabc&quot;</span><br><span class="line">输出: true</span><br><span class="line">解释: 可由子串 &quot;abc&quot; 重复四次构成。 (或子串 &quot;abcabc&quot; 重复两次构成。)</span><br></pre></td></tr></table></figure><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><ul><li>使用KMP算法。</li><li>next 数组记录的是最长相同前后缀，如果 next[len - 1] != -1，则说明字符串有最长相同的前后缀。</li><li>最长相等前后缀的长度为：next[len - 1]。</li><li>数组长度减去最长相同前后缀的长度相当于是第一个周期的长度，也就是一个周期的长度，如果这个周期可以被整除，就说明整个数组就是这个周期的循环。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">s</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> repeatedSubstringPattern = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s.length === <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">const</span> getNext = <span class="function">(<span class="params">s</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> next = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">        <span class="keyword">let</span> j =<span class="number">0</span>;</span><br><span class="line">        next.push(j);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>;i&lt;s.length;++i)&#123;</span><br><span class="line">            <span class="keyword">while</span>(j &gt; <span class="number">0</span> &amp;&amp; s[i]!=s[j])&#123;</span><br><span class="line">                j=next[j-<span class="number">1</span>]</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(s[i]==s[j])&#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            next.push(j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> next = getNext(s);</span><br><span class="line">    <span class="keyword">if</span>(next[next.length-<span class="number">1</span>]!==<span class="number">0</span> &amp;&amp; s.length % (s.length - next[next.length-<span class="number">1</span>])===<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;&lt;a class=&quot;link&quot; href=&quot;https://leetcode-cn.com/problems/repeated-substr</summary>
      
    
    
    
    <category term="JS" scheme="http://example.com/categories/JS/"/>
    
    <category term="前端刷题" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%88%B7%E9%A2%98/"/>
    
    <category term="KMP算法" scheme="http://example.com/categories/KMP%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="LeetCode刷题" scheme="http://example.com/tags/LeetCode%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>28. 实现 strStr()</title>
    <link href="http://example.com/2022/02/21/lc-28/"/>
    <id>http://example.com/2022/02/21/lc-28/</id>
    <published>2022-02-21T14:44:22.000Z</published>
    <updated>2022-02-22T08:34:16.656Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a class="link" href="https://leetcode-cn.com/problems/implement-strstr">点击前往<i class="fas fa-external-link-alt"></i></a></p><p>实现 strStr() 函数。</p><p>给你两个字符串 haystack 和 needle ，请你在 haystack 字符串中找出 needle 字符串出现的第一个位置（下标从 0 开始）。如果不存在，则返回  -1 。</p><p>说明：</p><p>当 needle 是空字符串时，我们应当返回什么值呢？这是一个在面试中很好的问题。</p><p>对于本题而言，当 needle 是空字符串时我们应当返回 0 。这与 C 语言的 strstr() 以及 Java 的 indexOf() 定义相符。</p><p>示例 1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：haystack &#x3D; &quot;hello&quot;, needle &#x3D; &quot;ll&quot;</span><br><span class="line">输出：2</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：haystack &#x3D; &quot;aaaaa&quot;, needle &#x3D; &quot;bba&quot;</span><br><span class="line">输出：-1</span><br></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：haystack &#x3D; &quot;&quot;, needle &#x3D; &quot;&quot;</span><br><span class="line">输出：0</span><br></pre></td></tr></table></figure><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><ul><li>利用哈希表。</li><li>首先将数组中每个字符串按字母组成由大到小进行排序并保存在新的数组中，保证原数组与新数组元素索引一致。</li><li>对新数组进行遍历，将元素存储在哈希表中。新数组元素为键，原数组对应索引的值作为值进行键值对存储。</li><li>abc =&gt; [abc,cba,acb]</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string[]&#125;</span> <span class="variable">strs</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;string[][]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> groupAnagrams = <span class="function"><span class="keyword">function</span>(<span class="params">strs</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> tmp = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">    <span class="keyword">const</span> hashmap = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> i <span class="keyword">of</span> strs)&#123;</span><br><span class="line">        tmp.push(i.split(<span class="string">&quot;&quot;</span>).sort(<span class="function">(<span class="params">a,b</span>)=&gt;</span>a.charCodeAt()-b.charCodeAt()).join(<span class="string">&quot;&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;strs.length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!hashmap.get(tmp[i]))&#123;</span><br><span class="line">            hashmap.set(tmp[i],[strs[i]]);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            hashmap.get(tmp[i]).push(strs[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Array</span>.from(hashmap.values());</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;&lt;a class=&quot;link&quot; href=&quot;https://leetcode-cn.com/problems/implement-strst</summary>
      
    
    
    
    <category term="JS" scheme="http://example.com/categories/JS/"/>
    
    <category term="前端刷题" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%88%B7%E9%A2%98/"/>
    
    <category term="KMP算法" scheme="http://example.com/categories/KMP%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="LeetCode刷题" scheme="http://example.com/tags/LeetCode%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>剑指 Offer 58 - II. 左旋转字符串</title>
    <link href="http://example.com/2022/02/21/lc-OF58/"/>
    <id>http://example.com/2022/02/21/lc-OF58/</id>
    <published>2022-02-21T08:26:06.000Z</published>
    <updated>2022-02-21T08:32:09.861Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a class="link" href="https://leetcode-cn.com/problems/zuo-xuan-zhuan-zi-fu-chuan-lcof/">点击前往<i class="fas fa-external-link-alt"></i></a></p><p>字符串的左旋转操作是把字符串前面的若干个字符转移到字符串的尾部。请定义一个函数实现字符串左旋转操作的功能。比如，输入字符串”abcdefg”和数字2，该函数将返回左旋转两位得到的结果”cdefgab”。</p><p>示例1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: s &#x3D; &quot;abcdefg&quot;, k &#x3D; 2</span><br><span class="line">输出: &quot;cdefgab&quot;</span><br></pre></td></tr></table></figure><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><ul><li>局部翻转+整体翻转；</li><li>先翻转0-n位置元素，再翻转n-len位置元素，最后整体翻转。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">s</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">n</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;string&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> reverseLeftWords = <span class="function"><span class="keyword">function</span>(<span class="params">s, n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> strArr = <span class="built_in">Array</span>.from(s);</span><br><span class="line">    reverse(strArr, <span class="number">0</span>, n-<span class="number">1</span>);</span><br><span class="line">    reverse(strArr, n, strArr.length-<span class="number">1</span>);</span><br><span class="line">    reverse(strArr, <span class="number">0</span>, strArr.length-<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> strArr.join(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">reverse</span>(<span class="params">arr,start,end</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> l = start,r = end;</span><br><span class="line">        <span class="keyword">while</span>(l &lt; r)&#123;</span><br><span class="line">            [arr[l],arr[r]] = [arr[r],arr[l]];</span><br><span class="line">            l++;</span><br><span class="line">            r--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="slice字符串截取，然后拼接"><a href="#slice字符串截取，然后拼接" class="headerlink" title="slice字符串截取，然后拼接"></a>slice字符串截取，然后拼接</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">s</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">n</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;string&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> reverseLeftWords = <span class="function"><span class="keyword">function</span>(<span class="params">s, n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s.slice(n,s.length) + s.slice(<span class="number">0</span>,n);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;&lt;a class=&quot;link&quot; href=&quot;https://leetcode-cn.com/problems/zuo-xuan-zhuan-</summary>
      
    
    
    
    <category term="JS" scheme="http://example.com/categories/JS/"/>
    
    <category term="字符串" scheme="http://example.com/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="前端刷题" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%88%B7%E9%A2%98/"/>
    
    <category term="双指针" scheme="http://example.com/categories/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
    
    <category term="LeetCode刷题" scheme="http://example.com/tags/LeetCode%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>151. 翻转字符串里的单词</title>
    <link href="http://example.com/2022/02/21/lc-151/"/>
    <id>http://example.com/2022/02/21/lc-151/</id>
    <published>2022-02-21T07:38:39.000Z</published>
    <updated>2022-02-21T08:13:21.877Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a class="link" href="https://leetcode-cn.com/problems/reverse-words-in-a-string">点击前往<i class="fas fa-external-link-alt"></i></a></p><p>给你一个字符串 s ，逐个翻转字符串中的所有 单词 。<br>单词 是由非空格字符组成的字符串。s 中使用至少一个空格将字符串中的 单词 分隔开。<br>请你返回一个翻转 s 中单词顺序并用单个空格相连的字符串。<br>说明：<br>    * 输入字符串 s 可以在前面、后面或者单词间包含多余的空格。<br>    * 翻转后单词间应当仅用一个空格分隔。<br>    * 翻转后的字符串中不应包含额外的空格。</p><p>示例1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s &#x3D; &quot;the sky is blue&quot;</span><br><span class="line">输出：&quot;blue is sky the&quot;</span><br></pre></td></tr></table></figure><p>示例2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s &#x3D; &quot;  hello world  &quot;</span><br><span class="line">输出：&quot;world hello&quot;</span><br><span class="line">解释：输入字符串可以在前面或者后面包含多余的空格，但是翻转后的字符不能包括。</span><br></pre></td></tr></table></figure><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><ul><li>方法一：调用库函数直接操作。</li><li>方法二：自定义函数。</li></ul><h2 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h2><h3 id="创建去空格函数"><a href="#创建去空格函数" class="headerlink" title="创建去空格函数"></a>创建去空格函数</h3><ul><li>依题意需要去除的空格类型包括：<ul><li>字符串开头结尾的空格；</li><li>连续空格只保留一个。</li></ul></li><li>这里利用双指针法：<ul><li>fast指针走得快，slow指针走得慢；</li><li>当fast指针遇到空格时进行判断，如果出现以上两种情况就将fast指针继续向前走；否则，将fast指针指向的位置的元素赋予给slow指针对应元素，然后同时移动两个指针。</li></ul></li><li>最后利用slow指针来去除结尾空格，然后控制整个字符串长度。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dp</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> fast = <span class="number">0</span>, slow = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(fast &lt; arr.length)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[fast]===<span class="string">&quot; &quot;</span> &amp;&amp; (fast ===<span class="number">0</span> || arr[fast-<span class="number">1</span>]===<span class="string">&quot; &quot;</span>))&#123;</span><br><span class="line">            fast++;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            arr[slow++] = arr[fast++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    arr.length = arr[slow - <span class="number">1</span>] === <span class="string">&quot; &quot;</span> ? slow -<span class="number">1</span> : slow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建翻转函数"><a href="#创建翻转函数" class="headerlink" title="创建翻转函数"></a>创建翻转函数</h3><ul><li>这里翻转函数先用来对整个数组进行翻转，然后利用空格为间隔将每个单词进行翻转。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reversefun</span>(<span class="params">arr,start,end</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> left = start;</span><br><span class="line">    <span class="keyword">let</span> right = end;</span><br><span class="line">    <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">        [arr[left],arr[right]] = [arr[right],arr[left]];</span><br><span class="line">        left++;</span><br><span class="line">        right--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数整体"><a href="#函数整体" class="headerlink" title="函数整体"></a>函数整体</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">s</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;string&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> reverseWords = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = <span class="built_in">Array</span>.from(s);</span><br><span class="line">    dp(arr);</span><br><span class="line">    reversefun(arr, <span class="number">0</span>,arr.length-<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">let</span> start = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;= arr.length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i]===<span class="string">&#x27; &#x27;</span> || i ===arr.length)&#123;</span><br><span class="line">            reversefun(arr,start,i-<span class="number">1</span>);</span><br><span class="line">            start = i+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr.join(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dp</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> fast = <span class="number">0</span>, slow = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(fast &lt; arr.length)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[fast]===<span class="string">&quot; &quot;</span> &amp;&amp; (fast ===<span class="number">0</span> || arr[fast-<span class="number">1</span>]===<span class="string">&quot; &quot;</span>))&#123;</span><br><span class="line">            fast++;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            arr[slow++] = arr[fast++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    arr.length = arr[slow - <span class="number">1</span>] === <span class="string">&quot; &quot;</span> ? slow -<span class="number">1</span> : slow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reversefun</span>(<span class="params">arr,start,end</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> left = start;</span><br><span class="line">    <span class="keyword">let</span> right = end;</span><br><span class="line">    <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">        [arr[left],arr[right]] = [arr[right],arr[left]];</span><br><span class="line">        left++;</span><br><span class="line">        right--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;&lt;a class=&quot;link&quot; href=&quot;https://leetcode-cn.com/problems/reverse-words-i</summary>
      
    
    
    
    <category term="JS" scheme="http://example.com/categories/JS/"/>
    
    <category term="字符串" scheme="http://example.com/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="前端刷题" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%88%B7%E9%A2%98/"/>
    
    <category term="双指针" scheme="http://example.com/categories/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
    
    <category term="LeetCode刷题" scheme="http://example.com/tags/LeetCode%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>剑指 Offer 05. 替换空格</title>
    <link href="http://example.com/2022/02/20/lc-OF05/"/>
    <id>http://example.com/2022/02/20/lc-OF05/</id>
    <published>2022-02-20T12:42:13.000Z</published>
    <updated>2022-02-20T14:26:28.286Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a class="link" href="https://leetcode-cn.com/problems/ti-huan-kong-ge-lcof/">点击前往<i class="fas fa-external-link-alt"></i></a></p><p>请实现一个函数，把字符串 s 中的每个空格替换成”%20”。</p><p>示例1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s &#x3D; &quot;We are happy.&quot;</span><br><span class="line">输出：&quot;We%20are%20happy.&quot;</span><br></pre></td></tr></table></figure><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><h2 id="双指针法"><a href="#双指针法" class="headerlink" title="双指针法"></a>双指针法</h2><ul><li>将字符串转换为数组，查询空格的个数；由于一个空格将会被三个字符给替换，所以此时需要将数组的长度扩大。</li><li>然后利用双指针从后往前进行查找替换：<ul><li>左指针每遇到一个空格就需要将右指针接下来三个位置换成指定内容；反之将右指针内容替换为左指针。</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">s</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;string&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> replaceSpace = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = <span class="built_in">Array</span>.from(s);</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">    arr.forEach(<span class="function"><span class="params">e</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(e === <span class="string">&quot; &quot;</span>)&#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">let</span> left = arr.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> right = arr.length + count * <span class="number">2</span> - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(left &gt;=<span class="number">0</span> )&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[left] === <span class="string">&quot; &quot;</span>)&#123;</span><br><span class="line">            arr[right--] = <span class="string">&quot;0&quot;</span>;</span><br><span class="line">            arr[right--] = <span class="string">&quot;2&quot;</span>;</span><br><span class="line">            arr[right--] = <span class="string">&quot;%&quot;</span>;</span><br><span class="line">            left--;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            arr[right--] = arr[left--];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr.join(<span class="string">&quot;&quot;</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="replace"><a href="#replace" class="headerlink" title="replace()"></a>replace()</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">s</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;string&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> replaceSpace = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s.replace(<span class="regexp">/ /g</span>,<span class="string">&quot;%20&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;&lt;a class=&quot;link&quot; href=&quot;https://leetcode-cn.com/problems/ti-huan-kong-ge</summary>
      
    
    
    
    <category term="JS" scheme="http://example.com/categories/JS/"/>
    
    <category term="字符串" scheme="http://example.com/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="前端刷题" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%88%B7%E9%A2%98/"/>
    
    <category term="双指针" scheme="http://example.com/categories/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
    
    <category term="LeetCode刷题" scheme="http://example.com/tags/LeetCode%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>541. 反转字符串 II</title>
    <link href="http://example.com/2022/02/20/lc-541/"/>
    <id>http://example.com/2022/02/20/lc-541/</id>
    <published>2022-02-20T10:23:42.000Z</published>
    <updated>2022-02-20T11:42:48.615Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a class="link" href="https://leetcode-cn.com/problems/reverse-string-ii">点击前往<i class="fas fa-external-link-alt"></i></a></p><p>给定一个字符串 s 和一个整数 k，从字符串开头算起，每计数至 2k 个字符，就反转这 2k 字符中的前 k 个字符。</p><ul><li>如果剩余字符少于 k 个，则将剩余字符全部反转。</li><li>如果剩余字符小于 2k 但大于或等于 k 个，则反转前 k 个字符，其余字符保持原样。</li></ul><p>示例1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s &#x3D; &quot;abcdefg&quot;, k &#x3D; 2</span><br><span class="line">输出：&quot;bacdfeg&quot;</span><br></pre></td></tr></table></figure><p>示例2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s &#x3D; &quot;abcd&quot;, k &#x3D; 2</span><br><span class="line">输出：&quot;bacd&quot;</span><br></pre></td></tr></table></figure><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><h2 id="双指针法"><a href="#双指针法" class="headerlink" title="双指针法"></a>双指针法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">s</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">k</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;string&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> reverseStr = <span class="function"><span class="keyword">function</span>(<span class="params">s, k</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = s.split(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    <span class="keyword">let</span> len = arr.length;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i =<span class="number">0</span>; i &lt; len; i += <span class="number">2</span>*k)&#123;</span><br><span class="line">        <span class="keyword">let</span> l = i-<span class="number">1</span> , r = i + k &gt; len ? len : i + k;</span><br><span class="line">        <span class="keyword">while</span>(++l &lt; --r)&#123;</span><br><span class="line">            [arr[l],arr[r]] = [arr[r],arr[l]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr.join(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;&lt;a class=&quot;link&quot; href=&quot;https://leetcode-cn.com/problems/reverse-string-</summary>
      
    
    
    
    <category term="JS" scheme="http://example.com/categories/JS/"/>
    
    <category term="字符串" scheme="http://example.com/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="前端刷题" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%88%B7%E9%A2%98/"/>
    
    <category term="双指针" scheme="http://example.com/categories/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
    
    <category term="LeetCode刷题" scheme="http://example.com/tags/LeetCode%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>344. 反转字符串</title>
    <link href="http://example.com/2022/02/20/lc-344/"/>
    <id>http://example.com/2022/02/20/lc-344/</id>
    <published>2022-02-20T09:30:04.000Z</published>
    <updated>2022-02-20T09:49:34.891Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a class="link" href="https://leetcode-cn.com/problems/reverse-string/">点击前往<i class="fas fa-external-link-alt"></i></a></p><p>编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 s 的形式给出。</p><p>不要给另外的数组分配额外的空间，你必须原地修改输入数组、使用 O(1) 的额外空间解决这一问题。</p><p>示例1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s &#x3D; [&quot;h&quot;,&quot;e&quot;,&quot;l&quot;,&quot;l&quot;,&quot;o&quot;]</span><br><span class="line">输出：[&quot;o&quot;,&quot;l&quot;,&quot;l&quot;,&quot;e&quot;,&quot;h&quot;]</span><br></pre></td></tr></table></figure><p>示例2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s &#x3D; [&quot;H&quot;,&quot;a&quot;,&quot;n&quot;,&quot;n&quot;,&quot;a&quot;,&quot;h&quot;]</span><br><span class="line">输出：[&quot;h&quot;,&quot;a&quot;,&quot;n&quot;,&quot;n&quot;,&quot;a&quot;,&quot;H&quot;]</span><br></pre></td></tr></table></figure><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><h2 id="reverse-方法"><a href="#reverse-方法" class="headerlink" title="reverse()方法"></a>reverse()方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;character[]&#125;</span> <span class="variable">s</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;void&#125;</span> </span>Do not return anything, modify s in-place instead.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> reverseString = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s.reverse();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="双指针法"><a href="#双指针法" class="headerlink" title="双指针法"></a>双指针法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;character[]&#125;</span> <span class="variable">s</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;void&#125;</span> </span>Do not return anything, modify s in-place instead.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> reverseString = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> len = s.length;</span><br><span class="line">    <span class="keyword">let</span> left = <span class="number">0</span>, right = len - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">        [s[left],s[right]] = [s[right],s[left]];</span><br><span class="line">        left++;</span><br><span class="line">        right--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;&lt;a class=&quot;link&quot; href=&quot;https://leetcode-cn.com/problems/reverse-string/</summary>
      
    
    
    
    <category term="JS" scheme="http://example.com/categories/JS/"/>
    
    <category term="字符串" scheme="http://example.com/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="前端刷题" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%88%B7%E9%A2%98/"/>
    
    <category term="双指针" scheme="http://example.com/categories/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
    
    <category term="LeetCode刷题" scheme="http://example.com/tags/LeetCode%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>15. 三数之和</title>
    <link href="http://example.com/2022/02/20/lc-15/"/>
    <id>http://example.com/2022/02/20/lc-15/</id>
    <published>2022-02-20T08:42:04.000Z</published>
    <updated>2022-02-20T09:32:47.618Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a class="link" href="https://leetcode-cn.com/problems/3sum">点击前往<i class="fas fa-external-link-alt"></i></a></p><p>给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？请你找出所有和为 0 且不重复的三元组。</p><p>注意：答案中不可以包含重复的三元组。</p><p>示例1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums &#x3D; [-1,0,1,2,-1,-4]</span><br><span class="line">输出：[[-1,-1,2],[-1,0,1]]</span><br></pre></td></tr></table></figure><p>示例2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums &#x3D; []</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><p>示例3：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums &#x3D; [0]</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>拿这个nums数组来举例，首先将数组排序，然后有一层for循环，i从下标0的地方开始，同时定一个下标left 定义在i+1的位置上，定义下标right 在数组结尾的位置上。</p><p>依然还是在数组中找到 abc 使得a + b +c =0，我们这里相当于 a = nums[i] b = nums[left] c = nums[right]。</p><p>接下来如何移动left 和right呢， 如果nums[i] + nums[left] + nums[right] &gt; 0 就说明 此时三数之和大了，因为数组是排序后了，所以right下标就应该向左移动，这样才能让三数之和小一些。</p><p>如果 nums[i] + nums[left] + nums[right] &lt; 0 说明 此时 三数之和小了，left 就向右移动，才能让三数之和大一些，直到left与right相遇为止。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> threeSum = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> len = nums.length;</span><br><span class="line">    <span class="keyword">if</span>(len &lt; <span class="number">3</span>) <span class="keyword">return</span> [];</span><br><span class="line">    nums.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line">    <span class="keyword">const</span> res = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len - <span class="number">2</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i] &gt; <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">// a去重</span></span><br><span class="line">        <span class="keyword">if</span>(i &gt; <span class="number">0</span> &amp;&amp; nums[i] === nums[i - <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">let</span> l = i + <span class="number">1</span>, r = len - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l &lt; r) &#123;</span><br><span class="line">            <span class="keyword">const</span> sum = nums[i] + nums[l] + nums[r];</span><br><span class="line">            <span class="keyword">if</span>(sum &lt; <span class="number">0</span>) &#123; l++; <span class="keyword">continue</span> &#125;;</span><br><span class="line">            <span class="keyword">if</span>(sum &gt; <span class="number">0</span>) &#123; r--; <span class="keyword">continue</span> &#125;;</span><br><span class="line">            res.push([nums[i], nums[l], nums[r]])</span><br><span class="line">            <span class="comment">// b c 去重 </span></span><br><span class="line">            <span class="keyword">while</span>(l &lt; r &amp;&amp; nums[l] === nums[++l]);</span><br><span class="line">            <span class="keyword">while</span>(l &lt; r &amp;&amp; nums[r] === nums[--r]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;&lt;a class=&quot;link&quot; href=&quot;https://leetcode-cn.com/problems/3sum&quot;&gt;点击前往&lt;i cl</summary>
      
    
    
    
    <category term="JS" scheme="http://example.com/categories/JS/"/>
    
    <category term="前端刷题" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%88%B7%E9%A2%98/"/>
    
    <category term="哈希表" scheme="http://example.com/categories/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    
    <category term="双指针法" scheme="http://example.com/categories/%E5%8F%8C%E6%8C%87%E9%92%88%E6%B3%95/"/>
    
    
    <category term="LeetCode刷题" scheme="http://example.com/tags/LeetCode%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>454. 四数相加 II</title>
    <link href="http://example.com/2022/02/19/lc-454/"/>
    <id>http://example.com/2022/02/19/lc-454/</id>
    <published>2022-02-19T07:49:28.000Z</published>
    <updated>2022-02-19T10:42:36.843Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a class="link" href="https://leetcode-cn.com/problems/4sum-ii">点击前往<i class="fas fa-external-link-alt"></i></a></p><p>给你四个整数数组 nums1、nums2、nums3 和 nums4 ，数组长度都是 n ，请你计算有多少个元组 (i, j, k, l) 能满足：</p><ul><li>0 &lt;= i, j, k, l &lt; n</li><li>nums1[i] + nums2[j] + nums3[k] + nums4[l] == 0</li></ul><p>示例1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：nums1 &#x3D; [1,2], nums2 &#x3D; [-2,-1], nums3 &#x3D; [-1,2], nums4 &#x3D; [0,2]</span><br><span class="line">输出：2</span><br><span class="line">解释：</span><br><span class="line">两个元组如下：</span><br><span class="line">1. (0, 0, 0, 1) -&gt; nums1[0] + nums2[0] + nums3[0] + nums4[1] &#x3D; 1 + (-2) + (-1) + 2 &#x3D; 0</span><br><span class="line">2. (1, 1, 0, 0) -&gt; nums1[1] + nums2[1] + nums3[0] + nums4[0] &#x3D; 2 + (-1) + (-1) + 0 &#x3D; 0</span><br></pre></td></tr></table></figure><p>示例2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums1 &#x3D; [0], nums2 &#x3D; [0], nums3 &#x3D; [0], nums4 &#x3D; [0]</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><ul><li>双层循环遍历前两个数组，利用哈希表统计前两个数组中元素的和并存储在哈希表中，和为键，出现次数为值。</li><li>双层循环遍历后两个数组，计算出和后得 0 - sum，找哈希表中是否存在对应值，如果存在就返回。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums1</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums2</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums3</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums4</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> fourSumCount = <span class="function"><span class="keyword">function</span>(<span class="params">nums1, nums2, nums3, nums4</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> hashmap = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">    <span class="keyword">let</span> result = <span class="number">0</span> ;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> i <span class="keyword">of</span> nums1)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">const</span> j <span class="keyword">of</span> nums2)&#123;</span><br><span class="line">            <span class="keyword">const</span> sum = i + j;</span><br><span class="line">            hashmap.set(sum,(hashmap.get(sum) || <span class="number">0</span>) +<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> i <span class="keyword">of</span> nums3)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">const</span> j <span class="keyword">of</span> nums4)&#123;</span><br><span class="line">            <span class="keyword">const</span> sum = i + j;</span><br><span class="line">            result += (hashmap.get(<span class="number">0</span> - sum) || <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;&lt;a class=&quot;link&quot; href=&quot;https://leetcode-cn.com/problems/4sum-ii&quot;&gt;点击前往&lt;i</summary>
      
    
    
    
    <category term="JS" scheme="http://example.com/categories/JS/"/>
    
    <category term="前端刷题" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%88%B7%E9%A2%98/"/>
    
    <category term="哈希表" scheme="http://example.com/categories/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    
    
    <category term="LeetCode刷题" scheme="http://example.com/tags/LeetCode%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>1. 两数之和</title>
    <link href="http://example.com/2022/02/19/lc-1/"/>
    <id>http://example.com/2022/02/19/lc-1/</id>
    <published>2022-02-19T05:50:24.000Z</published>
    <updated>2022-02-19T07:11:35.689Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a class="link" href="https://leetcode-cn.com/problems/two-sum">点击前往<i class="fas fa-external-link-alt"></i></a></p><p>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p><p>你可以按任意顺序返回答案。</p><p>示例1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums &#x3D; [2,7,11,15], target &#x3D; 9</span><br><span class="line">输出：[0,1]</span><br><span class="line">解释：因为 nums[0] + nums[1] &#x3D;&#x3D; 9 ，返回 [0, 1] 。</span><br></pre></td></tr></table></figure><p>示例2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums &#x3D; [3,2,4], target &#x3D; 6</span><br><span class="line">输出：[1,2]</span><br></pre></td></tr></table></figure><p>示例3：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums &#x3D; [3,3], target &#x3D; 6</span><br><span class="line">输出：[0,1]</span><br></pre></td></tr></table></figure><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">target</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> twoSum = <span class="function"><span class="keyword">function</span>(<span class="params">nums, target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> hashmap = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i &lt; nums.length;i++)&#123;</span><br><span class="line">        <span class="keyword">let</span> diff = target-nums[i];</span><br><span class="line">        <span class="keyword">if</span>(hashmap.has(diff))&#123;</span><br><span class="line">            <span class="keyword">return</span> [i,hashmap.get(diff)];</span><br><span class="line">        &#125;</span><br><span class="line">        hashmap.set(nums[i],i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;&lt;a class=&quot;link&quot; href=&quot;https://leetcode-cn.com/problems/two-sum&quot;&gt;点击前往&lt;i</summary>
      
    
    
    
    <category term="JS" scheme="http://example.com/categories/JS/"/>
    
    <category term="前端刷题" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%88%B7%E9%A2%98/"/>
    
    <category term="哈希表" scheme="http://example.com/categories/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    
    
    <category term="LeetCode刷题" scheme="http://example.com/tags/LeetCode%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>202. 快乐数</title>
    <link href="http://example.com/2022/02/19/lc-202/"/>
    <id>http://example.com/2022/02/19/lc-202/</id>
    <published>2022-02-19T05:00:25.000Z</published>
    <updated>2022-02-19T05:36:51.144Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a class="link" href="https://leetcode-cn.com/problems/happy-number">点击前往<i class="fas fa-external-link-alt"></i></a></p><p>编写一个算法来判断一个数 n 是不是快乐数。</p><p>「快乐数」 定义为：</p><pre><code>对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和。然后重复这个过程直到这个数变为 1，也可能是 无限循环 但始终变不到 1。如果这个过程 结果为 1，那么这个数就是快乐数。</code></pre><p>如果 n 是 快乐数 就返回 true ；不是，则返回 false 。</p><p>示例 1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n &#x3D; 19</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n &#x3D; 2</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><ul><li>创建sum函数用于取模求和。</li><li>创建哈希表用于存储求和的值，利用循环来判断当重复出现某个和的时候说明出现循环。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">n</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> total = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(n)&#123;</span><br><span class="line">        total += (n % <span class="number">10</span>) ** <span class="number">2</span>;</span><br><span class="line">        n = <span class="built_in">Math</span>.floor(n / <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> total;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> isHappy = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> hashmap = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">    <span class="keyword">let</span> num = sum(n);</span><br><span class="line">    <span class="keyword">while</span>(!hashmap.has(num))&#123;</span><br><span class="line">        hashmap.set(num,num);</span><br><span class="line">        num = sum(num);</span><br><span class="line">        <span class="keyword">if</span>(num === <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;&lt;a class=&quot;link&quot; href=&quot;https://leetcode-cn.com/problems/happy-number&quot;&gt;点</summary>
      
    
    
    
    <category term="JS" scheme="http://example.com/categories/JS/"/>
    
    <category term="前端刷题" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%88%B7%E9%A2%98/"/>
    
    <category term="哈希表" scheme="http://example.com/categories/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    
    
    <category term="LeetCode刷题" scheme="http://example.com/tags/LeetCode%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>350. 两个数组的交集 II</title>
    <link href="http://example.com/2022/02/18/lc-350/"/>
    <id>http://example.com/2022/02/18/lc-350/</id>
    <published>2022-02-18T13:08:32.000Z</published>
    <updated>2022-02-18T13:31:04.439Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a class="link" href="https://leetcode-cn.com/problems/intersection-of-two-arrays-ii">点击前往<i class="fas fa-external-link-alt"></i></a></p><p>给你两个整数数组 nums1 和 nums2 ，请你以数组形式返回两数组的交集。返回结果中每个元素出现的次数，应与元素在两个数组中都出现的次数一致（如果出现次数不一致，则考虑取较小值）。可以不考虑输出结果的顺序。</p><p>示例 1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums1 &#x3D; [1,2,2,1], nums2 &#x3D; [2,2]</span><br><span class="line">输出：[2,2]</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums1 &#x3D; [4,9,5], nums2 &#x3D; [9,4,9,8,4]</span><br><span class="line">输出：[4,9]</span><br></pre></td></tr></table></figure><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><ul><li>将nums1和nums2用哈希表替换。</li><li>比较对应键值的大小，返回较小的。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums1</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums2</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> intersect = <span class="function"><span class="keyword">function</span>(<span class="params">nums1, nums2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> hashmap1 = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">    <span class="keyword">let</span> hashmap2 = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">    <span class="keyword">let</span> result = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">    nums1.forEach(<span class="function"><span class="params">e</span>=&gt;</span>&#123;</span><br><span class="line">        hashmap1.set(e,(hashmap1.get(e) || <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    nums2.forEach(<span class="function"><span class="params">e</span>=&gt;</span>&#123;</span><br><span class="line">        hashmap2.set(e,(hashmap2.get(e) || <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    hashmap1.forEach(<span class="function">(<span class="params">val,key</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(hashmap2.has(key))&#123;</span><br><span class="line">            <span class="keyword">let</span> num = val &lt; hashmap2.get(key) ? val : hashmap2.get(key);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;num;i++)&#123;</span><br><span class="line">                result.push(key);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;&lt;a class=&quot;link&quot; href=&quot;https://leetcode-cn.com/problems/intersection-of</summary>
      
    
    
    
    <category term="JS" scheme="http://example.com/categories/JS/"/>
    
    <category term="前端刷题" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%88%B7%E9%A2%98/"/>
    
    <category term="哈希表" scheme="http://example.com/categories/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    
    
    <category term="LeetCode刷题" scheme="http://example.com/tags/LeetCode%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
</feed>
