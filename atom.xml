<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>姚永坤的小窝</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-11-09T07:30:53.211Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>姚永坤</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SVG 学习笔记（四）样式相关</title>
    <link href="http://example.com/2023/11/09/svg-4/"/>
    <id>http://example.com/2023/11/09/svg-4/</id>
    <published>2023-11-09T07:27:53.000Z</published>
    <updated>2023-11-09T07:30:53.211Z</updated>
    
    <content type="html"><![CDATA[<h1 id="着色"><a href="#着色" class="headerlink" title="着色"></a>着色</h1><ul><li>stroke：线条颜色</li><li>stroke-width：线条宽度</li><li>stroke-opacity：瞄边透明度</li><li>fill：区域填充色</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;着色&quot;&gt;&lt;a href=&quot;#着色&quot; class=&quot;headerlink&quot; title=&quot;着色&quot;&gt;&lt;/a&gt;着色&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;stroke：线条颜色&lt;/li&gt;
&lt;li&gt;stroke-width：线条宽度&lt;/li&gt;
&lt;li&gt;stroke-opacity：瞄</summary>
      
    
    
    
    <category term="前端学习笔记" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="SVG 学习" scheme="http://example.com/tags/SVG-%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>SVG 学习笔记（三）基础形状</title>
    <link href="http://example.com/2023/11/08/svg-3/"/>
    <id>http://example.com/2023/11/08/svg-3/</id>
    <published>2023-11-08T12:50:11.000Z</published>
    <updated>2023-11-09T07:27:49.418Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--椭圆--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> <span class="attr">height</span>=<span class="string">&quot;250&quot;</span> <span class="attr">version</span>=<span class="string">&quot;1.1&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--矩形  起始位置坐标    设置圆角的半径           宽高              线条颜色          填充色              线条宽度     --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">&quot;60&quot;</span> <span class="attr">y</span>=<span class="string">&quot;10&quot;</span> <span class="attr">rx</span>=<span class="string">&quot;10&quot;</span> <span class="attr">ry</span>=<span class="string">&quot;10&quot;</span> <span class="attr">width</span>=<span class="string">&quot;30&quot;</span> <span class="attr">height</span>=<span class="string">&quot;30&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;black&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;transparent&quot;</span> <span class="attr">stroke-width</span>=<span class="string">&quot;5&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--圆          圆心坐标      半径     线条颜色         填充色             线条宽度    --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">&quot;25&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;75&quot;</span> <span class="attr">r</span>=<span class="string">&quot;20&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;red&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;transparent&quot;</span> <span class="attr">stroke-width</span>=<span class="string">&quot;5&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--椭圆        圆心坐标      x半径   y半径     线条颜色          填充色            线条宽度    --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ellipse</span> <span class="attr">cx</span>=<span class="string">&quot;75&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;75&quot;</span> <span class="attr">rx</span>=<span class="string">&quot;20&quot;</span> <span class="attr">ry</span>=<span class="string">&quot;5&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;red&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;transparent&quot;</span> <span class="attr">stroke-width</span>=<span class="string">&quot;5&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--直线    起始点坐标         结束位置坐标       线条颜色           线条宽度   --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">line</span> <span class="attr">x1</span>=<span class="string">&quot;10&quot;</span> <span class="attr">x2</span>=<span class="string">&quot;50&quot;</span> <span class="attr">y1</span>=<span class="string">&quot;110&quot;</span> <span class="attr">y2</span>=<span class="string">&quot;150&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;orange&quot;</span> <span class="attr">stroke-width</span>=<span class="string">&quot;5&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--折线  点集  线条颜色  填充色  线条宽度--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">polyline</span> <span class="attr">points</span>=<span class="string">&quot;60, 110 65, 120 70, 115 75, 130 80, 125 85, 140 90, 135 95, 150 100, 145&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">stroke</span>=<span class="string">&quot;orange&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;transparent&quot;</span> <span class="attr">stroke-width</span>=<span class="string">&quot;5&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--多边形  点集  线条颜色 填充色  线条宽度--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">polygon</span> <span class="attr">points</span>=<span class="string">&quot;50, 160 55, 180 70, 180 60, 190 65, 205 50, 195 35, 205 40, 190 30, 180 45, 180&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">stroke</span>=<span class="string">&quot;green&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;transparent&quot;</span> <span class="attr">stroke-width</span>=<span class="string">&quot;5&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--路径 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M20,230 Q40,205 50,230 T90,230&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;blue&quot;</span> <span class="attr">stroke-width</span>=<span class="string">&quot;5&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h1><ul><li>路径除了基础属性<code>fill、stroke、stroke-width</code>等以外其最为重要的就是<code>d</code></li></ul><table><thead><tr><th>用处</th><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>起始位置</td><td><code>M(x, y)</code></td><td>开始位置坐标</td></tr><tr><td>直线</td><td><code>L(x, y)</code></td><td>当前位置绘制直线到(x, y)</td></tr><tr><td>水平直线</td><td><code>H(x)</code></td><td>当前位置绘制水平直线至x</td></tr><tr><td>垂直直线</td><td><code>V(y)</code></td><td>当前位置绘制垂直直线至y</td></tr><tr><td>闭合</td><td><code>Z</code></td><td>闭合开始结束位置</td></tr><tr><td>三次贝塞尔曲线</td><td><code>C x1 y1, x2 y2, x y</code></td><td>控制点1(x1 y1) 控制点2(x2 y2) 曲线终点(x y)</td></tr><tr><td>三次贝塞尔曲线（简写）</td><td><code>S x2 y2, x y</code></td><td>必须跟在C/S后面，控制点2(x2 y2) 曲线终点(x y)</td></tr><tr><td>两次贝塞尔曲线</td><td><code>Q x1 y1, x y</code></td><td>控制点(x1 y1) 曲线终点(x y)</td></tr><tr><td>两次贝塞尔曲线（简写）</td><td><code>T x y</code></td><td>必须跟在Q/T后面，曲线终点(x y)</td></tr><tr><td>弧形</td><td><code>A rx ry x-axis-rotation large-arc-flag sweep-flag x y</code></td><td>x半径 y半径 x轴偏移角度 选择弧线大(1)小(0) 画弧顺(1)逆(0)时针 终点(x y)</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;</summary>
      
    
    
    
    <category term="前端学习笔记" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="SVG 学习" scheme="http://example.com/tags/SVG-%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>SVG 学习笔记（一）基础</title>
    <link href="http://example.com/2023/11/08/svg-1/"/>
    <id>http://example.com/2023/11/08/svg-1/</id>
    <published>2023-11-08T11:28:07.000Z</published>
    <updated>2023-11-08T11:44:46.926Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、基本构成"><a href="#一、基本构成" class="headerlink" title="一、基本构成"></a>一、基本构成</h1><ul><li><code>&lt;svg&gt;</code>标签 + <code>&lt;g&gt;</code> 组合 + 各式形状</li><li>SVG 里的<strong>属性值必须用引号引起来，数值也同样</strong>。</li><li>渲染顺序：<strong>后来居上，越后面的元素越可见</strong>。</li></ul><h1 id="二、SVG的引入"><a href="#二、SVG的引入" class="headerlink" title="二、SVG的引入"></a>二、SVG的引入</h1><h2 id="常规HTML"><a href="#常规HTML" class="headerlink" title="常规HTML"></a>常规HTML</h2><ul><li>如果 HTML 是 XHTML 并且声明类型为 application/xhtml+xml，可以直接把 SVG 嵌入到 XML 源码中。</li><li>SVG 可以直接被嵌入到 HTML 中。<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Inline SVG 示例<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> <span class="attr">height</span>=<span class="string">&quot;200&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">&quot;100&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;100&quot;</span> <span class="attr">r</span>=<span class="string">&quot;50&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;red&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>可以使用 img 元素。<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;./logo.svg&#x27;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li>可以通过 object 元素引用 SVG 文件：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">object</span> <span class="attr">data</span>=<span class="string">&quot;image.svg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;image/svg+xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>使用 iframe 元素引用 SVG 文件</li><li>使用 CSS 的background-image属性<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.svg-container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;path/to/your-svg-file.svg&quot;</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-size</span>: cover;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>外部SVG文件引入示例<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;svg-container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、基本构成&quot;&gt;&lt;a href=&quot;#一、基本构成&quot; class=&quot;headerlink&quot; title=&quot;一、基本构成&quot;&gt;&lt;/a&gt;一、基本构成&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt;标签 + &lt;code&gt;&amp;lt;g&amp;gt;&lt;/co</summary>
      
    
    
    
    <category term="前端学习笔记" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="SVG 学习" scheme="http://example.com/tags/SVG-%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>SVG 学习笔记（二）viewbox、height、width</title>
    <link href="http://example.com/2023/11/08/svg-2/"/>
    <id>http://example.com/2023/11/08/svg-2/</id>
    <published>2023-11-08T11:28:07.000Z</published>
    <updated>2023-11-08T12:48:16.988Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">viewbox</span>=<span class="string">&quot;0 0 100 100&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><ul><li>viewBox：视窗盒子，简单理解就是在整个<code>svg</code>里截取某一块可见的区域<ul><li><code>viewBox=&quot;x, y, width, height&quot; x: 左上角横坐标，y: 左上角纵坐标，width: 截取的宽度，height: 截取的长度</code></li><li>通过传递以上参数就可以确定区域。</li></ul></li><li>width，height: svg 面板的宽和高</li></ul><h1 id="难点"><a href="#难点" class="headerlink" title="难点"></a>难点</h1><blockquote><p><strong>如何正确设置三者的值？</strong></p></blockquote><p>需要明确需求是什么？——获取到我们需要/绘制的<code>svg</code></p><ul><li>如果说当前绘制的矢量图已经将整个svg空间填满，此时我们需要去拿到整个形状，此时将我们的<code>viewBox</code>完全覆盖整个svg面板即可。<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">&quot;24&quot;</span> <span class="attr">height</span>=<span class="string">&quot;24&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 24 24&quot;</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>怎样在保持svg不变的前提下（不对内部path等元素进行修改）对svg进行放大缩小？</p></blockquote><ul><li>针对这个问题我们首先需要明确一点，<code>svg</code>的绘制是基于内部元素而定的，直接将<code>svg</code>的 <code>width、height、viewBox</code>等设置具体的数值其内部元素大小并不会跟着发生变化。</li><li>简单讲就是我们原来在一张 <code>4*4</code> 的纸画了一幅画，现在我们需要在 <code>8*8</code> 的纸上在 <code>4*4</code> 的范围内重新画一次，这样就导致只有 1/4 的面积有内容，其余部分均为空白。</li><li>解决方案：<strong>不设置<code>svg</code>的宽高/设置宽高为 100%，然后用一个元素包裹该svg，通过设置父元素的宽高来控制svg的大小</strong></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--此时svg会撑满整个父元素--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;svg-container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">svg</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 24 24&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.svg-container</span>&#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=</summary>
      
    
    
    
    <category term="前端学习笔记" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="SVG 学习" scheme="http://example.com/tags/SVG-%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>前端工具包 - className</title>
    <link href="http://example.com/2023/11/06/widget-classNames/"/>
    <id>http://example.com/2023/11/06/widget-classNames/</id>
    <published>2023-11-06T07:07:13.000Z</published>
    <updated>2023-11-06T09:04:09.740Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><ul><li>用于有条件地将类名连接在一起，常用于 React 应用。</li></ul><h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><ul><li>该classNames函数接受任意数量的参数，可以是字符串或对象。该参数<code>&#39;foo&#39;</code>是 的缩写<code>&#123; foo: true &#125;</code>。</li><li>如果与给定键关联的值是假的，则该键将不会包含在输出中。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> classNames = <span class="built_in">require</span>(<span class="string">&#x27;classnames&#x27;</span>) <span class="comment">// import classNames from &#x27;classnames&#x27;</span></span><br><span class="line"><span class="title function_">classNames</span>(<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>); <span class="comment">// =&gt; &#x27;foo bar&#x27;</span></span><br><span class="line"><span class="title function_">classNames</span>(<span class="string">&#x27;foo&#x27;</span>, &#123; <span class="attr">bar</span>: <span class="literal">true</span> &#125;); <span class="comment">// =&gt; &#x27;foo bar&#x27;</span></span><br><span class="line"><span class="title function_">classNames</span>(&#123; <span class="string">&#x27;foo-bar&#x27;</span>: <span class="literal">true</span> &#125;); <span class="comment">// =&gt; &#x27;foo-bar&#x27;</span></span><br><span class="line"><span class="title function_">classNames</span>(&#123; <span class="string">&#x27;foo-bar&#x27;</span>: <span class="literal">false</span> &#125;); <span class="comment">// =&gt; &#x27;&#x27;</span></span><br><span class="line"><span class="title function_">classNames</span>(&#123; <span class="attr">foo</span>: <span class="literal">true</span> &#125;, &#123; <span class="attr">bar</span>: <span class="literal">true</span> &#125;); <span class="comment">// =&gt; &#x27;foo bar&#x27;</span></span><br><span class="line"><span class="title function_">classNames</span>(&#123; <span class="attr">foo</span>: <span class="literal">true</span>, <span class="attr">bar</span>: <span class="literal">true</span> &#125;); <span class="comment">// =&gt; &#x27;foo bar&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// lots of arguments of various types</span></span><br><span class="line"><span class="title function_">classNames</span>(<span class="string">&#x27;foo&#x27;</span>, &#123; <span class="attr">bar</span>: <span class="literal">true</span>, <span class="attr">duck</span>: <span class="literal">false</span> &#125;, <span class="string">&#x27;baz&#x27;</span>, &#123; <span class="attr">quux</span>: <span class="literal">true</span> &#125;); <span class="comment">// =&gt; &#x27;foo bar baz quux&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// other falsy values are just ignored</span></span><br><span class="line"><span class="title function_">classNames</span>(<span class="literal">null</span>, <span class="literal">false</span>, <span class="string">&#x27;bar&#x27;</span>, <span class="literal">undefined</span>, <span class="number">0</span>, <span class="number">1</span>, &#123; <span class="attr">baz</span>: <span class="literal">null</span> &#125;, <span class="string">&#x27;&#x27;</span>); <span class="comment">// =&gt; &#x27;bar 1&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>配合模版字符串使用</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> classNames = <span class="built_in">require</span>(<span class="string">&#x27;classnames&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> buttonType = <span class="string">&#x27;primary&#x27;</span>;</span><br><span class="line"><span class="title function_">classNames</span>(&#123; [<span class="string">`btn-<span class="subst">$&#123;buttonType&#125;</span>`</span>]: <span class="literal">true</span> &#125;);</span><br></pre></td></tr></table></figure><ul><li>通过 <code>classname/bind</code> 实现类名合并。</li><li>注：如果有重复的类名不会被去重</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> classNames = <span class="built_in">require</span>(<span class="string">&#x27;classnames&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">classNames</span>(<span class="string">&#x27;a&#x27;</span>, [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>], &#123;<span class="attr">d</span>: <span class="literal">true</span>,<span class="attr">e</span>:<span class="literal">false</span>,<span class="attr">f</span>:<span class="literal">true</span>&#125;))</span><br><span class="line"><span class="comment">// a a b c d f</span></span><br></pre></td></tr></table></figure><h1 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 采用立即执行函数避免样式污染等问题</span></span><br><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="string">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// hasOwn是一个引用了 &#123;&#125;.hasOwnProperty 方法的变量。</span></span><br><span class="line">  <span class="comment">// nativeCodeString 是一个字符串，表示原生代码。</span></span><br><span class="line"><span class="keyword">var</span> hasOwn = &#123;&#125;.<span class="property">hasOwnProperty</span>;</span><br><span class="line"><span class="keyword">var</span> nativeCodeString = <span class="string">&#x27;[native code]&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 该函数接受任意数量的参数，并根据参数的类型进行处理</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">classNames</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">var</span> classes = [];<span class="comment">// 所有类名的集合</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line"><span class="keyword">var</span> arg = <span class="variable language_">arguments</span>[i];</span><br><span class="line"><span class="keyword">if</span> (!arg) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> argType = <span class="keyword">typeof</span> arg;</span><br><span class="line">      <span class="comment">// 如果是字符串和数字直接放入结果中</span></span><br><span class="line"><span class="keyword">if</span> (argType === <span class="string">&#x27;string&#x27;</span> || argType === <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">classes.<span class="title function_">push</span>(arg);</span><br><span class="line">&#125;</span><br><span class="line">      <span class="comment">// 数组：递归调用 classNames 函数</span></span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arg)) &#123;</span><br><span class="line"><span class="keyword">if</span> (arg.<span class="property">length</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> inner = classNames.<span class="title function_">apply</span>(<span class="literal">null</span>, arg);</span><br><span class="line"><span class="keyword">if</span> (inner) &#123;</span><br><span class="line">classes.<span class="title function_">push</span>(inner);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">      <span class="comment">// 对象：首先检查对象的toString方法是否被重写且不是原生方法，如果满足条件，则将对象转换为字符串，并将结果加入到classes数组中</span></span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (argType === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (arg.<span class="property">toString</span> !== <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span> &amp;&amp; !arg.<span class="property">toString</span>.<span class="title function_">toString</span>().<span class="title function_">includes</span>(<span class="string">&#x27;[native code]&#x27;</span>)) &#123;</span><br><span class="line">classes.<span class="title function_">push</span>(arg.<span class="title function_">toString</span>());</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> arg) &#123;</span><br><span class="line"><span class="keyword">if</span> (hasOwn.<span class="title function_">call</span>(arg, key) &amp;&amp; arg[key]) &#123;</span><br><span class="line">classes.<span class="title function_">push</span>(key);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 结果返回字符串</span></span><br><span class="line"><span class="keyword">return</span> classes.<span class="title function_">join</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 根据不同的运行环境，将classNames函数导出为模块或在全局作用域中定义。</span></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 如果代码运行在 CommonJS 环境（如Node.js），则将classNames函数赋值给module.exports，使其可以被其他模块引用。</span></span><br><span class="line"><span class="comment">   * 同时，将classNames函数赋值给classNames.default属性，以便在导入模块时可以通过default属性访问到该函数。</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">module</span> !== <span class="string">&#x27;undefined&#x27;</span> &amp;&amp; <span class="variable language_">module</span>.<span class="property">exports</span>) &#123;</span><br><span class="line">classNames.<span class="property">default</span> = classNames;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = classNames;</span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 如果代码运行在 AMD 环境（如RequireJS），则使用define函数将classNames函数定义为一个模块，模块名为classnames。</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> define === <span class="string">&#x27;function&#x27;</span> &amp;&amp; <span class="keyword">typeof</span> define.<span class="property">amd</span> === <span class="string">&#x27;object&#x27;</span> &amp;&amp; define.<span class="property">amd</span>) &#123;</span><br><span class="line"><span class="comment">// register as &#x27;classnames&#x27;, consistent with npm package name</span></span><br><span class="line"><span class="title function_">define</span>(<span class="string">&#x27;classnames&#x27;</span>, [], <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> classNames;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 假设代码运行在浏览器环境，将classNames函数赋值给全局对象window的classNames属性，使其在全局作用域中可访问。</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">classNames</span> = classNames;</span><br><span class="line">&#125;</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;用于有条件地将类名连接在一起，常用于 React 应用。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;基本使用&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    <category term="前端工具包" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%B7%A5%E5%85%B7%E5%8C%85/"/>
    
    <category term="className" scheme="http://example.com/categories/className/"/>
    
    
    <category term="前端工具包" scheme="http://example.com/tags/%E5%89%8D%E7%AB%AF%E5%B7%A5%E5%85%B7%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>Antd 组件源码分析（一）Spin</title>
    <link href="http://example.com/2023/11/06/antd-spin/"/>
    <id>http://example.com/2023/11/06/antd-spin/</id>
    <published>2023-11-06T03:32:19.000Z</published>
    <updated>2023-11-06T06:48:55.320Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spin组件介绍"><a href="#Spin组件介绍" class="headerlink" title="Spin组件介绍"></a>Spin组件介绍</h1><ul><li>可以理解为loading组件，在页面局部处于等待异步数据或正在渲染过程时，合适的加载动效会有效缓解用户的焦虑。</li></ul><h1 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h1><ul><li>定义了SpinFC组件，它是Spin组件的包装，并提供了默认的指示器设置和样式处理</li></ul><h2 id="props"><a href="#props" class="headerlink" title="props"></a>props</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">SpinProps</span> &#123;</span><br><span class="line">  prefixCls?: <span class="built_in">string</span>;</span><br><span class="line">  className?: <span class="built_in">string</span>;</span><br><span class="line">  rootClassName?: <span class="built_in">string</span>;</span><br><span class="line">  spinning?: <span class="built_in">boolean</span>;</span><br><span class="line">  style?: <span class="title class_">React</span>.<span class="property">CSSProperties</span>;</span><br><span class="line">  size?: <span class="title class_">SpinSize</span>;</span><br><span class="line">  tip?: <span class="title class_">React</span>.<span class="property">ReactNode</span>;</span><br><span class="line">  delay?: <span class="built_in">number</span>;</span><br><span class="line">  wrapperClassName?: <span class="built_in">string</span>;</span><br><span class="line">  indicator?: <span class="title class_">SpinIndicator</span>;</span><br><span class="line">  children?: <span class="title class_">React</span>.<span class="property">ReactNode</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>prefixCls（可选）：Spin组件的CSS类名的前缀。</li><li>className（可选）：Spin组件的额外CSS类名。</li><li>rootClassName（可选）：Spin组件根元素的额外CSS类名。</li><li>spinning（可选）：指示Spin组件是否处于加载状态，默认为true。</li><li>style（可选）：Spin组件的行内样式。</li><li>size（可选）：Spin组件的大小，可选值为’small’、’default’、’large’。</li><li>tip（可选）：Spin组件的提示文本。</li><li>delay（可选）：延迟显示加载状态的时间，单位为毫秒。</li><li>wrapperClassName（可选）：嵌套模式下Spin组件包裹元素的额外CSS类名。</li><li>indicator（可选）：自定义的加载指示器，可以是一个React节点。</li><li>children（可选）：Spin组件的子元素。</li></ul><h2 id="Spin-函数"><a href="#Spin-函数" class="headerlink" title="Spin 函数"></a>Spin 函数</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Spin</span>: <span class="title class_">React</span>.<span class="property">FC</span>&lt;<span class="title class_">SpinClassProps</span>&gt; = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    通过解构赋值将props对象中的各个属性提取出来</span></span><br><span class="line"><span class="comment">  **/</span></span><br><span class="line">  <span class="keyword">const</span> &#123;</span><br><span class="line">    <span class="attr">spinPrefixCls</span>: prefixCls,</span><br><span class="line">    <span class="attr">spinning</span>: customSpinning = <span class="literal">true</span>,</span><br><span class="line">    delay = <span class="number">0</span>,</span><br><span class="line">    className,</span><br><span class="line">    rootClassName,</span><br><span class="line">    size = <span class="string">&#x27;default&#x27;</span>,</span><br><span class="line">    tip,</span><br><span class="line">    wrapperClassName,</span><br><span class="line">    style,</span><br><span class="line">    children,</span><br><span class="line">    hashId,</span><br><span class="line">    ...restProps</span><br><span class="line">  &#125; = props;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    使用React.useState钩子来定义一个状态变量spinning和一个更新该状态的函数setSpinning。</span></span><br><span class="line"><span class="comment">    初始值通过函数表达式设置，根据 customSpinning 和 delay 的值来判断是否应该处于加载状态。</span></span><br><span class="line"><span class="comment">  **/</span></span><br><span class="line">  <span class="keyword">const</span> [spinning, setSpinning] = <span class="title class_">React</span>.<span class="property">useState</span>&lt;<span class="built_in">boolean</span>&gt;(</span><br><span class="line">    <span class="function">() =&gt;</span> customSpinning &amp;&amp; !<span class="title function_">shouldDelay</span>(customSpinning, delay),</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    使用React.useEffect钩子来处理副作用。</span></span><br><span class="line"><span class="comment">    在组件挂载或delay和customSpinning发生变化时，会执行回调函数。</span></span><br><span class="line"><span class="comment">    如果customSpinning为true，则会创建一个带有延迟的函数showSpinning，该函数在延迟时间后将spinning状态设置为true。</span></span><br><span class="line"><span class="comment">    然后调用showSpinning函数并返回一个清除函数，用于在组件卸载时取消延迟函数的执行。</span></span><br><span class="line"><span class="comment">    如果customSpinning为false，则直接将spinning状态设置为false。</span></span><br><span class="line"><span class="comment">  **/</span></span><br><span class="line">  <span class="title class_">React</span>.<span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (customSpinning) &#123;</span><br><span class="line">      <span class="keyword">const</span> showSpinning = <span class="title function_">debounce</span>(delay, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">setSpinning</span>(<span class="literal">true</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="title function_">showSpinning</span>();</span><br><span class="line">      <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        showSpinning?.<span class="property">cancel</span>?.();</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">setSpinning</span>(<span class="literal">false</span>);</span><br><span class="line">  &#125;, [delay, customSpinning]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    使用React.useMemo钩子来计算isNestedPattern变量的值。它根据spin是否包含子元素判断是否为嵌套模式。</span></span><br><span class="line"><span class="comment">  **/</span></span><br><span class="line">  <span class="keyword">const</span> isNestedPattern = <span class="title class_">React</span>.<span class="property">useMemo</span>&lt;<span class="built_in">boolean</span>&gt;(<span class="function">() =&gt;</span> <span class="keyword">typeof</span> children !== <span class="string">&#x27;undefined&#x27;</span>, [children]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    使用devUseWarning函数创建一个警告方法，并检查tip属性是否存在以及是否处于嵌套模式。</span></span><br><span class="line"><span class="comment">    如果不满足条件，则会触发警告。</span></span><br><span class="line"><span class="comment">  **/</span></span><br><span class="line">  <span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&#x27;production&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> warning = <span class="title function_">devUseWarning</span>(<span class="string">&#x27;Spin&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">warning</span>(!tip || isNestedPattern, <span class="string">&#x27;usage&#x27;</span>, <span class="string">&#x27;`tip` only work in nest pattern.&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 使用React.useContext钩子获取全局配置和样式。</span></span><br><span class="line">  <span class="keyword">const</span> &#123; direction, spin &#125; = <span class="title class_">React</span>.<span class="property">useContext</span>&lt;<span class="title class_">ConfigConsumerProps</span>&gt;(<span class="title class_">ConfigContext</span>);</span><br><span class="line">  <span class="comment">// 使用classNames函数生成Spin组件根元素的className。根据size、spinning、tip和direction等属性的值来动态生成不同的className。</span></span><br><span class="line">  <span class="keyword">const</span> spinClassName = <span class="title function_">classNames</span>(</span><br><span class="line">    prefixCls,</span><br><span class="line">    spin?.<span class="property">className</span>,</span><br><span class="line">    &#123;</span><br><span class="line">      [<span class="string">`<span class="subst">$&#123;prefixCls&#125;</span>-sm`</span>]: size === <span class="string">&#x27;small&#x27;</span>,</span><br><span class="line">      [<span class="string">`<span class="subst">$&#123;prefixCls&#125;</span>-lg`</span>]: size === <span class="string">&#x27;large&#x27;</span>,</span><br><span class="line">      [<span class="string">`<span class="subst">$&#123;prefixCls&#125;</span>-spinning`</span>]: spinning,</span><br><span class="line">      [<span class="string">`<span class="subst">$&#123;prefixCls&#125;</span>-show-text`</span>]: !!tip,</span><br><span class="line">      [<span class="string">`<span class="subst">$&#123;prefixCls&#125;</span>-rtl`</span>]: direction === <span class="string">&#x27;rtl&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    className,</span><br><span class="line">    rootClassName,</span><br><span class="line">    hashId,</span><br><span class="line">  );</span><br><span class="line">  <span class="comment">// 使用classNames函数生成包裹Spin组件内容的容器元素的className。如果spinning为true，则添加$&#123;prefixCls&#125;-blur类名。</span></span><br><span class="line">  <span class="keyword">const</span> containerClassName = <span class="title function_">classNames</span>(<span class="string">`<span class="subst">$&#123;prefixCls&#125;</span>-container`</span>, &#123;</span><br><span class="line">    [<span class="string">`<span class="subst">$&#123;prefixCls&#125;</span>-blur`</span>]: spinning,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// fix https://fb.me/react-unknown-prop</span></span><br><span class="line">  <span class="keyword">const</span> divProps = <span class="title function_">omit</span>(restProps, [<span class="string">&#x27;indicator&#x27;</span>, <span class="string">&#x27;prefixCls&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="attr">mergedStyle</span>: <span class="title class_">React</span>.<span class="property">CSSProperties</span> = &#123; ...spin?.<span class="property">style</span>, ...style &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="attr">spinElement</span>: <span class="title class_">React</span>.<span class="property">ReactNode</span> = (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &#123;<span class="attr">...divProps</span>&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">style</span>=<span class="string">&#123;mergedStyle&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">className</span>=<span class="string">&#123;spinClassName&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">aria-live</span>=<span class="string">&quot;polite&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">aria-busy</span>=<span class="string">&#123;spinning&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;renderIndicator(prefixCls, props)&#125;</span></span><br><span class="line"><span class="language-xml">      &#123;tip &amp;&amp; isNestedPattern ? <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;</span>`$&#123;<span class="attr">prefixCls</span>&#125;<span class="attr">-text</span>`&#125;&gt;</span>&#123;tip&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span> : null&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">  <span class="comment">// 如果是嵌套模式，则需要将子元素加上，然后将 spin 元素嵌套在子元素上</span></span><br><span class="line">  <span class="keyword">if</span> (isNestedPattern) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#123;<span class="attr">...divProps</span>&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">className</span>=<span class="string">&#123;classNames(</span>`$&#123;<span class="attr">prefixCls</span>&#125;<span class="attr">-nested-loading</span>`, <span class="attr">wrapperClassName</span>, <span class="attr">hashId</span>)&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;spinning &amp;&amp; <span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&quot;loading&quot;</span>&gt;</span>&#123;spinElement&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;containerClassName&#125;</span> <span class="attr">key</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;children&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 反之直接返回 spin 组件</span></span><br><span class="line">  <span class="keyword">return</span> spinElement;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="SpinFC函数"><a href="#SpinFC函数" class="headerlink" title="SpinFC函数"></a>SpinFC函数</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">SpinFC</span>: <span class="title class_">SpinFCType</span> = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    定义了一个名为SpinFC的函数，它接受一个SpinProps类型的props参数。</span></span><br><span class="line"><span class="comment">    通过解构赋值，从props中提取prefixCls属性，并使用React.useContext获取全局配置中的getPrefixCls函数。</span></span><br><span class="line"><span class="comment">  **/</span></span><br><span class="line">  <span class="keyword">const</span> &#123; <span class="attr">prefixCls</span>: customizePrefixCls &#125; = props;</span><br><span class="line">  <span class="keyword">const</span> &#123; getPrefixCls &#125; = <span class="title class_">React</span>.<span class="title function_">useContext</span>(<span class="title class_">ConfigContext</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 使用getPrefixCls函数生成spinPrefixCls，它是用于生成Spin组件CSS类名的前缀。</span></span><br><span class="line">  <span class="keyword">const</span> spinPrefixCls = <span class="title function_">getPrefixCls</span>(<span class="string">&#x27;spin&#x27;</span>, customizePrefixCls);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用useStyle自定义钩子函数，传入spinPrefixCls作为参数。它返回一个包含两个元素的数组，分别是wrapSSR和hashId。</span></span><br><span class="line">  <span class="keyword">const</span> [wrapSSR, hashId] = <span class="title function_">useStyle</span>(spinPrefixCls);</span><br><span class="line">  <span class="comment">// wrapSSR 可以理解为一个给传入的组件生成指定样式的函数</span></span><br><span class="line">  <span class="keyword">const</span> <span class="attr">spinClassProps</span>: <span class="title class_">SpinClassProps</span> = &#123;</span><br><span class="line">    ...props,</span><br><span class="line">    spinPrefixCls,</span><br><span class="line">    hashId,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 返回值为当前组件+样式后的最终组件</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">wrapSSR</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Spin</span> &#123;<span class="attr">...spinClassProps</span>&#125; /&gt;</span></span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Spin组件介绍&quot;&gt;&lt;a href=&quot;#Spin组件介绍&quot; class=&quot;headerlink&quot; title=&quot;Spin组件介绍&quot;&gt;&lt;/a&gt;Spin组件介绍&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;可以理解为loading组件，在页面局部处于等待异步数据或正在渲染过程时，合适的</summary>
      
    
    
    
    <category term="Antd组件解析" scheme="http://example.com/categories/Antd%E7%BB%84%E4%BB%B6%E8%A7%A3%E6%9E%90/"/>
    
    
    <category term="组件库" scheme="http://example.com/tags/%E7%BB%84%E4%BB%B6%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>数据类型（十一）手写Promise</title>
    <link href="http://example.com/2023/10/20/base-skill-for-fontend-interview-11/"/>
    <id>http://example.com/2023/10/20/base-skill-for-fontend-interview-11/</id>
    <published>2023-10-20T13:57:13.000Z</published>
    <updated>2023-11-06T03:29:16.841Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">PENDING</span> = <span class="string">&quot;pending&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">FULFILLED</span> = <span class="string">&quot;fulfilled&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">REJECTED</span> = <span class="string">&quot;rejected&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">resolvePromise</span> = (<span class="params">promise2, x, resolve, rejected</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 循环引用报错</span></span><br><span class="line">  <span class="keyword">if</span> (x === promise2) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">rejected</span>(<span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&quot;Chaining cycle detected for promise&quot;</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 防止多次调用</span></span><br><span class="line">  <span class="keyword">let</span> called = <span class="literal">false</span>;</span><br><span class="line">  <span class="comment">// x不是null 且x是对象或者函数</span></span><br><span class="line">  <span class="keyword">if</span> ((<span class="keyword">typeof</span> x === <span class="string">&quot;object&quot;</span> &amp;&amp; x !== <span class="string">&quot;null&quot;</span>) || <span class="keyword">typeof</span> x === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> then = x.<span class="property">then</span>;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> then === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">        then.<span class="title function_">call</span>(</span><br><span class="line">          x,</span><br><span class="line">          <span class="function">(<span class="params">y</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (called) <span class="keyword">return</span>;</span><br><span class="line">            called = <span class="literal">true</span>;</span><br><span class="line">            <span class="title function_">resolvePromise</span>(promise2, y, resolve, rejected);</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="function">(<span class="params">r</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (called) <span class="keyword">return</span>;</span><br><span class="line">            called = <span class="literal">true</span>;</span><br><span class="line">            <span class="title function_">rejected</span>(r);</span><br><span class="line">          &#125;</span><br><span class="line">        );</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(x);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="keyword">if</span> (called) <span class="keyword">return</span>;</span><br><span class="line">      called = <span class="literal">true</span>;</span><br><span class="line">      <span class="title function_">rejected</span>(error);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(x);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyPromise</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">executor</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = <span class="variable constant_">PENDING</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">value</span> = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">reason</span> = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">onFulfilledCallbacks</span> = [];</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">onRejectedCallbacks</span> = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="title function_">resolve</span> = (<span class="params">value</span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (value <span class="keyword">instanceof</span> <span class="title class_">MyPromise</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> value.<span class="title function_">then</span>(resolve, reject);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="variable constant_">PENDING</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span> = <span class="variable constant_">FULFILLED</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">value</span> = value;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">onFulfilledCallbacks</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">fn</span>) =&gt;</span> <span class="title function_">fn</span>());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">let</span> <span class="title function_">rejected</span> = (<span class="params">reason</span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="variable constant_">PENDING</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span> = <span class="variable constant_">REJECTED</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">reason</span> = reason;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">onRejectedCallbacks</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">fn</span>) =&gt;</span> <span class="title function_">fn</span>());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="title function_">executor</span>(resolve, rejected);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="title function_">rejected</span>(error);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">resolve</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, rejected</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(value);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">rejected</span>(<span class="params">reason</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, rejected</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">rejected</span>(reason);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">all</span>(<span class="params">promises</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(promises)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(</span><br><span class="line">        <span class="string">`TypeError: <span class="subst">$&#123;<span class="keyword">typeof</span> promises&#125;</span> <span class="subst">$&#123;promises&#125;</span> is not iterable`</span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, rejected</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> result = [];</span><br><span class="line">      <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">const</span> <span class="title function_">processValue</span> = (<span class="params">value, index</span>) =&gt; &#123;</span><br><span class="line">        result[index] = value;</span><br><span class="line">        <span class="keyword">if</span> (++index === promises.<span class="property">length</span>) &#123;</span><br><span class="line">          <span class="title function_">resolve</span>(result);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; promises.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> current = result[i];</span><br><span class="line">        <span class="keyword">if</span> (current &amp;&amp; <span class="keyword">typeof</span> current === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">          value.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">processValue</span>(res, i);</span><br><span class="line">          &#125;, rejected);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="title function_">processValue</span>(current, i);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">race</span>(<span class="params">promises</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, rejected</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; promises.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> current = promises[i];</span><br><span class="line">        <span class="keyword">if</span> (current &amp;&amp; <span class="keyword">typeof</span> current === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">          current.<span class="title function_">then</span>(resolve, rejected);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="title function_">resolve</span>(current);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">then</span>(<span class="params">onFulfilled, onRejected</span>) &#123;</span><br><span class="line">    onFulfilled =</span><br><span class="line">      <span class="keyword">typeof</span> onFulfilled === <span class="string">&quot;function&quot;</span> ? onFulfilled : <span class="function">(<span class="params">val</span>) =&gt;</span> val;</span><br><span class="line">    onRejected = <span class="keyword">typeof</span> onRejected === <span class="string">&quot;function&quot;</span> ? onRejected : <span class="function">(<span class="params">err</span>) =&gt;</span> err;</span><br><span class="line">    <span class="keyword">const</span> promise2 = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, rejected</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="variable constant_">FULFILLED</span>) &#123;</span><br><span class="line">        <span class="comment">// 需要模拟微任务队列</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> x = <span class="title function_">onFulfilled</span>(<span class="variable language_">this</span>.<span class="property">value</span>);</span><br><span class="line">            <span class="title function_">resolvePromise</span>(promise2, x, resolve, rejected);</span><br><span class="line">          &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="title function_">rejected</span>(error);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, <span class="number">0</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ((<span class="variable language_">this</span>.<span class="property">state</span> = <span class="variable constant_">REJECTED</span>)) &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> x = <span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">reason</span>);</span><br><span class="line">            <span class="title function_">resolvePromise</span>(promise2, x, resolve, rejected);</span><br><span class="line">          &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="title function_">rejected</span>(error);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, <span class="number">0</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="variable constant_">PENDING</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">onFulfilledCallbacks</span>.<span class="title function_">push</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">              <span class="keyword">const</span> x = <span class="title function_">onFulfilled</span>(<span class="variable language_">this</span>.<span class="property">value</span>);</span><br><span class="line">              <span class="title function_">resolvePromise</span>(promise2, x, resolve, rejected);</span><br><span class="line">            &#125;, <span class="number">0</span>);</span><br><span class="line">          &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="title function_">rejected</span>(error);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">onRejectedCallbacks</span>.<span class="title function_">push</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">              <span class="keyword">const</span> x = <span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">reason</span>);</span><br><span class="line">              <span class="title function_">resolvePromise</span>(promise2, x, resolve, rejected);</span><br><span class="line">            &#125;, <span class="number">0</span>);</span><br><span class="line">          &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="title function_">rejected</span>(error);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> promise2;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">catch</span>(callback) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">then</span>(<span class="literal">null</span>, callback);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">finally</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">then</span>(</span><br><span class="line">      <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">MyPromise</span>.<span class="title function_">resolve</span>(<span class="title function_">callback</span>()).<span class="title function_">then</span>(<span class="function">() =&gt;</span> value);</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">MyPromise</span>.<span class="title function_">rejected</span>(</span><br><span class="line">          <span class="title function_">callback</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> error;</span><br><span class="line">          &#125;)</span><br><span class="line">        );</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l</summary>
      
    
    
    
    <category term="前端面试" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/"/>
    
    <category term="前端面试题" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
    <category term="前端面试基本功" scheme="http://example.com/tags/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E5%9F%BA%E6%9C%AC%E5%8A%9F/"/>
    
  </entry>
  
  <entry>
    <title>数据类型（十）闭包</title>
    <link href="http://example.com/2023/10/20/base-skill-for-fontend-interview-10/"/>
    <id>http://example.com/2023/10/20/base-skill-for-fontend-interview-10/</id>
    <published>2023-10-20T13:45:25.000Z</published>
    <updated>2023-11-06T03:29:16.841Z</updated>
    
    <content type="html"><![CDATA[<h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1><ul><li>即使外部函数已经不存在，也可以获取作用域链上变量的函数。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">outer</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> a = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> f = <span class="title function_">outer</span>()</span><br><span class="line"><span class="title function_">f</span>()</span><br></pre></td></tr></table></figure><h1 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏"></a>内存泄漏</h1><ul><li>常见于监听DOM元素时，做了一些额外的操作，然后在某些API作用下导致DOM元素不存在后，变量未被清除。</li></ul><h1 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h1><ul><li>一定要在外部函数中 return 内部函数，才会形成闭包吗？<ul><li>不需要，只要满足能够访问外部变量的函数就是闭包。</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;闭包&quot;&gt;&lt;a href=&quot;#闭包&quot; class=&quot;headerlink&quot; title=&quot;闭包&quot;&gt;&lt;/a&gt;闭包&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;即使外部函数已经不存在，也可以获取作用域链上变量的函数。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight</summary>
      
    
    
    
    <category term="前端面试" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/"/>
    
    <category term="前端面试题" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
    <category term="前端面试基本功" scheme="http://example.com/tags/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E5%9F%BA%E6%9C%AC%E5%8A%9F/"/>
    
  </entry>
  
  <entry>
    <title>数据类型（九）垃圾回收机制</title>
    <link href="http://example.com/2023/10/20/base-skill-for-fontend-interview-9/"/>
    <id>http://example.com/2023/10/20/base-skill-for-fontend-interview-9/</id>
    <published>2023-10-20T13:03:46.000Z</published>
    <updated>2023-11-06T03:29:16.841Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引用计数法"><a href="#引用计数法" class="headerlink" title="引用计数法"></a>引用计数法</h1><ul><li>跟踪记录对象的引用次数，当次数为0时就需要被销毁。<ul><li>缺点：当对象中存在循环引用时，该对象无法被回收，造成内存泄漏</li></ul></li></ul><h1 id="标记-清除法"><a href="#标记-清除法" class="headerlink" title="标记-清除法"></a>标记-清除法</h1><ul><li>解决循环引用的问题，但是会出现内存碎片。<ul><li>解决策略：first-fit、best-fit、worst-fit</li></ul></li><li>标记阶段<ul><li>从根出发，遍历所有可达的对象并将其标记上活动对象。</li></ul></li><li>清除阶段<ul><li>清除所有未被标记的对象</li></ul></li></ul><h1 id="Weakmap-和-Map"><a href="#Weakmap-和-Map" class="headerlink" title="Weakmap 和 Map"></a>Weakmap 和 Map</h1><ul><li>Weakmap，键值对集合，键是弱引用，只能是对象，值没有限制。Map没有限制。</li><li>Weakmap，键是弱引用，不会阻止与之关联的对象被垃圾回收。Map键是强引用，会阻止。</li><li>Weakmap的 key 无法使用<code>forEach()</code>和<code>keys()</code>遍历。</li></ul><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul><li>引用 DOM 元素，</li><li>对象的缓存</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;引用计数法&quot;&gt;&lt;a href=&quot;#引用计数法&quot; class=&quot;headerlink&quot; title=&quot;引用计数法&quot;&gt;&lt;/a&gt;引用计数法&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;跟踪记录对象的引用次数，当次数为0时就需要被销毁。&lt;ul&gt;
&lt;li&gt;缺点：当对象中存在循环引用时，该对象</summary>
      
    
    
    
    <category term="前端面试" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/"/>
    
    <category term="前端面试题" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
    <category term="前端面试基本功" scheme="http://example.com/tags/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E5%9F%BA%E6%9C%AC%E5%8A%9F/"/>
    
  </entry>
  
  <entry>
    <title>数据类型（八）This指向</title>
    <link href="http://example.com/2023/10/20/base-skill-for-fontend-interview-8/"/>
    <id>http://example.com/2023/10/20/base-skill-for-fontend-interview-8/</id>
    <published>2023-10-20T08:22:51.000Z</published>
    <updated>2023-11-06T03:29:16.841Z</updated>
    
    <content type="html"><![CDATA[<h1 id="this的绑定时机"><a href="#this的绑定时机" class="headerlink" title="this的绑定时机"></a>this的绑定时机</h1><ul><li>this和函数定义的位置没有关系，只和调用者有关</li><li>this是在运行时被绑定的</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> foo&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>() <span class="comment">// window</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">foo</span>: foo</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">foo</span>() <span class="comment">// obj</span></span><br><span class="line"></span><br><span class="line">foo.<span class="title function_">call</span>(<span class="string">&#x27;hello&#x27;</span>)<span class="comment">// string(&#x27;hello&#x27;)</span></span><br></pre></td></tr></table></figure><h1 id="this的绑定规则"><a href="#this的绑定规则" class="headerlink" title="this的绑定规则"></a>this的绑定规则</h1><ul><li>隐式绑定<ul><li>通过对象调用函数绑定this</li></ul></li><li>显示绑定：<ul><li>call、bind</li></ul></li><li>使用new关键字<ul><li>如果返回的是对象，则直接返回该对象，</li><li>如果返回的是基本类型，则return语句无效，仍然返回我们创建的新对象</li></ul></li></ul><h1 id="多重绑定优先级"><a href="#多重绑定优先级" class="headerlink" title="多重绑定优先级"></a>多重绑定优先级</h1><ul><li>new绑定 &gt; 显示绑定(bind) &gt; 隐式绑定</li></ul><h1 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 输出结果：obj1</span></span><br><span class="line"><span class="comment">// 谁直接调用this就指向谁</span></span><br><span class="line"><span class="keyword">function</span> foo&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;obj1&#x27;</span>,</span><br><span class="line">  <span class="attr">foo</span>: foo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;obj2&#x27;</span>,</span><br><span class="line">  <span class="attr">obj1</span>: obj1</span><br><span class="line">&#125;</span><br><span class="line">obj2.<span class="property">obj1</span>.<span class="title function_">foo</span>()</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">通过new关键字创建一个新对象的步骤是什么/构造函数是如何创建新对象的？</span><br><span class="line">1、创建一个空对象</span><br><span class="line">2、空对象的 __proto__ 指向构造函数的prototype属性</span><br><span class="line">3、执行构造函数，如果构造函数中有this，则将this指向创建的空对象</span><br><span class="line">4、返回刚刚创建的空对象</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line"><span class="keyword">function</span> foo&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;obj1&#x27;</span>,</span><br><span class="line">  <span class="attr">foo</span>: foo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;obj2&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line">(obj2.<span class="property">foo</span> = obj1.<span class="property">foo</span>)()<span class="comment">// 等价于foo()</span></span><br><span class="line"><span class="comment">// window</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;全局window&#x27;</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;person&quot;</span>,</span><br><span class="line">  <span class="attr">sayName</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayName</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> fun = person.<span class="property">sayName</span>;</span><br><span class="line">  <span class="title function_">fun</span>();</span><br><span class="line">  person.<span class="title function_">sayName</span>();</span><br><span class="line">  (b = person.<span class="property">sayName</span>)()</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sayName</span>()</span><br><span class="line"><span class="comment">// 全局window、person、全局window</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;this的绑定时机&quot;&gt;&lt;a href=&quot;#this的绑定时机&quot; class=&quot;headerlink&quot; title=&quot;this的绑定时机&quot;&gt;&lt;/a&gt;this的绑定时机&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;this和函数定义的位置没有关系，只和调用者有关&lt;/li&gt;
&lt;li&gt;th</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>数据类型（七）面向对象</title>
    <link href="http://example.com/2023/10/19/base-skill-for-fontend-interview-7/"/>
    <id>http://example.com/2023/10/19/base-skill-for-fontend-interview-7/</id>
    <published>2023-10-19T14:45:18.000Z</published>
    <updated>2023-11-06T03:29:16.841Z</updated>
    
    <content type="html"><![CDATA[<ul><li>构造函数：任何函数都可以当做构造函数，只要使用 new 关键字调用函数创建实例对象（箭头函数除外）</li><li>继承：<ul><li>原型链继承: 缺点如果某个原型上的引用类型被其中一个实例改变了，那么其他实例也会受到影响。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;this is parent!&#x27;</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">getName</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;this is child!&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Parent</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Child</span>().<span class="title function_">getName</span>())</span><br></pre></td></tr></table></figure></li><li>构造函数继承：通过使用 call 或 apply 方法，实现在子类中执行父类型的构造函数<ul><li>优点：原型属性不会被共享</li><li>缺陷：不会继承父类 prototype 上属性<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">sayHello</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello!&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title class_">Parent</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li>组合继承：原型链+构造函数继承<ul><li>调用了两次 Parent</li></ul></li><li>寄生组合继承<ul><li>Child.prototype 上的原始属性会被丢掉<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Parent</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;this is parent&#x27;</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">getName</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Child</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title class_">Parent</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>)</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = <span class="string">&#x27;18&#x27;</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">getAge</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">age</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line"><span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Child</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;构造函数：任何函数都可以当做构造函数，只要使用 new 关键字调用函数创建实例对象（箭头函数除外）&lt;/li&gt;
&lt;li&gt;继承：&lt;ul&gt;
&lt;li&gt;原型链继承: 缺点如果某个原型上的引用类型被其中一个实例改变了，那么其他实例也会受到影响。&lt;figure class=&quot;</summary>
      
    
    
    
    <category term="前端面试" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/"/>
    
    <category term="前端面试题" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
    <category term="前端面试基本功" scheme="http://example.com/tags/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E5%9F%BA%E6%9C%AC%E5%8A%9F/"/>
    
  </entry>
  
  <entry>
    <title>数据类型（六）深拷贝和浅拷贝</title>
    <link href="http://example.com/2023/10/19/base-skill-for-fontend-interview-6/"/>
    <id>http://example.com/2023/10/19/base-skill-for-fontend-interview-6/</id>
    <published>2023-10-19T14:08:28.000Z</published>
    <updated>2023-11-06T03:29:16.841Z</updated>
    
    <content type="html"><![CDATA[<h1 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h1><ul><li>主要针对对象的属性对应的值也是复杂类型的情况，此时浅拷贝的对象在对属性值为复杂类型的属性进行修改时，也会影响到原始对象，即被拷贝的对象。</li></ul><h2 id="对象的浅拷贝"><a href="#对象的浅拷贝" class="headerlink" title="对象的浅拷贝"></a>对象的浅拷贝</h2><ul><li>Object.assign()</li><li>展开运算符</li><li>for…in… + Object.hasOwnProperty()</li><li>Object.keys()</li></ul><h2 id="数组的浅拷贝"><a href="#数组的浅拷贝" class="headerlink" title="数组的浅拷贝"></a>数组的浅拷贝</h2><ul><li>Array.slice(start, end) — 左闭右开</li><li>Array.concat() —使用空数组拼接</li></ul><h1 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h1><ul><li>JSON.parse(JSON.stringify())<ul><li>无法拷贝函数、特殊对象：Date、Regex</li><li>不会拷贝原型链上的属性</li><li>会忽略Symbol和undefined属性值对应的属性</li></ul></li></ul><h2 id="手写深拷贝函数"><a href="#手写深拷贝函数" class="headerlink" title="手写深拷贝函数"></a>手写深拷贝函数</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">deepClone</span>(<span class="params">source: <span class="built_in">Object</span>, cloneMap = <span class="keyword">new</span> <span class="built_in">Map</span>()</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!(source <span class="keyword">instanceof</span> <span class="title class_">Object</span>) || source === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> source;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (cloneMap.<span class="title function_">has</span>(source)) &#123;</span><br><span class="line">    <span class="keyword">return</span> cloneMap.<span class="title function_">get</span>(source);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> target = <span class="title class_">Array</span>.<span class="title function_">isArray</span>(source)</span><br><span class="line">    ? []</span><br><span class="line">    : source <span class="keyword">instanceof</span> <span class="title class_">Date</span></span><br><span class="line">    ? <span class="keyword">new</span> <span class="title class_">Date</span>(source)</span><br><span class="line">    : source <span class="keyword">instanceof</span> <span class="title class_">RegExp</span></span><br><span class="line">    ? <span class="keyword">new</span> <span class="title class_">RegExp</span>(source.<span class="property">source</span>, source.<span class="property">flags</span>)</span><br><span class="line">    : &#123;&#125;;</span><br><span class="line">  cloneMap.<span class="title function_">set</span>(source, target);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> source) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> source[key] === <span class="string">&quot;object&quot;</span> &amp;&amp; source[key] !== <span class="literal">null</span>) &#123;</span><br><span class="line">      target[key] = <span class="title function_">deepClone</span>(source[key], cloneMap);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      target[key] = source[key];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> symbols = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertySymbols</span>(source);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">const</span> symKey <span class="keyword">of</span> symbols) &#123;</span><br><span class="line">    target[symKey] = <span class="title function_">deepClone</span>(source[symKey], cloneMap);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;浅拷贝&quot;&gt;&lt;a href=&quot;#浅拷贝&quot; class=&quot;headerlink&quot; title=&quot;浅拷贝&quot;&gt;&lt;/a&gt;浅拷贝&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;主要针对对象的属性对应的值也是复杂类型的情况，此时浅拷贝的对象在对属性值为复杂类型的属性进行修改时，也会影响到原始对象，</summary>
      
    
    
    
    <category term="前端面试" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/"/>
    
    <category term="前端面试题" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
    <category term="前端面试基本功" scheme="http://example.com/tags/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E5%9F%BA%E6%9C%AC%E5%8A%9F/"/>
    
  </entry>
  
  <entry>
    <title>数据类型（四）null、undefined、NaN</title>
    <link href="http://example.com/2023/10/19/base-skill-for-fontend-interview-5/"/>
    <id>http://example.com/2023/10/19/base-skill-for-fontend-interview-5/</id>
    <published>2023-10-19T09:19:02.000Z</published>
    <updated>2023-11-06T03:29:16.841Z</updated>
    
    <content type="html"><![CDATA[<h1 id="null-和-undefined-的区别"><a href="#null-和-undefined-的区别" class="headerlink" title="null 和 undefined 的区别"></a>null 和 undefined 的区别</h1><ul><li>null 表示“无”的对象，转数字为 0 <ul><li>作为函数参数，表示该函数的参数不是对象</li><li>作为对象原型链的终点</li></ul></li><li>undefined 表示“无”的原始值，转数字为 NaN<ul><li>表示缺少值，应该有值但是没定义</li><li>变量被声明但未赋值</li><li>函数没有返回值</li><li>对象没有复制的属性</li></ul></li></ul><h1 id="typeof-null结果时Object"><a href="#typeof-null结果时Object" class="headerlink" title="typeof null结果时Object"></a>typeof null结果时Object</h1><ul><li>null是一种基本类型，在JavaScript设计之初是在32为系统，判断数据类型的时候是通过机器码进行的，每一种类型都有对应的机器码。</li><li>对象机器码为000，null机器码全为0，typeof在比较类型的时候只会比较后三位，两者相同，所以js认为两者相同。</li></ul><h1 id="如何安全获取-undefined-值"><a href="#如何安全获取-undefined-值" class="headerlink" title="如何安全获取 undefined 值"></a>如何安全获取 undefined 值</h1><ul><li>void 0。</li></ul><h1 id="isNaN-和-Number-isNaN"><a href="#isNaN-和-Number-isNaN" class="headerlink" title="isNaN 和 Number.isNaN"></a>isNaN 和 Number.isNaN</h1><ul><li>isNaN<ul><li>会尝试讲参数进行类型转换，如果不能被转化为Number类型则会返回true。非数字值传入也会返回true</li></ul></li><li>Number.isNaN<ul><li>不会进行数据类型转换</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;null-和-undefined-的区别&quot;&gt;&lt;a href=&quot;#null-和-undefined-的区别&quot; class=&quot;headerlink&quot; title=&quot;null 和 undefined 的区别&quot;&gt;&lt;/a&gt;null 和 undefined 的区别&lt;/h1&gt;&lt;</summary>
      
    
    
    
    <category term="前端面试" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/"/>
    
    <category term="前端面试题" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
    <category term="前端面试基本功" scheme="http://example.com/tags/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E5%9F%BA%E6%9C%AC%E5%8A%9F/"/>
    
  </entry>
  
  <entry>
    <title>数据类型（四）类型转换与隐式类型转换</title>
    <link href="http://example.com/2023/10/19/base-skill-for-fontend-interview-4/"/>
    <id>http://example.com/2023/10/19/base-skill-for-fontend-interview-4/</id>
    <published>2023-10-19T09:18:59.000Z</published>
    <updated>2023-11-06T03:29:16.841Z</updated>
    
    <content type="html"><![CDATA[<h1 id="显示类型转换面试题"><a href="#显示类型转换面试题" class="headerlink" title="显示类型转换面试题"></a>显示类型转换面试题</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>].<span class="title function_">map</span>(<span class="built_in">parseInt</span>))<span class="comment">// [1, NaN, NaN]</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&quot;1&quot;=&gt; parseInt(&quot;1&quot;, 0)</span></span><br><span class="line"><span class="comment">&quot;2&quot;=&gt; parseInt(&quot;2&quot;, 1)</span></span><br><span class="line"><span class="comment">&quot;3&quot;=&gt; parseInt(&quot;3&quot;, 2)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li>map((item, index, arr))：当前值，下标，整个数组</li><li>parseInt(string, radix)：当前字符串，进制</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseInt</span>(<span class="number">1</span>/<span class="number">0</span>, <span class="number">19</span>))<span class="comment">// 18</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1/0 = Infinity</span></span><br><span class="line"><span class="comment">等价于parseInt(&quot;Infinity&quot;, 19)</span></span><br><span class="line"><span class="comment">19进制有I，但是没有n，则直接返回i，即18</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseInt</span>(<span class="built_in">parseInt</span>, <span class="number">16</span>))<span class="comment">// 15</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">String(parseInt)=&gt; &quot;function parseInt() &#123; [native code] &#125;&quot;</span></span><br><span class="line"><span class="comment">等价于parseInt(&quot;function parseInt() &#123; [native code] &#125;&quot;, 16)</span></span><br><span class="line"><span class="comment">16进制有f，但是没有u，则直接返回f，即15</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseInt</span>(&#123;&#125;, <span class="number">16</span>))<span class="comment">// NaN</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">String(&#123;&#125;)=&gt; &quot;[object Object]&quot;</span></span><br><span class="line"><span class="comment">等价于parseInt(&quot;[object Object]&quot;, 16)</span></span><br><span class="line"><span class="comment">16进制没有[，直接返回NaN</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h1 id="常见的隐式类型转换"><a href="#常见的隐式类型转换" class="headerlink" title="常见的隐式类型转换"></a>常见的隐式类型转换</h1><ul><li>比较操作符：两侧值的类型不同时执行<ul><li><strong>当操作数是对象，另一个操作数是字符串或数字时会首先调用valueOf方法，当valueOf方法返回的不是基本类型时，才会去调用toString方法</strong></li></ul></li><li>四则运算，除加法外，其他运算均会被转换为数字进行运算，遇到NaN，结果均为NaN。<ul><li>number + number = number</li><li>number + string = string</li><li>string + number = string</li><li>object + number = number</li><li>object + string = string</li><li>boolean + string = string(含true/false)</li><li>boolean + number = number</li></ul></li><li>条件语句</li></ul><h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attr">valueOf</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">value</span>++</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="attr">toString</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">value</span>++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(a == <span class="number">1</span> &amp;&amp; a == <span class="number">2</span> &amp;&amp; a == <span class="number">3</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;显示类型转换面试题&quot;&gt;&lt;a href=&quot;#显示类型转换面试题&quot; class=&quot;headerlink&quot; title=&quot;显示类型转换面试题&quot;&gt;&lt;/a&gt;显示类型转换面试题&lt;/h1&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td c</summary>
      
    
    
    
    <category term="前端面试" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/"/>
    
    <category term="前端面试题" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
    <category term="前端面试基本功" scheme="http://example.com/tags/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E5%9F%BA%E6%9C%AC%E5%8A%9F/"/>
    
  </entry>
  
  <entry>
    <title>数据类型（三）判断数组的方式</title>
    <link href="http://example.com/2023/10/19/base-skill-for-fontend-interview-3/"/>
    <id>http://example.com/2023/10/19/base-skill-for-fontend-interview-3/</id>
    <published>2023-10-19T09:18:20.000Z</published>
    <updated>2023-11-06T03:29:16.841Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Object-prototype-toString-call"><a href="#Object-prototype-toString-call" class="headerlink" title="Object.prototype.toString.call()"></a>Object.prototype.toString.call()</h1><ul><li>Object.prototype.toString.call()，返回值是一个<code>[object [[class]]]</code></li><li>每一个对象都有一个内部属性<code>[[class]]</code>，用于表示其类型，不可直接访问<ul><li>数组：Array</li><li>方法：Function</li><li>数字：Number</li><li>字符串：String</li><li>兑现：Object</li></ul></li></ul><h1 id="通过原型链判断"><a href="#通过原型链判断" class="headerlink" title="通过原型链判断"></a>通过原型链判断</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([].<span class="property">__proto__</span> === <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>)</span><br></pre></td></tr></table></figure><h1 id="Array-isArray"><a href="#Array-isArray" class="headerlink" title="Array.isArray()"></a>Array.isArray()</h1><h1 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([] <span class="keyword">instanceof</span> <span class="title class_">Array</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Object-prototype-toString-call&quot;&gt;&lt;a href=&quot;#Object-prototype-toString-call&quot; class=&quot;headerlink&quot; title=&quot;Object.prototype.toString.call()</summary>
      
    
    
    
    <category term="前端面试" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/"/>
    
    <category term="前端面试题" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
    <category term="前端面试基本功" scheme="http://example.com/tags/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E5%9F%BA%E6%9C%AC%E5%8A%9F/"/>
    
  </entry>
  
  <entry>
    <title>数据类型（二）包装类型</title>
    <link href="http://example.com/2023/10/19/base-skill-for-fontend-interview-2/"/>
    <id>http://example.com/2023/10/19/base-skill-for-fontend-interview-2/</id>
    <published>2023-10-19T09:10:44.000Z</published>
    <updated>2023-11-06T03:29:16.841Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">18</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="title function_">toString</span>())<span class="comment">// &quot;18&quot;</span></span><br><span class="line"><span class="comment">//===等价于===（js引擎做的事）</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">const</span> tmpAObject = <span class="keyword">new</span> <span class="title class_">Number</span>(a);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(tmpAObject.<span class="title function_">toString</span>())<span class="comment">// &quot;18&quot;</span></span><br></pre></td></tr></table></figure><h1 id="包装类型与引用类型的不同"><a href="#包装类型与引用类型的不同" class="headerlink" title="包装类型与引用类型的不同"></a>包装类型与引用类型的不同</h1><ul><li>包装类型只会在执行瞬间被创建，调用后被销毁。</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">age</span>)<span class="comment">// 18</span></span><br><span class="line"><span class="comment">//======</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight ts&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l</summary>
      
    
    
    
    <category term="前端面试" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/"/>
    
    <category term="前端面试题" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
    <category term="前端面试基本功" scheme="http://example.com/tags/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E5%9F%BA%E6%9C%AC%E5%8A%9F/"/>
    
  </entry>
  
  <entry>
    <title>数据类型（一）基本类型与应用类型</title>
    <link href="http://example.com/2023/10/19/base-skill-for-fontend-interview-1/"/>
    <id>http://example.com/2023/10/19/base-skill-for-fontend-interview-1/</id>
    <published>2023-10-19T08:29:28.000Z</published>
    <updated>2023-11-06T03:29:16.841Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">modifyNumber</span>(<span class="params">a: <span class="built_in">number</span></span>): <span class="built_in">void</span>&#123;</span><br><span class="line">  a = <span class="number">18</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">modifyArray</span>(<span class="params">arr: <span class="built_in">number</span>[]</span>): <span class="built_in">void</span>&#123;</span><br><span class="line">  arr.<span class="title function_">push</span>(<span class="number">18</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>, b = [<span class="number">1</span>];</span><br><span class="line"><span class="title function_">modifyNumber</span>(a);</span><br><span class="line"><span class="title function_">modifyArray</span>(b);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);<span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);<span class="comment">// [1, 18]</span></span><br></pre></td></tr></table></figure><h1 id="JavaScript-类型"><a href="#JavaScript-类型" class="headerlink" title="JavaScript 类型"></a>JavaScript 类型</h1><ul><li>原始类型/基本类型：<ul><li><strong>值存储在栈中，进行赋值操作时，会开辟新的空间存储</strong>，互不影响。</li><li>Number、String、Boolean、Null、Undefined、Symbol、Bigint</li></ul></li><li>引用类型<ul><li><strong>值存储在堆中，栈中存储的是对象堆内存的地址</strong>，进行赋值操作时，只要修改其中一个变量引用的对象，其它引用该变量也会受到影响</li><li>Array、Object、Function、Set、Map、Date、RegExp</li></ul></li></ul><h2 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h2><ul><li>基本用法：<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> id1 = <span class="title class_">Symbol</span>(<span class="string">&#x27;id1&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> id2 = <span class="title class_">Symbol</span>(<span class="string">&#x27;id2&#x27;</span>)</span><br><span class="line"><span class="comment">// 用法一Symbol.description</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(id1.<span class="property">description</span>) <span class="comment">// id1</span></span><br><span class="line"><span class="comment">// Symbol.for</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;id1&#x27;</span>) === <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;id1&#x27;</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="comment">// Symbol.keyfor 仅用于Symbol.for创建的Symbol</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Symbol</span>.<span class="title function_">keyfor</span>(<span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;id1&#x27;</span>)))<span class="comment">// id1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Symbol</span>.<span class="title function_">keyfor</span>(<span class="title class_">Symbol</span>(<span class="string">&#x27;id1&#x27;</span>)))<span class="comment">// undefined</span></span><br></pre></td></tr></table></figure></li><li>应用场景：<ul><li>解决 id 重复。</li><li>隐藏对象属性<ul><li>Reflect.ownKeys() -既能遍历</li></ul></li></ul></li></ul><h1 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h1><h2 id="如何判断一个变量是数组还是对象"><a href="#如何判断一个变量是数组还是对象" class="headerlink" title="如何判断一个变量是数组还是对象"></a>如何判断一个变量是数组还是对象</h2><ul><li>Object.prototype.toString.call()<ul><li>函数: [object Array]</li><li>数组: [object Object]</li></ul></li><li>Array.isArray()</li></ul><h2 id="null-是不是对象类型"><a href="#null-是不是对象类型" class="headerlink" title="null 是不是对象类型"></a>null 是不是对象类型</h2><ul><li>不是，JS底层设计使用一种称为“标签”的机制来存储不同类型的值。</li><li>对于对象类型，其标签值二进制表示的低三位都是0</li><li>null值在内存中表示为全0，低三位也是0，所以被错误识别为object</li></ul><h2 id="0-1-0-2等于多少"><a href="#0-1-0-2等于多少" class="headerlink" title="0.1 + 0.2等于多少"></a>0.1 + 0.2等于多少</h2><ul><li>数字在计算机中存储为二进制，且位数有限，在对无限位小数进行截取时，需要保留的最后一位，需要根据下一位的值来判断，下一位为1则需要进1。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight ts&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l</summary>
      
    
    
    
    <category term="前端面试" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/"/>
    
    <category term="前端面试题" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
    <category term="前端面试基本功" scheme="http://example.com/tags/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E5%9F%BA%E6%9C%AC%E5%8A%9F/"/>
    
  </entry>
  
  <entry>
    <title>1921. 消灭怪物的最大数量</title>
    <link href="http://example.com/2023/09/03/lc-1921/"/>
    <id>http://example.com/2023/09/03/lc-1921/</id>
    <published>2023-09-03T12:17:40.000Z</published>
    <updated>2023-11-06T03:29:16.895Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a class="link" href="https://leetcode.cn/problems/eliminate-maximum-number-of-monsters/description/">点击前往<i class="fas fa-external-link-alt"></i></a></p><p>你正在玩一款电子游戏，在游戏中你需要保护城市免受怪物侵袭。给你一个下标从 <code>0</code> 开始且长度为 <code>n</code> 的整数数组 <code>dist</code>，其中 <code>dist[i]</code> 是第 <code>i</code> 个怪物与城市的初始距离（单位：米）。</p><p>怪物以恒定的速度走向城市。给你一个长度为 <code>n</code> 的整数数组 <code>speed</code> 表示每个怪物的速度，其中 <code>speed[i]</code> 是第 <code>i</code> 个怪物的速度（单位：米/分）。</p><p>怪物从 第 <code>0</code> 分钟时开始移动。你有一把武器，并可以选择在每一分钟的开始时使用，包括第 <code>0</code> 分钟。但是你无法在一分钟的中间使用武器。这种武器威力惊人，一次可以消灭任一还活着的怪物。</p><p>一旦任一怪物到达城市，你就输掉了这场游戏。如果某个怪物恰在某一分钟开始时到达城市，这会被视为输掉游戏，在你可以使用武器之前，游戏就会结束。</p><p>返回在你输掉游戏前可以消灭的怪物的最大数量。如果你可以在所有怪物到达城市前将它们全部消灭，返回 <code>n</code> 。</p><p>示例 1：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入：dist = [1,3,4], speed = [1,1,1]</span><br><span class="line">输出：3</span><br><span class="line">解释：</span><br><span class="line">第 0 分钟开始时，怪物的距离是 [1,3,4]，你消灭了第一个怪物。</span><br><span class="line">第 1 分钟开始时，怪物的距离是 [X,2,3]，你没有消灭任何怪物。</span><br><span class="line">第 2 分钟开始时，怪物的距离是 [X,1,2]，你消灭了第二个怪物。</span><br><span class="line">第 3 分钟开始时，怪物的距离是 [X,X,1]，你消灭了第三个怪物。</span><br><span class="line">所有 3 个怪物都可以被消灭。</span><br></pre></td></tr></table></figure><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><ul><li>转换思路：<ul><li>在每一分钟均可消灭一只怪物</li><li>计算出每一只怪物到达城市所需的时间（向上取整），并按照到达所需时间由快到慢进行排序，得到到达时间数组</li><li>遍历整个数组：比较消灭怪物的时间点（数组下标）和怪物到达的时间点（数组下标对应的值）的大小</li><li>需满足：<strong>怪物到达的时间点 <code>小于等于</code> 消灭怪物的时间点</strong></li><li>不满足的话返回当前数组下标</li></ul></li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">eliminateMaximum</span>(<span class="params">dist: <span class="built_in">number</span>[], speed: <span class="built_in">number</span>[]</span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> timeList = dist.<span class="title function_">map</span>(<span class="function">(<span class="params">item, idx</span>)=&gt;</span> <span class="title class_">Math</span>.<span class="title function_">ceil</span>(item / speed[idx])).<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; timeList.<span class="property">length</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(timeList[i] &lt;= i)&#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> timeList.<span class="property">length</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;&lt;a class=&quot;link&quot; href=&quot;https://leetcode.cn/problems/eliminate-maximum-n</summary>
      
    
    
    
    <category term="前端刷题" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%88%B7%E9%A2%98/"/>
    
    <category term="TS" scheme="http://example.com/categories/TS/"/>
    
    
    <category term="LeetCode刷题" scheme="http://example.com/tags/LeetCode%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>2511. 最多可以摧毁的敌人城堡数目</title>
    <link href="http://example.com/2023/09/02/lc-2511/"/>
    <id>http://example.com/2023/09/02/lc-2511/</id>
    <published>2023-09-02T12:07:04.000Z</published>
    <updated>2023-11-06T03:29:16.908Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a class="link" href="https://leetcode.cn/problems/maximum-enemy-forts-that-can-be-captured/description/">点击前往<i class="fas fa-external-link-alt"></i></a></p><p>给你一个长度为 n ，下标从 0 开始的整数数组 forts ，表示一些城堡。<code>forts[i]</code> 可以是 -1 ，0 或者 1 ，其中：</p><p>-1 表示第 i 个位置 没有 城堡。<br>0 表示第 i 个位置有一个 敌人 的城堡。<br>1 表示第 i 个位置有一个你控制的城堡。</p><p>现在，你需要决定，将你的军队从某个你控制的城堡位置 i 移动到一个空的位置 j ，满足：<code>0 &lt;= i, j &lt;= n - 1</code><br>军队经过的位置 只有 敌人的城堡。正式的，对于所有 <code>min(i,j) &lt; k &lt; max(i,j)</code> 的 k ，都满足 <code>forts[k] == 0</code> 。<br>当军队移动时，所有途中经过的敌人城堡都会被 摧毁 。</p><p>请你返回 <strong>最多</strong> 可以摧毁的敌人城堡数目。如果无法移动你的军队，或者没有你控制的城堡，请返回 0 。</p><p>示例 1：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：forts = [1,0,0,-1,0,0,0,0,1]</span><br><span class="line">输出：4</span><br><span class="line">解释：</span><br><span class="line">- 将军队从位置 0 移动到位置 3 ，摧毁 2 个敌人城堡，位置分别在 1 和 2 。</span><br><span class="line">- 将军队从位置 8 移动到位置 3 ，摧毁 4 个敌人城堡。</span><br><span class="line">4 是最多可以摧毁的敌人城堡数目，所以我们返回 4 。</span><br></pre></td></tr></table></figure><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><ul><li><p>题目解析：</p><ul><li>从 <strong>你控制的城堡</strong> 到 <strong>空位置</strong>，即：从 1 -&gt; -1。</li><li>无法移动你的军队，或者没有你控制的城堡，返回 0 。</li></ul></li><li><p>双指针思路</p><ul><li>指针 <code>pre</code> 用于记录当前位置的前一个不为 0 的位置。</li><li>指针 <code>cur</code> 为当前位置不为 0 ，且与指针 <code>pre</code> 位置对应值不相同的值对应的位置。</li><li><code>curResult = cur - pre - 1</code> </li><li><code>result</code> 用于记录最终结果值，取最大值。</li></ul></li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">captureForts</span>(<span class="params">forts: <span class="built_in">number</span>[]</span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="number">0</span>, pre = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; forts.<span class="property">length</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(forts[i] === <span class="number">1</span> || forts[i] === -<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(pre &gt;= <span class="number">0</span> &amp;&amp; forts[pre] !== forts[i])&#123;</span><br><span class="line">                result = <span class="title class_">Math</span>.<span class="title function_">max</span>(result, i - pre - <span class="number">1</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            pre = i</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;&lt;a class=&quot;link&quot; href=&quot;https://leetcode.cn/problems/maximum-enemy-forts</summary>
      
    
    
    
    <category term="JS" scheme="http://example.com/categories/JS/"/>
    
    <category term="前端刷题" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%88%B7%E9%A2%98/"/>
    
    <category term="双指针" scheme="http://example.com/categories/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
    
    <category term="LeetCode刷题" scheme="http://example.com/tags/LeetCode%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript学习笔记（十三）泛型</title>
    <link href="http://example.com/2023/02/02/TS-13/"/>
    <id>http://example.com/2023/02/02/TS-13/</id>
    <published>2023-02-02T07:49:56.000Z</published>
    <updated>2023-11-06T03:29:16.813Z</updated>
    
    <content type="html"><![CDATA[<h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><blockquote><p>泛型（Generics）是指在定义函数、接口或类的时候，不预先指定具体的类型，而在使用的时候再指定类型的一种特性。</p></blockquote><p>单看定义可能不是那么容易理解，不妨我们从一个例子出发来探寻泛型。</p><p>需求：编写一个恒等函数（返回任何传进内容的函数）。那么如果使用 js 来编写，很简单就写出来了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">identity</span>(<span class="params">arg</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> arg</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我们利用 TS 来编写，这时针对该函数我们的变量类型该怎么写呢？由于输入值的类型是不确定的，我们没有办法很直接的将具体类型直接声明出来。这时可能就会想使用<code>any</code>类型。如果使用<code>any</code>类型，也让我们丢失了函数返回时的类型信息。</p><p>所以我们需要一种可以捕获参数类型的方式，然后再用它表示返回值的类型。这里我们用了一个<strong>类型变量（type variable）</strong>，一种用在类型而非值上的特殊的变量。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> identity&lt;T&gt;(<span class="attr">arg</span>: T): T&#123;</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，当我们传入不同类型的值后，通过该函数的返回的值的类型也是明确的。</p><h1 id="多个类型参数"><a href="#多个类型参数" class="headerlink" title="多个类型参数"></a>多个类型参数</h1><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> swap&lt;T, U&gt;(<span class="attr">tuple</span>: [T, U]): [U, T] &#123;</span><br><span class="line">    <span class="keyword">return</span> [tuple[<span class="number">1</span>], tuple[<span class="number">0</span>]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">swap</span>([<span class="number">7</span>, <span class="string">&#x27;seven&#x27;</span>]); <span class="comment">// [&#x27;seven&#x27;, 7]</span></span><br></pre></td></tr></table></figure><h1 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a>泛型约束</h1><ul><li>在函数内部使用泛型变量的时候，由于事先不知道它是哪种类型，所以不能随意的操作它的属性或方法。</li><li>我们可以使用接口来对泛型进行约束限制。</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Lengthwise</span> &#123;</span><br><span class="line">  <span class="attr">length</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> loggingIdentity&lt;T <span class="keyword">extends</span> <span class="title class_">Lengthwise</span>&gt;(<span class="attr">arg</span>: T): T &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arg.<span class="property">length</span>);</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上例子中针对泛型进行了类型的限制使得函数的入参必须是有<code>length</code>属性的变量。</p><ul><li>多个类型参数之间也可以互相约束：</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> copyFields&lt;T <span class="keyword">extends</span> U, U&gt;(<span class="attr">target</span>: T, <span class="attr">source</span>: U): T &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> id <span class="keyword">in</span> source) &#123;</span><br><span class="line">        target[id] = (&lt;T&gt;source)[id];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> x = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">4</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">copyFields</span>(x, &#123; <span class="attr">b</span>: <span class="number">10</span>, <span class="attr">d</span>: <span class="number">20</span> &#125;);</span><br></pre></td></tr></table></figure><h1 id="泛型接口（类型）"><a href="#泛型接口（类型）" class="headerlink" title="泛型接口（类型）"></a>泛型接口（类型）</h1><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">CreateArrayFunc</span> &#123;</span><br><span class="line">  &lt;T&gt;(<span class="attr">length</span>: <span class="built_in">number</span>, <span class="attr">value</span>: T): <span class="title class_">Array</span>&lt;T&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">createArray</span>: <span class="title class_">CreateArrayFunc</span>;</span><br><span class="line">createArray = <span class="keyword">function</span>&lt;T&gt;(<span class="attr">length</span>: <span class="built_in">number</span>, <span class="attr">value</span>: T): <span class="title class_">Array</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">result</span>: T[] = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">      result[i] = value;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">createArray</span>(<span class="number">3</span>, <span class="string">&#x27;x&#x27;</span>); <span class="comment">// [&#x27;x&#x27;, &#x27;x&#x27;, &#x27;x&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">CreateArrayFunc</span>&lt;T&gt; &#123;</span><br><span class="line">  (<span class="attr">length</span>: <span class="built_in">number</span>, <span class="attr">value</span>: T): <span class="title class_">Array</span>&lt;T&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">createArray</span>: <span class="title class_">CreateArrayFunc</span>&lt;<span class="built_in">any</span>&gt;;</span><br><span class="line">createArray = <span class="keyword">function</span>&lt;T&gt;(<span class="attr">length</span>: <span class="built_in">number</span>, <span class="attr">value</span>: T): <span class="title class_">Array</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">result</span>: T[] = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">      result[i] = value;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">createArray</span>(<span class="number">3</span>, <span class="string">&#x27;x&#x27;</span>); <span class="comment">// [&#x27;x&#x27;, &#x27;x&#x27;, &#x27;x&#x27;]</span></span><br></pre></td></tr></table></figure><h1 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h1><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GenericNumber</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="attr">zeroValue</span>: T;</span><br><span class="line">  <span class="attr">add</span>: <span class="function">(<span class="params">x: T, y: T</span>) =&gt;</span> T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myGenericNumber = <span class="keyword">new</span> <span class="title class_">GenericNumber</span>&lt;<span class="built_in">number</span>&gt;();</span><br><span class="line">myGenericNumber.<span class="property">zeroValue</span> = <span class="number">0</span>;</span><br><span class="line">myGenericNumber.<span class="property">add</span> = <span class="keyword">function</span>(<span class="params">x, y</span>) &#123; <span class="keyword">return</span> x + y; &#125;;</span><br></pre></td></tr></table></figure><h1 id="泛型参数的默认类型"><a href="#泛型参数的默认类型" class="headerlink" title="泛型参数的默认类型"></a>泛型参数的默认类型</h1><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> createArray&lt;T = <span class="built_in">string</span>&gt;(<span class="attr">length</span>: <span class="built_in">number</span>, <span class="attr">value</span>: T): <span class="title class_">Array</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">result</span>: T[] = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">      result[i] = value;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;泛型&quot;&gt;&lt;a href=&quot;#泛型&quot; class=&quot;headerlink&quot; title=&quot;泛型&quot;&gt;&lt;/a&gt;泛型&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;泛型（Generics）是指在定义函数、接口或类的时候，不预先指定具体的类型，而在使用的时候再指定类型的一种特性。</summary>
      
    
    
    
    <category term="前端学习笔记" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="TypeScript" scheme="http://example.com/categories/TypeScript/"/>
    
    
    <category term="TypeScript学习" scheme="http://example.com/tags/TypeScript%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
</feed>
