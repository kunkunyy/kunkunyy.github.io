[{"title":"Hello World","url":"/2021/03/10/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n"},{"title":"Markdown学习笔记","url":"/2021/03/12/markdown-study-notes/","content":" 之前只是用markdown写过博客并没有系统的去了markdown语法，现在将创建博客后的第一篇文章用来记录我学习markdown的经历以及对于知识点的理解。\nmarkdown官方介绍和个人理解菜鸟教程介绍\nMarkdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。\nMarkdown 语言在 2004 由约翰·格鲁伯（英语：John Gruber）创建。\nMarkdown 编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式的文档。\nMarkdown 编写的文档后缀为 .md, .markdown。\n\n个人理解\nMarkdown是一种纯文本标记语言\n语法简单，容易上手\n按照语法，自动排版，格式易操作\n……\n\n语法学习标题标题有两种书写格式，推荐使用第一种。\n# 号标识标题\n用法：使用 # 号可表示 1-6 级标题，每升一级添加一个 # 号\n易错点：最后一个 # 号后空一格\n示例：# 一级标题## 二级标题\n结果\n  \n\n\n= 和 - 标记标题\n用法：在对应文字下方输入 = （-）即可\n示例：一级标题=二级标题-\n结果\n\n\n\n段落格式换行\n实现方式：\n句子末尾空两格然后回车\n空一行实现换行\n\n\n\n字体斜体*猫猫头*_猫猫头_\n粗体**猫猫头**__猫猫头__\n粗斜体***猫猫头***___猫猫头___\n\n分割线\n实现方式：\n在一行中用三个以上的星号、减号、底线来建立一个分隔线。\n行内不能有其他东西。\n可以在星号或是减号中间插入空格。\n\n\n\n删除线（在文字上添加删除线）\n实现方式：~~猫猫头的小窝~~\n效果展示：猫猫头的小窝\n\n下划线\n实现方式：&lt;u&gt;猫猫头的小窝&lt;/u&gt;\n效果展示：猫猫头的小窝\n\n脚注\n补充说明词语或者句子内容。\n可用于标注出处，翻译等。\n实现方式：“[^情不知所起，一往而深。]”[^情不知所起，一往而深。]:感情不知道什么时候就开始了，而且愈来愈深厚。\n效果展示：“情不知所起，一往而深。”\n\n列表有序、无序列表\n实现方式：\n有序：数字并加上 . 号来表示。\n无序：星号(*)、加号(+)或是减号(-)作为列表标记，且标记后面要添加一个空格。\n\n\n\n列表嵌套\n实现方式：在子列表中的选项前面添加四个空格（或者一个Tab键）\n例子：1. 猫猫头：    - 猫猫头的代码库    - 猫猫头的图片库\n\n\n\n\n区块\n实现方式：在段落开头使用 &gt; 符号，后面紧跟一个空格符号。\n嵌套使用：\n区块嵌套：每增加一个 &gt; 符号增加一层。\n区块嵌套列表：&gt; + 猫猫头的代码库&gt; + 猫猫头的图片库\n\n\n猫猫头的代码库\n猫猫头的图片库\n\n\n\n列表嵌套区块：1. 猫猫头    &gt; 猫猫头的图片库    &gt; 猫猫头的代码库\n\n\n猫猫头\n猫猫头的图片库猫猫头的代码库\n\n\n\n\n\n代码\n实现方式：\n代码区块：\n使用 4 个空格或者一个制表符（Tab 键）。\n用 ``` 包裹一段代码，并指定一种语言，也可以不指定（推荐）。\n\n\n\n\n\n链接\n实现方法：[链接名称](链接地址)或者&lt;链接地址&gt;\n例子：[百度](www.baidu.com)\n\n图片\n实现方式：![alt 属性文本](图片地址)![alt 属性文本](图片地址 &quot;可选标题&quot;)\n\n开头一个感叹号 !\n接着一个方括号，里面放上图片的替代文字\n接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上选择性的 ‘title’ 属性的文字。\n\n\n补充：可以使用&lt;img&gt;标签，用于指定图片的高度与宽度。\n\n表格\n实现方式：\n使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行。\n-: 设置内容和标题栏居右对齐。\n:- 设置内容和标题栏居左对齐。\n:-: 设置内容和标题栏居中对齐。\n\n\n示例：| 左对齐 | 右对齐 | 居中对齐 || :-----| ----: | :----: || 单元格 | 单元格 | 单元格 || 单元格 | 单元格 | 单元格 |\n\n\n\n\n总结这里就暂时总结了markdown一些基本用法，能够满足用来写博客就可以了，后面继续加油吧！有什么问题可以留言哦！\n","categories":["markdown"],"tags":["markdown","study notes"]},{"title":"Python max函数不同参数结果比较","url":"/2021/03/15/python-skill-max/","content":"前言&emsp; &emsp; 在菜鸟教程中对于max函数描述是这样的：max() 方法返回给定参数的最大值，参数可以为序列。这个描述只是客观的将这个函数的功能给描述出来了，但这只是一个模糊的定义。由于没有指定可传入参数的类型，所以说这就带给了这个函数无限种可能。现在就来讨论讨论吧！如果有哪些地方表述不是很正确希望大家在评论区指出来哦！\n数字类型&emsp; &emsp; 首先我们来看看最简单大数字类型。毋庸置疑，当参数是数字的时候，直接返回最大的数就好了。但是要注意的是这里的数字指的是一系列数，返回其中最大的。下面来看一个简单的例子。\n&gt;&gt;&gt; max(1,2,3,4,5,6,7,8,9)9\n\n字符串类型&emsp; &emsp; 我们知道python中字符串是由单引号双引号括起来的一个字符序列。那么当输入max的变量为一个字符串它会返回给我们什么结果呢？\n&emsp; &emsp; 我们先看下面这个例子：\n&gt;&gt;&gt;a=&#x27;1,6,0,4,5&#x27;&gt;&gt;&gt;max(a)&#x27;6&#x27;\n我们输入一个由单个数字组成的字符串，穿入max函数后返回了其中的 ‘6’ 这个字符。难道是将字符转化为数字然后再比较大小吗？那字符串中的 ‘,’ 又去哪了呢？那如果是字母又如何进行比较呢？来看下一个例子：\n&gt;&gt;&gt;b=&#x27;fabced&#x27;&gt;&gt;&gt;max(b)&#x27;f&#x27;\n这里变量b为一个字母组成的字符串，结果返回给我们的是字符 ‘f’ ，这里我们大致应该可以判断出来：当max函数的输入变量为一个字符串的时候，则返回字符串中字符所对应的ASCII码最大的那个字符。\n&emsp; &emsp; 为了验证这一结论我们利用下面这个例子进行验证：\n&gt;&gt;&gt;c=&#x27;1,a,2,c&#x27;&gt;&gt;&gt;max(c)&#x27;c&#x27;\n&emsp; &emsp; 从这个例子我们就可以验证刚刚的结论了：c这个字符串中字符’1’’a’’2’’c’对应的ASCII码的大小分别为49，97，50，99，所以字符’c’所对应的ASCII码值最大固返回字符’c’。那么字符’,’去哪了呢？实际上字符’,’也是参与了比较，由于它所对应的ASCII码为44最小，所以看似跟舍弃了一样。\n&gt;&gt;&gt;c=&#x27;1,a,2,c&#x27;&gt;&gt;&gt;min(c)&#x27;,&#x27;\n\n另外，max函数还可以对于传入的可迭代对象找出元素中的最大值。这里可迭代的对象主要是列表和字典\n列表同样对于列表，它满足可迭代这样一个特点，这里我们主要分四种情况来讨论：\n\n元素全为数字&gt;&gt;&gt;a=[1,2,3,4,5]&gt;&gt;&gt;max(a)5\n元素全为字符&gt;&gt;&gt;b=[&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;,&#x27;e&#x27;]&gt;&gt;&gt;max(b)&#x27;e&#x27;\n&gt;&gt;&gt;c=[&#x27;ab&#x27;,&#x27;ac&#x27;,&#x27;ad&#x27;,&#x27;ae&#x27;]&gt;&gt;&gt;max(c)&#x27;ae&#x27;\n&gt;&gt;&gt;d=[&#x27;1a&#x27;,&#x27;1b&#x27;,&#x27;2a&#x27;,&#x27;2b&#x27;]&gt;&gt;&gt;max(d)&#x27;2b&#x27;\n通过以上几个例子我们不难发现：\n列表中元素类型需一致；（前提条件）\n若列表中元素数字类型值，则返回列表中元素的最大值；\n若列表中元素为字符，字符转换为对应ASCII码值输出最大的；\n若列表中元素为字符串，将组成字符串的每个字符的ASCII码相加，然后输出最大的。\n\n列表（元组）刚刚我们讨论了简单元素组成的列表作为参数的情况，接下来我们看一看由元组组成的列表：我们还是按照上面的步骤来。\n\n全为数字\n&gt;&gt;&gt;a=[(1,3),(2,2),(1,4),(3,0)]&gt;&gt;&gt;max(a)(3,0)\n对应位置元素类型相同\n&gt;&gt;&gt;b=[(&#x27;a&#x27;,1),(&#x27;b&#x27;,5),(&#x27;a&#x27;,6)]&gt;&gt;&gt;max(b)(&#x27;b&#x27;,5)\n&gt;&gt;&gt;c=[(&#x27;a&#x27;,&#x27;A&#x27;),(&#x27;a&#x27;,&#x27;B&#x27;)]&gt;&gt;&gt;max(c)(&#x27;a&#x27;,&#x27;B&#x27;)\n元组大小不一致\n&gt;&gt;&gt;d=[(1,4),(3,1,5),(3,1)]&gt;&gt;&gt;max(d)(3,1,5)\n对应位置元素不同\n&gt;&gt;&gt;e=[(6,4),(6,1,5),(3,&#x27;a&#x27;)]&gt;&gt;&gt;max(e)(6,4)\n&gt;&gt;&gt;f=[(1,4),(&#x27;a&#x27;,2),(3,1)]&gt;&gt;&gt;max(e)TypeError: &#x27;&gt;&#x27; not supported between instances of &#x27;str&#x27; and &#x27;int&#x27;\n通过以上几个例子对比分析我们不难发现：\n\n按照元组内部排列顺序从前到后对应位置进行比较，如果对应位置元素类型和大小相同，则比较下一个位置的元素，按照此规则进行比较直至找到最大值或者出错。\n\n类型不匹配：列表元组中当比较到对应位置发现存在相比较的两个元素类型不相同时报错；\n\n当比较位置不存在元素时，默认为NUL；\n\n当比较的元素为数字类型值，则返回列表中元素的最大值；\n\n当比较的元素为字符，字符转换为对应ASCII码值返回；\n\n当比较的元素为字符串，将组成字符串的每个字符的ASCII码相加返回。\n\n\n字典\n对于字典类型来说相比较容易一些，只需要比较字典的键值，输出最大的键值；\n键值的比较同上。\n\n&gt;&gt;&gt;a=&#123;1:1,2:19,3:100,4:1&#125;&gt;&gt;&gt;max(a)4&gt;&gt;&gt;b=&#123;20:21,5:20,13:14&#125;&gt;&gt;&gt;max(b)20","categories":["python"],"tags":["Skill","python"]},{"title":"Python 字符串连接方法","url":"/2021/03/16/python-skill-string-concatenation/","content":"之前在学习Python的时候对于字符串的连接并没有过多的研究，能应付考试就好啦。最近在写博客遇到相关内容去查了查，发现字符串连接的方法还是非常多的，这篇博客就来记录一下方便以后查看。\n字符串连接方法总结假设’str1’，’str2’为两个字符串。\n‘+’ 连接a = str1b = str2print(a+b)&gt;&gt;&gt;str1str2\n\n模式串”%s”方法print（&#x27;%s%s&#x27; %(str1,str2)）&gt;&gt;&gt;str1str2\nformat 方法print(&quot;&#123;&#125;&#123;&#125;&quot;.format(str1，str2))print(&quot;&#123;0&#125;&#123;1&#125;&quot;.format(str1，str2))print(&quot;&#123;c&#125;&#123;d&#125;&quot;.format(c=str1，d=str2))&gt;&gt;&gt;str1str2\n‘f-string’方法print(f&#x27;&#123;str1&#125;&#123;str2&#125;&#x27;) &gt;&gt;&gt;str1str2\njoin方法\n列表print(&#x27;&#x27;.join([str1,str2])) &gt;&gt;&gt;str1str2\n字典：只有键和值均为字符串时才可使用。a=&#123;&#x27;20&#x27;:&#x27;20&#x27;,&#x27;520&#x27;:&#x27;1314&#x27;&#125;print(&#x27;&#x27;.join(a))print(&#x27;&#x27;.join(a.value（））) &gt;&gt;&gt; &#x27;20520&gt;&gt;&gt; &#x27;201314&#x27;\n通过() 多行拼接s = (    &#x27;Hello&#x27;    &#x27; &#x27;    &#x27;World&#x27;    &#x27;!&#x27;)print(s)&gt;&gt;&gt; Hello World! \n通过string模块中的Template对象拼接\n实现原理：通过Template初始化一个字符串。这些字符串中包含了一个个key。通过调用substitute或safe_subsititute，将key值与方法中传递过来的参数对应上，从而实现在指定的位置导入字符串。from string import Templates = Template(&#x27;$&#123;s1&#125; $&#123;s2&#125;!&#x27;)print(s.safe_substitute(s1=&#x27;Hello&#x27;,s2=&#x27;World&#x27;))&gt;&gt;&gt; Hello World\n空格自动连接&gt;&gt;&gt; &quot;Hello&quot; &quot;Nasus&quot;&#x27;HelloNasus&#x27;\n\n","categories":["python"],"tags":["Skill","python"]},{"title":"python学习笔记（一）","url":"/2021/03/15/python-study-note/","content":"本科学习python课程笔记，之前使用的有道云笔记记载，现在将它搬运到博客中。\n第一章是一些基本概念，所以从第二章开始记的。所以，一起加油咯！\n\n第二章主要是turtle库的使用，然后简单介绍了python中的字符串的使用，第三章会详细讲字符串。\n字符串简单介绍字符串的两种序号表达\n假设字符串长度为L：\n正向递增序号以最左侧字符序号为0，向右依次递增，最右侧字符序号为L-1；\n反向递减序号以最右侧字符序号为-1，向左依次递减，最左侧字符序号为-L。\n\n\n\n\n字符串截取范围\nTempStr[0:-1]    从0到-1，但不包括-1\n口诀：前取后不取\n\nturtle库介绍&emsp; &emsp; 实际上我们使用turtle库来绘制图形就是：在操纵“小海龟”在我们所定义的画布（canvas）（或者叫做窗体也可以）上进行爬行，它行动留下的痕迹就是我们所要绘制图形的轮廓。&emsp; &emsp; 在了解绘制原理后我们就对于这个必不可少的画布进行了解和学习。\n画布坐标轴&emsp; &emsp; 一般情况下，当你创建了一个画布它就会对应的生成坐标轴，一方面是为了方便我们绘制图形；另一方面也是为了避免造成歧义导致出错。&emsp; &emsp; 下图是对应坐标系的规定：\n\n\n\n画布（窗体）的创建\nturtle.screensize(canvwidth=None,canvheight=None,bg=None)\n参数：画布宽、高、背景色\n\n\nturtle.setup(width, height, startx, starty)\n参数：窗体宽、高、窗体左上角顶点的横纵坐标\n输入宽和高为整数时,表示像素;为小数时,表示占据电脑屏幕的比例\n\n\n\n画笔&emsp; &emsp;默认情况下，我们的“画笔”是一个位于坐标原点面朝正向的小海龟，我们通过控制小海龟来完成图形的绘制。\n画笔的属性\nturtle.pensize/width(width)\n用于设置画笔宽度\n\n\nturtle.pencolor()\n用于设置画笔颜色\n\n\nturtle.speed(x)\n用于设置画笔速度，0≤x≤10\n\n\n\n画笔移动状态\nturtle.forward/backward(d)\n向前/向后移动距离为d\n\n\nturtle.right/left(r)\n向左/右转动度数\n\n\nturtle.down/up()\n画笔落下/抬起\n\n\nturtle.fillcolor()\n给绘制的图形填充颜色\n\n\nturtle.circle(r,angle)\n绘制圆，半径正负均可，angle为角度\n\n\n\n\nturtle.done()\n结束程序\n\n\n\n","categories":["python"],"tags":["study notes","python"]},{"title":"python学习笔记（二）","url":"/2021/03/15/python-study-notes-2/","content":"第三章这一章主要是对基本数据类型的学习，包括数字和字符串类型以及对应的操作。\n数字类型\n类型：整数、浮点数、复数\n\n浮点数\n浮点数间运算存在不确定尾数，如下图所示：\n\n\n原因：浮点数是小数的一种二进制表示方法，由于浮点数存在精度限制，在使用浮点数做运算时就可能会产生不确定尾数。\n解决方法：round(x,d)对x四舍五入，d是小数截取位数。\n\n\n科学计数法\n\n\n复数\n实、虚部获取方法：z为一复数\n实部：z.real\n虚部：z.imag\n\n\n\n数字类型关系\n不同类型间可进行混合运算，生成结果为”最宽”类型\n整数 &gt; 浮点数 &gt; 复数\n\n数值运算函数常用函数abs(x)\n对于x取绝对值\n\nsqrt(x)\nx的平方根\n\npow(x,y)\nx的y次幂\n\nround(x,[d])\n对于数x，四舍五入保留d位\n\nmax()/min()\n返回给定参数的最大值\n参数可以为：数字、字符串、列表、元组\n不同参数返回结果请参考这篇文章：max不同参数比较\n\nint(x)\n将x变成整数，直接舍弃小数部分；\n参数：数字，字符\n\nfloat(x)\n将x变成浮点数，增加小数部分\n参数：数字，字符\n\n字符串字符串表示方法\n一对单、双或三引号构成\n多行字符串表示方法：\n三引号\n小括号\n\n\n单、双、三引号的使用：  &#x27;这里有个&quot;双引号&quot;哦&#x27; &quot;这里有个&#x27;单引号&#x27;嘎&quot;&#x27;&#x27;&#x27; 这里既有&#x27;单引号&#x27;嘎，又有&quot;双引号&quot;哦  &#x27;&#x27;&#x27;\n\n字符串排序\n正向递增序号以最左侧字符序号为0，向右依次递增，最右侧字符序号为L-1；\n反向递减序号以最右侧字符序号为-1，向左依次递减，最左侧字符序号为-L。\n\n字符串字符的获取\n假设变量name为一字符串，其中N、M均为索引号：\n获取单个字符：name[N];\n获取一段字符串：name[N:M];\n根据步长K切片：name[N:M:K];\n\n\n\n字符串的操作符、处理函数和方法字符串的操作符\nx+y\n连接两个字符串x和y\n字符串连接方法\n\n\nx*n\n复制n次字符串x\n\n\nx in s\n判断x是否是s的子串，，是返回true，否返回false\n\n\n\n字符串常用处理函数和方法\nlen(x)：返回字符串长度\nstr(x)：任意类型x对应的字符串形式\nstr.lower()/upper()\n返回新的字符串，全部字符小写/大写\n\n\nstr.split(sep)\n返回的是一个列表，将源字符串按照sep进行分割\n\n\nstr.count(sub)\n返回字串sub在str中出现的次数\n\n\nstr.replace(old,new)\n返回新的字符串，将str中所有old子串替换为new\n\n\nstr.center(width[,fillchart])\n字符串str根据宽度width居中，fillchart为剩余区域的填充字符\n\n\nstr.join(item)\n在item除最后一个元素外增加一个str\n多用于字符串分割\n\n\n\n字符串类型格式化\n&lt;模板字符串&gt;.format(&lt;逗号分隔的参数&gt;)\n槽：\n槽内部对格式化的配置方式\n\n&gt;&gt;&gt; &quot;&#123;0:=^20&#125;.format(&quot;python&quot;)&quot;&#x27;=======PYTHON======&#x27;\n\n","categories":["python"],"tags":["study notes","python"]},{"title":"Python学习笔记（三）","url":"/2021/03/22/python-study-notes-3/","content":"程序控制结构是每一种程序设计语言都会涉及到的一块，这边文章就来讲讲python中的程序设计结构。\n条件语句用于条件组合的三个保留字设x，y为两个条件：\n\n\n\n操作符\n描述\n\n\n\nx and y\n逻辑与\n\n\nx or y\n逻辑或\n\n\nnot x\n逻辑非\n\n\n单分支结构\n单分支结构的定义想必大家也比较清楚了。条件语句中单分支结构写法如下：if 判断条件:    执行语句\n当条件符合时，执行相应的语句；不符合时则跳过。*\n\n二分支结构\n二分支增添了else这个保留字，和if一起使用，及满足判断条件执行if中的内容，不满足就执行else中内容：\nif 判断条件:    执行语句else：    执行语句\n多分支结构\n多分支结构在二分支的结构上引入了elif这个保留字，实际上等价于C语言中的else if：\nif 判断条件:    执行语句elif 判断条件:    执行语句......else:    执行语句\n\n循环语句for循环\npython中的for循环需要和保留字in进行搭配使用，即：for 元素 in 迭代对象:    执行语句\n这里我们要注意的是for语句是从可迭代的对象中依次取出每一个元素，然后再进行操作。\n\n\n和range()函数一起使用：\nrange()用于生成一个可迭代的对象\nrange(start, stop[, step])for i in range(3):    print(i)012----------------------------for i in range(1,3):    print(i)12----------------------------for i in range(1,5,2):    print(i)13\n\n\n列表，元组，集合，字符串#遍历列表a = [1,2,3]for i in a:    print(i)123----------------------------#遍历元组b = (&quot;hello&quot;,&quot;world&quot;,&quot;!&quot;)for i in b:    print(i)helloworld!----------------------------#遍历集合c = &#123;&quot;hello&quot;,&quot;world&quot;,&quot;!&quot;&#125;for i in c:    print(i)helloworld!----------------------------#遍历字符串d = &quot;python&quot;for i in d:    print(i)python\n字典e = &#123;&#x27;name&#x27;:&#x27;sun&#x27;,&#x27;habit&#x27;:&#x27;sunshine&#x27;&#125;#遍历键值对for i,j in e.items():    print(i,j)name sunhabit sunshine----------------------------#遍历键for i in e.keys():    print(i)namehabit----------------------------#遍历值for i in e.values():    print(i)sunsunshine\n文件\n\n\nfi是一个文件标识符，遍历其每行，产生循环\nfor line in fi:    &lt;语句块&gt;\nwhile循环\n使用方法：\n\n当条件判断为True时，执行语句块；\n当条件判断为False时，循环终止。while &lt;条件&gt;：    &lt;语句块&gt;\n\n\n与else同用：\n\n当while语句条件为true时，执行语句块内容，为false时执行else语句中的内容。while &lt;条件&gt;:    &lt;语句块&gt;else:    &lt;语句块&gt;\n\n\n\n循环保留字：continue和breakcontinue\n被用来跳过当前循环块中的剩余语句，然后继续进行下一轮循环\n\nbreak\n可以跳出 for 和 while 的循环体\nbreak仅跳出当前最内层循环\n示例：for i in &quot;PYTHON&quot;:    if i == &quot;T&quot;:        continue    print(i,end=&quot;&quot;)    else:        print(&quot;正常退出&quot;)PYTHON正常退出\nfor i in &quot;PYTHON&quot;:    if i == &quot;T&quot;:        break    print(i,end=&quot;&quot;)    else:        print(&quot;正常退出&quot;)PY\n\n","categories":["python"],"tags":["Skill","python"]}]